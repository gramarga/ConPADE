<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bio.Core</name>
    </assembly>
    <members>
        <member name="T:Bio.AATree`1">
            <summary>
             Arne Andersson Self Balancing Binary Search Tree.
            </summary>
            <typeparam name="T">Type of elements to store.</typeparam>
        </member>
        <member name="F:Bio.AATree`1.NullNode">
            <summary>
            Holds null node.
            </summary>
        </member>
        <member name="F:Bio.AATree`1.root">
            <summary>
            Holds Root node.
            </summary>
        </member>
        <member name="F:Bio.AATree`1.Comparer">
            <summary>
            Comparer to compare values.
            </summary>
        </member>
        <member name="M:Bio.AATree`1.#ctor">
            <summary>
            Initializes an instance of AATree class.
            </summary>
        </member>
        <member name="M:Bio.AATree`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes an instance of AATree class with specified comparer.
            </summary>
            <param name="comparer">Comparer to compare values.</param>
        </member>
        <member name="M:Bio.AATree`1.Add(`0)">
            <summary>
            Tries to add specified value to the AATree.
            If the value is already present in the tree then this method returns without adding.
            </summary>
            <param name="value">Value to add.</param>
            <returns>Returns true if value is added successfully, else returns false.</returns>
        </member>
        <member name="M:Bio.AATree`1.Remove(`0)">
            <summary>
            Tries to remove specified value from the AATree.
            </summary>
            <param name="value">Value to remove.</param>
            <returns>Returns true if the value is found and removed successfully, else returns false.</returns>
        </member>
        <member name="M:Bio.AATree`1.Contains(`0)">
            <summary>
            Verifies whether the specified value is present in the tree or not.
            </summary>
            <param name="value">Value to verify.</param>
            <returns>Returns true if the specified value is present in the tree, else returns false.</returns>
        </member>
        <member name="M:Bio.AATree`1.TrySearch(`0,`0@)">
            <summary>
            Searches for the specified value in the AATree.
            If found returns the value in actualValue out param, else this param contains DefaultValue.
            </summary>
            <param name="value">Value to search.</param>
            <param name="actualValue">Out parameter.</param>
            <returns>Returns true if the value is found, else returns false.</returns>
        </member>
        <member name="M:Bio.AATree`1.InOrderTraversal">
            <summary>
            Gets values using InOrder traversal.
            </summary>
        </member>
        <member name="M:Bio.AATree`1.PreOrderTraversal">
            <summary>
            Gets values using PreOrder traversal.
            </summary>
        </member>
        <member name="M:Bio.AATree`1.PostOrderTraversal">
            <summary>
            Gets values using PostOrder traversal.
            </summary>
        </member>
        <member name="M:Bio.AATree`1.TrySearch(`0,Bio.AATree{`0}.AATreeNode@)">
            <summary>
            Searches for the specified value in the AATree.
            If found returns the node containing the value in node out param, else this param contains NullNode.
            </summary>
            <param name="value">Value to search.</param>
            <param name="node">AATree node.</param>
            <returns>Returns true if the value is found, else returns false.</returns>
        </member>
        <member name="M:Bio.AATree`1.RotateLeft(Bio.AATree{`0}.AATreeNode,Bio.AATree{`0}.AATreeNode)">
            <summary>
            Split or Rotate left.
            </summary>
            <param name="parentNode"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.AATree`1.RotateRight(Bio.AATree{`0}.AATreeNode,Bio.AATree{`0}.AATreeNode)">
            <summary>
            Skew or Rotate right.
            </summary>
            <param name="parentNode"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="P:Bio.AATree`1.DefaultValue">
            <summary>
            Gets or sets Default value.
            By default this is set to default value of T.
            </summary>
        </member>
        <member name="P:Bio.AATree`1.Count">
            <summary>
            Gets number of elements present in the AATree.
            </summary>
        </member>
        <member name="M:Bio.AATree`1.AATreeNode.#ctor">
            <summary>
            Constructor to initialize null node.
            </summary>
        </member>
        <member name="T:Bio.AATree`2">
            <summary>
            Dictionary like implementation using AATree.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
        </member>
        <member name="M:Bio.AATree`2.#ctor">
            <summary>
            Initializes an instance of AATree class.
            </summary>
        </member>
        <member name="M:Bio.AATree`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes an instance of AATree class with specified comparer.
            </summary>
            <param name="keyComparer">Comparer to compare Keys.</param>
        </member>
        <member name="M:Bio.AATree`2.Add(`0,`1)">
            <summary>
            Tries to add specified key and value to the AATree.
            If the key is already present then this method returns without adding.
            </summary>
            <param name="key">Key to add.</param>
            <param name="value">Value to add.</param>
            <returns>Returns true if add is successful, else returns false.</returns>
        </member>
        <member name="M:Bio.AATree`2.Remove(`0)">
            <summary>
             Tries to remove specified key and associated value from the AATree.
            </summary>
            <param name="key">Key to remove.</param>
            <returns>Returns true if the key is found and removed successfully, else returns false.</returns>
        </member>
        <member name="M:Bio.AATree`2.Contains(`0)">
            <summary>
            Verifies whether the specified key is present in the tree or not.
            </summary>
            <param name="key">key to verify.</param>
            <returns>Returns true if the specified key is present in the tree, else returns false.</returns>
        </member>
        <member name="M:Bio.AATree`2.TryGetValue(`0,`1@)">
            <summary>
            Searches for the specified key in the AATree.
            If found returns the associated value in value out param, else this param contains DefaultValue.
            </summary>
            <param name="key">Key to search.</param>
            <param name="value">Out parameter.</param>
            <returns>Returns true if the key is found, else returns false.</returns>
        </member>
        <member name="M:Bio.AATree`2.InOrderTraversal">
            <summary>
            Gets Key and its associated value using InOrder traversal.
            </summary>
        </member>
        <member name="M:Bio.AATree`2.PreOrderTraversal">
            <summary>
            Gets Key and its associated value using PreOrder traversal.
            </summary>
        </member>
        <member name="M:Bio.AATree`2.PostOrderTraversal">
            <summary>
            Gets Key and its associated value using PostOrder traversal.
            </summary>
        </member>
        <member name="P:Bio.AATree`2.DefaultValue">
            <summary>
            Gets or sets the default value for TValue type.
            This DefaultValue is returned from indexer or TryGetValue methods when the key is not found in the AATree.
            </summary>
        </member>
        <member name="P:Bio.AATree`2.Count">
            <summary>
            Gets the number of elements present in the AATree.
            </summary>
        </member>
        <member name="P:Bio.AATree`2.Item(`0)">
            <summary>
            Gets or sets the value for the specified key.
            Get Method,
            if the key is found then the associated value will be returned, else DefaultValue is returned.
            Set Method,
            if the key is found then associated value is replaced with the specified value, 
            else Add method will be called to add key and value.
            </summary>
            <param name="key">Key to search.</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.AlignedSequence">
            <summary>
            AlignedSequence is a class containing the single aligned unit of alignment.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.IAlignedSequence">
            <summary>
            Interface to hold single aligned unit of alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IAlignedSequence.Metadata">
            <summary>
            Gets information about the AlignedSequence, like score, offsets, consensus, etc..
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IAlignedSequence.Sequences">
            <summary>
            Gets list of sequences, aligned as part of an alignment.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.AlignedSequence.#ctor">
            <summary>
            Initializes a new instance of the AlignedSequence class.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.AlignedSequence.#ctor(Bio.Algorithms.Alignment.IAlignedSequence)">
            <summary>
            Initializes a new instance of the AlignedSequence class
            Internal constructor to create AlignedSequence instance from IAlignedSequence.
            </summary>
            <param name="alignedSequence">IAlignedSequence instance.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.AlignedSequence.ToString">
            <summary>
            Converts sequenceData of all the Sequences in the list to string.
            </summary>
            <returns>sequenceData of all the Sequences in the list.</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignedSequence.Metadata">
            <summary>
            Gets information about the AlignedSequence, like score, offsets, consensus, etc..
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignedSequence.Sequences">
            <summary>
            Gets list of sequences involved in the alignment.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.AlignmentInfo">
            <summary>
            This class defines generic properties of any alignment algorithm.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.AlignmentInfo.IntType">
            <summary>
            "int" data type argument
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.AlignmentInfo.FloatType">
            <summary>
            "float" data type argument
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.AlignmentInfo.StringListType">
            <summary>
            "string" data type argument
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.AlignmentInfo.dataType">
            <summary>
            Data type of the parameter
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.AlignmentInfo.#ctor(System.String,System.String,System.Boolean,System.String,System.String,Bio.IParameterValidator)">
            <summary>
            Initializes a new instance of the AlignmentInfo class, 
            specifying all properties.
            </summary>
            <param name="name">Name of the property</param>
            <param name="description">A friendly description of property.</param>
            <param name="required">True if this is a required property.</param>
            <param name="defaultValue">The default value that will be used (expressed as a string).</param>
            <param name="dataType">The data type: INT, FLOAT, or STRINGLIST.</param>
            <param name="validator">The validation object, or null if no validation is required.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.AlignmentInfo.ValidateDataType(System.String)">
            <summary>
            Validate the data type value
            </summary>
            <param name="dataType">Type to be validated</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignmentInfo.Name">
            <summary>
            Gets or sets the name of attribute.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignmentInfo.Description">
            <summary>
            Gets or sets description of the parameter's meaning.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignmentInfo.Required">
            <summary>
            Gets or sets a value indicating whether the parameter is required property or not.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignmentInfo.DefaultValue">
            <summary>
            Gets or sets default value (as a string). Ignored if Required = true.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignmentInfo.DataType">
            <summary>
            Gets or sets data type ("int", "double", "float" or "string") of parameter.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.AlignmentInfo.Validator">
            <summary>
            Gets or sets validation object that tests values. If this is null, 
            any value will be accepted
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner">
            <summary>
            Base class for dynamic programming alignment algorithms, including NeedlemanWunsch, 
            SmithWaterman and PairwiseOverlap.
            The basic reference for this code (including NW, SW and Overlap) is Chapter 2 in 
            Biological Sequence Analysis; Durbin, Eddy, Krogh and Mitchison; Cambridge Press; 1998
            The variable names in these classes follow the notation in Durbin et al.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.IPairwiseSequenceAligner">
            <summary>
            A sequence alignment algorithm that aligns exactly two 
            sequences. This may diverge from ISequenceAligner at some 
            point; meanwhile, it's important to maintain the distinction
            (e.g., assembly requires a pairwise algorithm).
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.ISequenceAligner">
            <summary>
            A sequence aligner is an algorithm which takes N sequences as input and produces an 
            alignment of the sequences as output.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ISequenceAligner.AlignSimple(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            AlignSimple aligns the set of input sequences using the linear gap model (one gap penalty), 
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>List of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ISequenceAligner.Align(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Align aligns the set of input sequences using the affine gap model (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>List of sequence alignments.</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAligner.Name">
            <summary>
            Gets the name of the sequence alignment algorithm being
            implemented. This is intended to give developer
            some information of the alignment algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAligner.Description">
            <summary>
            Gets the description of the sequence alignment algorithm being
            implemented.This is intended to give developer
            some information of the alignment algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAligner.ConsensusResolver">
            <summary>
            Gets or sets the object that will be used to compute the alignment's consensus.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAligner.SimilarityMatrix">
            <summary>
            Gets or sets value of similarity matrix
            The similarity matrix determines the score for any possible pair
            of symbols that are encountered at a common location across the 
            sequences being aligned.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAligner.GapOpenCost">
            <summary>
            Gets or sets value of GapOpenCost
            The GapOpenCost is the cost of inserting a gap character into 
            a sequence.
            </summary>
            <remarks>
            In the linear gap model, all gaps use this cost. In the affine gap
            model, the GapExtensionCost below is also used.
            </remarks>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAligner.GapExtensionCost">
            <summary>
            Gets or sets value of GapExtensionCost 
            The GapExtensionCost is the cost of extending an already existing gap.
            This is used for the affine gap model, not used for the linear gap model.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.IPairwiseSequenceAligner.AlignSimple(Bio.ISequence,Bio.ISequence)">
            <summary>
            A convenience method - we know there are exactly two inputs.
            AlignSimple uses a single gap penalty.
            </summary>
            <param name="sequence1">First input sequence.</param>
            <param name="sequence2">Second input sequence.</param>
            <returns>List of Aligned Sequences.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.IPairwiseSequenceAligner.Align(Bio.ISequence,Bio.ISequence)">
            <summary>
            A convenience method - we know there are exactly two inputs.
            Align uses the affine gap model, which requires a gap open and a gap extension penalty.
            </summary>
            <param name="sequence1">First input sequence.</param>
            <param name="sequence2">Second input sequence.</param>
            <returns>List of Aligned Sequences.</returns>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.InternalSimilarityMatrix">
            <summary> 
            Similarity matrix for use in alignment algorithms. 
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.FirstInputSequence">
            <summary>
            First input sequence.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SecondInputSequence">
            <summary>
            Second input sequence.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.#ctor">
            <summary>
            Initializes a new instance of the DynamicProgrammingPairwiseAligner class.
            Constructor for all the pairwise aligner (NeedlemanWunsch, SmithWaterman, Overlap).
            Sets default similarity matrix and gap penalties.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.AlignSimple(Bio.ISequence,Bio.ISequence)">
            <summary>
            Aligns two sequences using a linear gap parameter, using existing gap open cost and similarity matrix.
            Set these using GapOpenCost and SimilarityMatrix properties before calling this method.
            </summary>
            <param name="sequence1">First input sequence.</param>
            <param name="sequence2">Second input sequence.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.AlignSimple(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Aligns two sequences using a linear gap parameter, using existing gap open cost and similarity matrix.
            Set these using GapOpenCost and SimilarityMatrix properties before calling this method.
            </summary>
            <param name="inputSequences">List of sequences to align.  Must contain exactly two sequences.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Bio#Algorithms#Alignment#ISequenceAligner#AlignSimple(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Aligns two sequences using a linear gap parameter, using existing gap open cost and similarity matrix.
            Set these using GapOpenCost and SimilarityMatrix properties before calling this method.
            </summary>
            <param name="inputSequences">List of sequences to align.  Must contain exactly two sequences.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Align(Bio.ISequence,Bio.ISequence)">
            <summary>
            Aligns two sequences using the affine gap metric, a gap open penalty and a gap extension penalty.
            This method uses the existing gap open and extension penalties and similarity matrix.
            Set these using GapOpenCost, GapExtensionCost and SimilarityMatrix properties before calling this method.
            </summary>
            <param name="sequence1">First input sequence.</param>
            <param name="sequence2">Second input sequence.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Align(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Aligns two sequences using the affine gap metric, a gap open penalty and a gap extension penalty.
            This method uses the existing gap open and extension penalties and similarity matrix.
            Set these using GapOpenCost, GapExtensionCost and SimilarityMatrix properties before calling this method.
            </summary>
            <param name="inputSequences">List of sequences to align.  Must contain exactly two sequences.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Bio#Algorithms#Alignment#ISequenceAligner#Align(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Aligns two sequences using the affine gap metric, a gap open penalty and a gap extension penalty.
            This method uses the existing gap open and extension penalties and similarity matrix.
            Set these using GapOpenCost, GapExtensionCost and SimilarityMatrix properties before calling this method.
            </summary>
            <param name="inputSequences">List of sequences to align.  Must contain exactly two sequences.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.AlignSimple(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,Bio.ISequence,Bio.ISequence)">
            <summary>
            Pairwise alignment of two sequences using a linear gap penalty.  The various algorithms in derived classes (NeedlemanWunsch, 
            SmithWaterman, and PairwiseOverlap) all use this general engine for alignment with a linear gap penalty.
            </summary>
            <param name="localSimilarityMatrix">Scoring matrix.</param>
            <param name="gapPenalty">Gap penalty (by convention, use a negative number for this.).</param>
            <param name="inputA">First input sequence.</param>
            <param name="inputB">Second input sequence.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Align(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32,Bio.ISequence,Bio.ISequence)">
            <summary>
            Pairwise alignment of two sequences using an affine gap penalty.  The various algorithms in derived classes (NeedlemanWunsch, 
            SmithWaterman, and PairwiseOverlap) all use this general engine for alignment with an affine gap penalty.
            </summary>
            <param name="localSimilarityMatrix">Scoring matrix.</param>
            <param name="gapOpenPenalty">Gap open penalty (by convention, use a negative number for this.).</param>
            <param name="gapExtensionPenalty">Gap extension penalty (by convention, use a negative number for this.).</param>
            <param name="inputA">First input sequence.</param>
            <param name="inputB">Second input sequence.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.CreateSimpleAlignmentJob(Bio.ISequence,Bio.ISequence)">
            <summary>
            Creates the Simple aligner job
            </summary>
            <param name="sequenceA">First aligned sequence</param>
            <param name="sequenceB">Second aligned sequence</param>
            <returns></returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.CreateAffineAlignmentJob(Bio.ISequence,Bio.ISequence)">
            <summary>
            Creates the Affine aligner job
            </summary>
            <param name="sequenceA">First aligned sequence</param>
            <param name="sequenceB">Second aligned sequence</param>
            <returns></returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.ValidateAlignInput(Bio.ISequence,Bio.ISequence)">
            <summary>
            Validates input sequences and gap penalties.
            Checks that input sequences use the same alphabet.
            Checks that each symbol in the input sequences exists in the similarity matrix.
            Checks that gap penalties are less than or equal to 0.
            Throws exception if sequences fail these checks.
            Writes warning to ApplicationLog if gap penalty or penalties are positive.
            </summary>
            <param name="inputA">First input sequence.</param>
            <param name="inputB">Second input sequence.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.InitializeAlign(Bio.ISequence)">
            <summary>
            Initializations to be done before aligning sequences.
            Sets consensus resolver property to correct alphabet.
            </summary>
            <param name="inputSequence">Input sequence.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SimpleAlignPrimer(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,Bio.ISequence,Bio.ISequence)">
            <summary>
            Performs initializations and validations required 
            before carrying out sequence alignment.
            Initializes only gap open penalty. Initialization for
            gap extension, if required, has to be done separately. 
            </summary>
            <param name="similarityMatrix">Scoring matrix.</param>
            <param name="gapPenalty">Gap open penalty (by convention, use a negative number for this.).</param>
            <param name="inputA">First input sequence.</param>
            <param name="inputB">Second input sequence.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.AddSimpleConsensusToResult(Bio.Algorithms.Alignment.PairwiseAlignedSequence)">
            <summary>
            Adds consensus to the alignment result.  At this point, it is a very simple algorithm
            which puts an ambiguity character where the two aligned sequences do not match.
            Uses X and N for protein and DNA/RNA alignments, respectively.
            </summary>
            <param name="alignment">
            Alignment to which to add the consensus.  This is the result returned by the main Align
            or AlignSimple method, which contains the aligned sequences but not yet a consensus sequence.
            </param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SimilarityMatrix">
            <summary> Gets or sets similarity matrix for use in alignment algorithms. </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.GapOpenCost">
            <summary> 
            Gets or sets gap open penalty for use in alignment algorithms. 
            For alignments using a linear gap penalty, this is the gap penalty.
            For alignments using an affine gap, this is the penalty to open a new gap.
            This is a negative number, for example GapOpenCost = -8, not +8.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.GapExtensionCost">
            <summary> 
            Gets or sets gap extension penalty for use in alignment algorithms. 
            Not used for alignments using a linear gap penalty.
            For alignments using an affine gap, this is the penalty to extend an existing gap.
            This is a negative number, for example GapExtensionCost = -2, not +2.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.ConsensusResolver">
            <summary>
            Gets or sets the object that will be used to compute the alignment's consensus.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Name">
            <summary>
            Gets the name of the Aligner. Intended to be filled in 
            by classes deriving from DynamicProgrammingPairwiseAligner class
            with the exact name of the Alignment algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Description">
            <summary>
            Gets the description of the Aligner. Intended to be filled in 
            by classes deriving from DynamicProgrammingPairwiseAligner class
            with the exact details of the Alignment algorithm.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell">
            <summary>
            Position details of cell with best score.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.Column">
            <summary>
            Column number of cell with optimal score.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.Row">
            <summary>
            Row number of cell with optimal score.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.Cell">
            <summary>
            Cell number of cell with optimal score.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the OptScoreCell struct.
            Creates best score cell with the input position values.
            </summary>
            <param name="row">Row Number.</param>
            <param name="column">Column Number.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the OptScoreCell struct.
            Creates best score cell with the input position values.
            </summary>
            <param name="row">Row Number.</param>
            <param name="column">Column Number.</param>
            <param name="cell">Cell Number.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.op_Equality(Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell,Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell)">
            <summary>
            Overrides == Operator.
            </summary>
            <param name="cell1">First cell.</param>
            <param name="cell2">Second cell.</param>
            <returns>Result of comparison.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.op_Inequality(Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell,Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell)">
            <summary>
            Overrides != Operator.
            </summary>
            <param name="cell1">First cell.</param>
            <param name="cell2">Second cell.</param>
            <returns>Result of comparison.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.Equals(System.Object)">
            <summary>
            Override Equals method.
            </summary>
            <param name="obj">Object for comparison.</param>
            <returns>Result of comparison.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.GetHashCode">
            <summary>
            Returns the Hash code.
            </summary>
            <returns>Hash code of OptScoreCell.</returns>
        </member>
        <member name="T:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob">
            <summary>
            Base class for all aligner algorithms.
            Provides storage and read/write operations for the grid.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.gridStride">
            <summary>
            Base class for alignment implementation.
            Provides building blocks for alignments using either simple or affine gap models.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.sequenceI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.sequenceJ">
            <summary>
            
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.colHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.rowWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.similarityMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.gapOpenCost">
            <summary>
            
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.gapExtensionCost">
            <summary>
            
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.gridRows">
            <summary>
            
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.gridCols">
            <summary>
            
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.cachedRowsC">
            <summary>
            Match cache rows
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.cachedColsC">
            <summary>
            Match cache columns
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.cachedRowsI">
            <summary>
            Insertion cost cache rows
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.cachedColsI">
            <summary>
            Insertion cost cache columns
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.cachedRowsD">
            <summary>
            Deletion cost cache rows
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.cachedColsD">
            <summary>
            Deletion cost cache columns
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.optScoreCells">
            <summary>
            Stores details of all cells with best score.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.optScore">
            <summary>
            
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.gapCode">
            <summary>
            Signifies gap in aligned sequence (stored as int[]) during trace back.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.#ctor(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32,Bio.ISequence,Bio.ISequence)">
            <summary>
            
            </summary>
            <param name="similarityMatrix"></param>
            <param name="gapOpenCost"></param>
            <param name="gapExtensionCost"></param>
            <param name="aInput"></param>
            <param name="bInput"></param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.InitializeCache">
            <summary>
            Initializes grid cache for the algorithm.      
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.SetBoundaryCondition(System.SByte[][],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the boundary values tor traceback
            </summary>
            <param name="trace">Array of traceback pointers</param>
            <param name="blockRow">First index of the block within the grid</param>
            <param name="blockCol">Second index of the block within the grid</param>
            <param name="lastRow">Last valid row index within the block; rows beyond this index stay uninitialized</param>
            <param name="lastCol">Last valid column index within the block; columns beyond this index stay uninitialized</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.ComputeIntermediateBlock(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes weights for all blocks of the grid except the lower-right corner one.
            Assumes the grid cache to the left and top of the block has already been filled.
            Weights on the bottom and right edge of the block are written back to the grid.
            </summary>
            <param name="blockRow">First index of the block within the grid</param>
            <param name="blockCol">Second index of the block within the grid</param>
            <param name="lastRow">Last valid row index within the block; rows beyond this index stay uninitialized</param>
            <param name="lastCol">Last valid column index within the block; columns beyond this index stay uninitialized</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.ComputeCornerBlock(System.Int32,System.Int32,System.Int32,System.Int32,System.SByte[][])">
            <summary>
            Computes the lower-right corner block of the grid.
            Combines the forward and traceback passes for performance.
            This is the only block computation that takes place for smaller-than-block alignments
            </summary>
            <param name="blockRow">First index of the block within the grid</param>
            <param name="blockCol">Second index of the block within the grid</param>
            <param name="lastRow">Last valid row index within the block; rows beyond this index stay uninitialized</param>
            <param name="lastCol">Last valid column index within the block; columns beyond this index stay uninitialized</param>
            <param name="trace">Array of traceback pointers</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.ComputeTraceBlock(System.Int32,System.Int32,System.Int32,System.Int32,System.SByte[][])">
            <summary>
            Computes the traceback pointers for the block.
            Assumes the grid cache has been already filled during the forward pass
            </summary>
            <param name="blockRow">First index of the block within the grid</param>
            <param name="blockCol">Second index of the block within the grid</param>
            <param name="lastRow">Last valid row index within the block; rows beyond this index stay uninitialized</param>
            <param name="lastCol">Last valid column index within the block; columns beyond this index stay uninitialized</param>
            <param name="trace">Array of traceback pointers</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.ComputeBlock(Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.WeightFunction,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Forward pass for the block.
            Assumes the blocks to the top and right have already been processed.
            </summary>
            <param name="weightFunction"></param>
            <param name="blockRow">First index of the block within the grid</param>
            <param name="blockCol">Second index of the block within the grid</param>
            <param name="lastRow">Last valid row index within the block; rows beyond this index stay uninitialized</param>
            <param name="lastCol">Last valid column index within the block; columns beyond this index stay uninitialized</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.Align">
            <summary>
            Launches the alignment algorithm
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.InitializeCacheSimple">
            <summary>
            Initializes grid cache for the simple alignment.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.InitializeCacheSimpleZero">
            <summary>
            Initializes grid cache for the simple alignment.
            Sets the boundary weights to zero.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.InitializeCacheAffine">
            <summary>
            Initializes grid cache for the affine alignment.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.InitializeCacheAffineZero">
            <summary>
            Initializes grid cache for the affine alignment.
            Sets the boundary weights to zero.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.ComputeBlockSimple(Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.WeightFunction,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implementation of the linear programming model for the block using the simple gap cost model
            </summary>
            <param name="weightFunction">Algorith-specific weight function</param>
            <param name="blockRow">First index of the block within the grid</param>
            <param name="blockCol">Second index of the block within the grid</param>
            <param name="lastRow">Last valid row index within the block; rows beyond this index stay uninitialized</param>
            <param name="lastCol">Last valid column index within the block; columns beyond this index stay uninitialized</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.ComputeBlockAffine(Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.WeightFunction,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implementation of the linear programming model for the block using the affine gap cost model
            </summary>
            <param name="weightFunction">Algorith-specific weight function</param>
            <param name="blockRow">First index of the block within the grid</param>
            <param name="blockCol">Second index of the block within the grid</param>
            <param name="lastRow">Last valid row index within the block; rows beyond this index stay uninitialized</param>
            <param name="lastCol">Last valid column index within the block; columns beyond this index stay uninitialized</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.PopulateFold(System.Int32[][],System.Int32[][],System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills the fold data structure for the block from the grid cache
            </summary>
            <param name="cachedRows">Cache for the grid rows</param>
            <param name="cachedCols">Cache for the grid columns</param>
            <param name="fold">Fold data structure</param>
            <param name="blockRow">First index of the block within the grid</param>
            <param name="blockCol">Second index of the block within the grid</param>
            <param name="lastRow">Last valid row index within the block; rows beyond this index stay uninitialized</param>
            <param name="lastCol">Last valid column index within the block; columns beyond this index stay uninitialized</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.WritebackFold(System.Int32[][],System.Int32[][],System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the fold data structure for the block back to the grid cache
            </summary>
            <param name="cachedRows">Cache for the grid rows</param>
            <param name="cachedCols">Cache for the grid columns</param>
            <param name="fold">Fold data structure</param>
            <param name="blockRow">First index of the block within the grid</param>
            <param name="blockCol">Second index of the block within the grid</param>
            <param name="lastRow">Last valid row index within the block; rows beyond this index stay uninitialized</param>
            <param name="lastCol">Last valid column index within the block; columns beyond this index stay uninitialized</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.WeightFunction">
            <summary>
            Algorith-specific weight function
            </summary>
            <param name="i">First index within the block</param>
            <param name="j">Second index within the block</param>
            <param name="Iij">Cost of Insertion</param>
            <param name="Dij">Cost of Deletion</param>
            <param name="Cij">Cost of Match</param>
            <returns></returns>
        </member>
        <member name="T:Bio.Algorithms.Alignment.IAlignmentAttributes">
            <summary>
            Aligners will implements this interface to list the attributes supported
            or required.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IAlignmentAttributes.Attributes">
            <summary>
            Gets list of attributes.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.IPairwiseSequenceAlignment">
            <summary>
            An IPairwiseSequenceAlignment is the result of running a Pairwise alignment algorithm on a set 
            of two sequences.
            </summary>
            <remarks>
            this is just a storage object – it’s up to an algorithm object to fill it in.
            for efficiency’s sake, we are leaving it up to calling code to keep track of the 
            input sequences, if desired.
            </remarks>
        </member>
        <member name="T:Bio.Algorithms.Alignment.ISequenceAlignment">
            <summary>
            An ISequenceAlignment is the result of running an alignment algorithm on a set 
            of two or more sequences. This could be a pairwise alignment, an MSA (multiple 
            sequence alignment), or an overlap alignment of the sort needed for sequence
            assembly.
            </summary>
            <remarks>
            this is just a storage object – it’s up to an algorithm object to fill it in.
            for efficiency’s sake, we are leaving it up to calling code to keep track of the 
            input sequences, if desired.
            </remarks>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAlignment.AlignedSequences">
            <summary>
            Gets list of the IAlignedSequences which contains aligned sequences with score, offset and consensus .
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAlignment.Sequences">
            <summary>
            Gets list of sequences.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAlignment.Metadata">
            <summary>
            Gets any additional information about the Alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ISequenceAlignment.Documentation">
            <summary>
            Gets or sets Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.IPairwiseSequenceAlignment.AddSequence(Bio.Algorithms.Alignment.PairwiseAlignedSequence)">
            <summary>
            Add a new Aligned Sequence Object to the end of the list.
            </summary>
            <param name="pairwiseAlignedSequence">The PairwiseAlignedSequence to add.</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IPairwiseSequenceAlignment.PairwiseAlignedSequences">
            <summary>
            Gets list of the (output) aligned sequences with score, offset and consensus. 
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IPairwiseSequenceAlignment.FirstSequence">
            <summary>
            Gets accessor for the first sequence.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IPairwiseSequenceAlignment.SecondSequence">
            <summary>
            Gets accessor for the second sequence.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.IMultipleSequenceAligner">
            <summary>
            Multiple sequences alignment interface.
            Multiple sequence alignment (MSA) is used to align three or  
            more sequences in preparation for further analysis.  
            More info on MSA can be found at 
            http://en.wikipedia.org/wiki/Multiple_sequence_alignment)
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IMultipleSequenceAligner.AlignedSequences">
            <summary>
            Gets aligned sequences with equal length by inserting gaps '-' at
            appropriate positions so that the alignment score is optimized.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IMultipleSequenceAligner.AlignmentScore">
            <summary>
            Gets the alignment score of the multiple sequence alignment.
            A typical score is the summation of pairwise alignment scores.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultiSequenceAlignment">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultiSequenceAlignment.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultiSequenceAlignment.#ctor(System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            
            </summary>
            <param name="sequences"></param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultiSequenceAlignment.PairWiseScoreFunction(Bio.ISequence,Bio.ISequence,Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Calculate pairwise score of a pair of aligned sequences.
            The score is the sum over all position score given by the similarity matrix.
            The positions with only indels, e.g. gaps, are discarded. Gaps in the remaining 
            columns are assessed affined score: g + w * e, where g is open penalty, and e
            is extension penalty.
            </summary>
            <param name="sequenceA">aligned sequence</param>
            <param name="sequenceB">aligned sequence</param>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="gapOpenPenalty">negative open gap penalty</param>
            <param name="gapExtensionPenalty">negative extension gap penalty</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultiSequenceAlignment.MultipleAlignmentScoreFunction(System.Collections.Generic.List{Bio.ISequence},Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Calculate alignment score of a set of aligned sequences.
            The score is the average over all pairs of sequences of their pairwise alignment score.
            </summary>
            <param name="sequences">a set of aligned sequences</param>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="gapOpenPenalty">negative open gap penalty</param>
            <param name="gapExtensionPenalty">negative extension gap penalty</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultiSequenceAlignment.Sequences">
            <summary>
            
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultiSequenceAlignment.MsaScore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultiSequenceAlignment.NumberOfSequences">
            <summary>
            
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultiSequenceAlignment.NumberOfColumns">
            <summary>
            
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.NeedlemanWunschAligner">
            <summary>
            Implements the NeedlemanWunsch algorithm for global alignment.
            See Chapter 2 in Biological Sequence Analysis; Durbin, Eddy, Krogh and Mitchison; 
            Cambridge Press; 1998.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.PairwiseSequenceAligner">
            <summary>
            Base class for our pair-wise sequence aligners. This implements the core shared 
            portions of the Smith-Waterman and Needleman-Wunsch aligners.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAligner.Traceback">
            <summary>
            Traceback table built during the matrix creation step
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAligner.ScoreTable">
            <summary>
            Generated score table - this is filled in with the scoring matrix when debugging
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAligner.Rows">
            <summary>
            Rows in ScoreTable
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAligner.Cols">
            <summary>
            Columns in ScoreTable
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAligner.usingAffineGapModel">
            <summary>
            A variable to keep track of whether the traceback table was constructed with an affine gap model.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAligner.h_Gap_Length">
            <summary>
            This array keeps track of the length of gaps up to a point along the horizontal axis.
            Only used with the affine gap model
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAligner.v_Gap_Length">
            <summary>
            This array keeps track of the length of gaps up to a point along the vertical axis.
            nly used with the affine gap model.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAligner.ReferenceSequence">
            <summary>
            The reference sequence being aligned (sequence #1)
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAligner.QuerySequence">
            <summary>
            The query sequence being aligned (sequence #2)
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAligner._gap">
            <summary>
            The gap character being used for the shared alphabet between the reference and query sequence.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAligner._sequence1">
            <summary>
            Original sequence
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAligner._sequence2">
            <summary>
            Original sequence #2
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.Align(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Align aligns the set of input sequences using the affine gap model (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>List of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.Bio#Algorithms#Alignment#ISequenceAligner#Align(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Align aligns the set of input sequences using the affine gap model (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>List of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.AlignSimple(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            AlignSimple aligns the set of input sequences using the linear gap model (one gap penalty), 
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>List of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.Bio#Algorithms#Alignment#ISequenceAligner#AlignSimple(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            AlignSimple aligns the set of input sequences using the linear gap model (one gap penalty), 
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>List of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.Align(Bio.ISequence,Bio.ISequence)">
            <summary>
            Align aligns the set of input sequences using the affine gap model (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="sequence1">First sequence</param>
            <param name="sequence2">Second sequence</param>
            <returns>List of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.AlignSimple(Bio.ISequence,Bio.ISequence)">
            <summary>
            AlignSimple aligns the set of input sequences using the linear gap model (one gap penalty), 
            and returns the best alignment found.
            </summary>
            <param name="sequence1">First sequence</param>
            <param name="sequence2">Second sequence</param>
            <returns>List of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.AlignSimple(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,Bio.ISequence,Bio.ISequence)">
            <summary>
            Pairwise alignment of two sequences using a linear gap penalty.  The various algorithms in derived classes (NeedlemanWunsch, 
            SmithWaterman, and PairwiseOverlap) all use this general engine for alignment with a linear gap penalty.
            </summary>
            <param name="localSimilarityMatrix">Scoring matrix.</param>
            <param name="gapPenalty">Gap penalty (by convention, use a negative number for this.).</param>
            <param name="inputA">First input sequence.</param>
            <param name="inputB">Second input sequence.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.Align(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32,Bio.ISequence,Bio.ISequence)">
            <summary>
            Pairwise alignment of two sequences using an affine gap penalty.  The various algorithms in derived classes (NeedlemanWunsch, 
            SmithWaterman, and PairwiseOverlap) all use this general engine for alignment with an affine gap penalty.
            </summary>
            <param name="localSimilarityMatrix">Scoring matrix.</param>
            <param name="gapOpenPenalty">Gap open penalty (by convention, use a negative number for this.).</param>
            <param name="gapExtensionPenalty">Gap extension penalty (by convention, use a negative number for this.).</param>
            <param name="inputA">First input sequence.</param>
            <param name="inputB">Second input sequence.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.DoAlign(Bio.ISequence,Bio.ISequence,System.Boolean)">
            <summary>
            Method which performs the alignment work.
            </summary>
            <param name="sequence1">First sequence</param>
            <param name="sequence2">Second sequence</param>
            <param name="useAffineGapModel">True to use affine gap model (separate open vs. extension cost)</param>
            <returns></returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.GetByteArrayFromSequence(Bio.ISequence)">
            <summary>
            Retrieve or copy the sequence array
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.Process">
            <summary>
            This method performs the pairwise alignment between two sequences (reference and query).
            It does this using the standard Dynamic Programming model:
            1. Initialization of the scoring matrix (Rs.Length x Qs.Length)
            2. Filling of the scoring matrix and traceback table
            3. Traceback (alignment)
            </summary>
            <returns>Aligned sequences</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.Initialize">
            <summary>
            This is step (1) in the dynamic programming model - to initialize the default values
            for the scoring matrix and traceback tables.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.CreateTracebackTable">
            <summary>
            This is step (2) in the dynamic programming model - to fill in the scoring matrix
            and calculate the traceback entries.  This is algorithm specific and so is left
            as an abstract method.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.CreateAlignment(System.Collections.Generic.IEnumerable{Bio.Algorithms.Alignment.PairwiseSequenceAligner.OptScoreMatrixCell})">
            <summary>
            This is step (3) in the dynamic programming model - to walk the traceback/scoring
            matrix and generate the alignment.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.CreateAlignmentFromCell(Bio.Algorithms.Alignment.PairwiseSequenceAligner.OptScoreMatrixCell)">
            <summary>
            This takes a specific starting location in the scoring matrix and generates
            an alignment from it using the traceback scores.
            </summary>
            <param name="startingCell">Starting point</param>
            <returns>Pairwise alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.TracebackIsComplete(System.Int32,System.Int32)">
            <summary>
            This method is used to determine when the traceback step is complete.
            It is algorithm specific.
            </summary>
            <param name="row">Current row</param>
            <param name="col">Current column</param>
            <returns>True if we are finished with the traceback step, false if not.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAligner.GetScoreTable">
            <summary>
            This method generates a textual representation of the scoring/traceback matrix
            for diagnostic purposes.
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAligner.Name">
            <summary>
            Gets the name of the current Alignment algorithm used.
            This is a overridden property from the abstract parent.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAligner.Description">
            <summary>
            Gets the Description of the current Alignment algorithm used.
            This is a overridden property from the abstract parent.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAligner.IncludeScoreTable">
            <summary>
            True to include the score table and matrix as part of the output.
            This is placed into the Metadata for the alignment. It is turned off by
            default due to the expense of generating it.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAligner.SimilarityMatrix">
            <summary>
            Gets or sets value of similarity matrix
            The similarity matrix determines the score for any possible pair
            of symbols that are encountered at a common location across the 
            sequences being aligned.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAligner.GapOpenCost">
            <summary>
            Gets or sets value of GapOpenCost
            The GapOpenCost is the cost of inserting a gap character into 
            a sequence.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAligner.GapExtensionCost">
            <summary>
            Gets or sets value of GapExtensionCost 
            The GapExtensionCost is the cost of extending an already existing gap.
            This is only used in the affine gap model
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAligner.ConsensusResolver">
            <summary>
            Gets or sets the object that will be used to compute the alignment's consensus.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.PairwiseSequenceAligner.OptScoreMatrixCell">
            <summary>
            Optimum score maxtrix cell
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAligner.OptScoreMatrixCell.Row">
            <summary>
            Position (y) of this cell
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAligner.OptScoreMatrixCell.Col">
            <summary>
            Position (x) of this cell
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAligner.OptScoreMatrixCell.Score">
            <summary>
            Score at this position
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NeedlemanWunschAligner.CreateTracebackTable">
            <summary>
            This is step (2) in the dynamic programming model - to fill in the scoring matrix
            and calculate the traceback entries. 
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NeedlemanWunschAligner.CreateAffineTracebackTable">
            <summary>
            This is step (2) in the dynamic programming model - to fill in the scoring matrix
            and calculate the traceback entries.  This version is used when the open/extension
            gap costs are different (affine gap model).
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NeedlemanWunschAligner.Name">
            <summary>
            Gets the name of the current Alignment algorithm used.
            This is a overridden property from the abstract parent.
            This property returns the Name of our algorithm i.e 
            Needleman-Wunsch algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NeedlemanWunschAligner.Description">
            <summary>
            Gets the description of the NeedlemanWunsch algorithm used.
            This is a overridden property from the abstract parent.
            This property returns a simple description of what 
            NeedlemanWunschAligner class implements.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.NucmerPairwiseAligner">
            <summary>
            Class which uses nucmer to perform an alignment.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NucmerPairwiseAligner.DefaultLengthOfMUM">
            <summary>
            Default minimum length of Matches to be searched in streaming process
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NucmerPairwiseAligner.DefaultGapOpenCost">
            <summary>
            Default gap open penalty for use in alignment algorithms
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NucmerPairwiseAligner.DefaultGapExtensionCost">
            <summary>
            Default gap extension penalty for use in alignment algorithms
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NucmerPairwiseAligner.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NucmerPairwiseAligner.AlignSimple(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            AlignSimple aligns the set of input sequences using the linear gap model (one gap penalty), 
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>List of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NucmerPairwiseAligner.Align(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Align aligns the set of input sequences using the affine gap model (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NucmerPairwiseAligner.Align(System.Collections.Generic.IEnumerable{Bio.ISequence},System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Align aligns the set of input sequences using the affine gap model (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="referenceList">Reference sequences.</param>
            <param name="queryList">Query sequences.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NucmerPairwiseAligner.Align(Bio.ISequence,System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Align aligns the set of input sequences using the affine gap model (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="reference">Reference sequence.</param>
            <param name="querySequences">Query sequences.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NucmerPairwiseAligner.ConcatSequence(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Concat all the sequences into one sequence with special character.
            </summary>
            <param name="sequences">List of reference sequence.</param>
            <returns>Concatenated sequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NucmerPairwiseAligner.MakeConsensus(Bio.ISequence,Bio.ISequence)">
            <summary>
            Analyze the given sequences and store a consensus into its Consensus property.
            </summary>
            <param name="referenceSequence">Reference sequence.</param>
            <param name="querySequence">Query sequence.</param>
            <returns>Consensus of sequences.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NucmerPairwiseAligner.CalculateScore(Bio.ISequence,Bio.ISequence)">
            <summary>
            Calculate the score of alignment.
            </summary>
            <param name="referenceSequence">Reference sequence.</param>
            <param name="querySequence">Query sequence.</param>
            <returns>Score of the alignment.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NucmerPairwiseAligner.FindExtensionLength(Bio.ISequence,System.Int32)">
            <summary>
            Find the index of extension.
            </summary>
            <param name="sequence">Sequence object.</param>
            <param name="index">Position at which extension starts.</param>
            <returns>Last index of extension.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NucmerPairwiseAligner.Alignment(System.Collections.Generic.IEnumerable{Bio.ISequence},System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            This method is considered as main execute method which defines the
            step by step algorithm. Derived class flows the defined flow by this
            method.
            </summary>
            <param name="referenceSequenceList">Reference sequence.</param>
            <param name="originalQuerySequences">List of input sequences.</param>
            <returns>A list of sequence alignment.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NucmerPairwiseAligner.ReverseComplementSequenceList(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Given a list of sequences, create a new list with only the Reverse Complements
            of the original sequences.
            </summary>
            <param name="sequenceList">List of sequence.</param>
            <returns>Returns the list of sequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NucmerPairwiseAligner.AddReverseComplementsToSequenceList(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Given a list of sequences, create a new list with the original sequence followed
            by the Reverse Complement of that sequence.
            </summary>
            <param name="sequenceList">List of sequence.</param>
            <returns>Returns the List of sequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NucmerPairwiseAligner.ConvertDeltaToAlignment(System.Collections.Generic.IEnumerable{Bio.Algorithms.Alignment.DeltaAlignment})">
            <summary>
            Convert to delta alignments to sequence alignments.
            </summary>
            <param name="alignments">List of delta alignments.</param>
            <returns>List of Sequence alignment.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NucmerPairwiseAligner.GetReferenceSequence(System.Collections.Generic.IEnumerable{Bio.ISequence},System.Int64)">
            <summary>
            Gets the sequence at specified index.
            </summary>
            <param name="sequences">IEnumerable of Sequences.</param>
            <param name="referenceIndex">Reference sequence index.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NucmerPairwiseAligner.GetQuerySequences(System.Collections.Generic.IEnumerable{Bio.ISequence},System.Int64)">
            <summary>
            Gets the sequences except the sequence at specified index.
            </summary>
            <param name="sequences">IEnumerable of Sequences.</param>
            <param name="referenceIndex">Reference sequence index.</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NucmerPairwiseAligner.Name">
            <summary>
            Gets or Sets the name of the algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NucmerPairwiseAligner.Description">
            <summary>
            Gets or Sets the description of the algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NucmerPairwiseAligner.ForwardOnly">
            <summary>
            Align only the forward strands of each sequence.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NucmerPairwiseAligner.ReverseOnly">
            <summary>
            Align only the reverse strands of each sequence.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NucmerPairwiseAligner.MaxMatch">
            <summary>
            Use all anchor matches regardless of their uniqueness.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NucmerPairwiseAligner.FixedSeparation">
            <summary>
            Gets or sets maximum fixed diagonal difference.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NucmerPairwiseAligner.BreakLength">
            <summary>
            Gets or sets number of bases to be extended before stopping alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NucmerPairwiseAligner.MinimumScore">
            <summary>
            Gets or sets minimum output score.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NucmerPairwiseAligner.SeparationFactor">
            <summary>
            Gets or sets separation factor. Fraction equal to 
            (diagonal difference / match separation) where higher values
            increase the insertion or deletion (indel) tolerance.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NucmerPairwiseAligner.LengthOfMUM">
            <summary>
            Gets or sets minimum length of Match that can be considered as MUM.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NucmerPairwiseAligner.MaximumSeparation">
            <summary>
            Gets or sets maximum separation between the adjacent matches in clusters.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NucmerPairwiseAligner.ConsensusResolver">
            <summary>
            Gets or sets the consensus resolver attached with this aligner.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NucmerPairwiseAligner.SimilarityMatrix">
            <summary>
            Gets or sets the similarity matrix associated with this aligner.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NucmerPairwiseAligner.GapOpenCost">
            <summary>
            Gets or sets the Gap Open Cost.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NucmerPairwiseAligner.GapExtensionCost">
            <summary>
            Gets or sets the Gap Extension Cost.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NucmerPairwiseAligner.IsAlign">
            <summary>
            Gets or sets a value indicating whether to run Align or AlignSimple.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.Cluster">
            <summary>
            An ordered list of matches between two a pair of sequences
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.Cluster.ReverseDirection">
            <summary>
            Represents reverse query sequence direction
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.Cluster.ForwardDirection">
            <summary>
            Represents forward query sequence direction
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.Cluster.internalMatches">
            <summary>
            List of maximum unique matches inside the cluster
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.Cluster.queryDirection">
            <summary>
            The query direction
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.Cluster.#ctor(System.Collections.Generic.IList{Bio.Algorithms.SuffixTree.MatchExtension})">
            <summary>
            Initializes a new instance of the Cluster class
            </summary>
            <param name="matches">List of matches</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.Cluster.#ctor(System.Collections.Generic.IList{Bio.Algorithms.SuffixTree.MatchExtension},System.Boolean)">
            <summary>
            Initialize a reverse direction instance of the Cluster class
            </summary>
            <param name="matches">List of matches</param>
            <param name="isReverse">True/False reverse query direction</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.Cluster.ToString">
            <summary>
            Converts RefStart, QueryStart, Length, Score, WrapScore, IsGood for each cluster to string.
            </summary>
            <returns>RefStart, QueryStart, Length, Score, WrapScore, IsGood for each cluster.</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Cluster.Matches">
            <summary>
            Gets list of maximum unique matches inside the cluster
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Cluster.QueryDirection">
            <summary>
            Gets or sets the query sequence direction
                FORWARD or REVERSE
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Cluster.IsReverseQueryDirection">
            <summary>
            Returns TRUE if this is a REVERSE query sequence direction
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Cluster.IsFused">
            <summary>
            Gets or sets a value indicating whether the cluster is already fused
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.ClusterBuilder">
            <summary>
            Clustering is a process in which individual matches are grouped in larger
            set called Cluster. The matches in cluster are decided based on paramters 
            like fixed difference allowed, maximum difference allowed, minimum score
            and separation factor that should be satisfied.
            This class implements IClusterBuilder interface.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.IClusterBuilder">
            <summary>
            Contract defined to implement class that creates clusters.
            Takes list of maximum unique matches as input and creates clusters
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.IClusterBuilder.BuildClusters(System.Collections.Generic.List{Bio.Algorithms.SuffixTree.MatchExtension})">
            <summary>
            Build the list of clusters for given MUMs
            </summary>
            <param name="matchExtensions">List of MUMs</param>
            <returns>List of Cluster</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.IClusterBuilder.BuildClusters(System.Collections.Generic.List{Bio.Algorithms.SuffixTree.MatchExtension},System.Boolean)">
            <summary>
            Build the list of clusters for given MUMs
            </summary>
            <param name="matchExtensions">List of MUMs</param>
            <param name="sortedByQuerySequenceIndex">Flag to indicate whether the match 
            extensions are already started by query sequence index or not.</param>
            <returns>List of Cluster</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IClusterBuilder.FixedSeparation">
            <summary>
            Gets or sets maximum fixed diagonal difference
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IClusterBuilder.MaximumSeparation">
            <summary>
            Gets or sets maximum separation between the adjacent matches in clusters
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IClusterBuilder.MinimumScore">
            <summary>
            Gets or sets minimum output score
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IClusterBuilder.SeparationFactor">
            <summary>
            Gets or sets separation factor. Fraction equal to 
            (diagonal difference / match separation) where higher values
            increase the insertion or deletion (indel) tolerance
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.IClusterBuilder.ScoreMethod">
            <summary>
            Gets or sets the method to use while calculating score of a cluster.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ClusterBuilder.DefaultFixedSeparation">
            <summary>
            Default fixed Separation
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ClusterBuilder.DefaultMaximumSeparation">
            <summary>
            Default Maximum Separation
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ClusterBuilder.DefaultMinimumScore">
            <summary>
            Default Minimum Output Score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ClusterBuilder.DefaultSeparationFactor">
            <summary>
            Default separation factor
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ClusterBuilder.SecondSequenceStart">
            <summary>
            Property referring to Second sequence start in MUM
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ClusterBuilder.ClusterID">
            <summary>
            Property referring to ID of Cluster
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ClusterBuilder.unionFind">
            <summary>
            This is a list of number which are used to generate the ID of cluster
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ClusterBuilder class
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.BuildClusters(System.Collections.Generic.List{Bio.Algorithms.SuffixTree.MatchExtension})">
            <summary>
            Get the Cluster from given inputs of matches.
            Steps are as follows:
                1. Sort MUMs based on query sequence start.
                2. Removing overlapping MUMs (in both sequences) and MUMs with same 
                    diagonal offset (usually adjacent)
                3. Check for  separation between two MUMs
                4. Check the diagonal separation
                5. If MUMs passes above conditions merge them in one cluster.
                6. Sort MUMs using cluster id
                7. Process clusters (Joining clusters)</summary>
            <param name="matchExtensions">List of maximum unique matches</param>
            <returns>List of Cluster</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.BuildClusters(System.Collections.Generic.List{Bio.Algorithms.SuffixTree.MatchExtension},System.Boolean)">
            <summary>
            Get the Cluster from given inputs of matches.
            Steps are as follows:
                1. Sort MUMs based on query sequence start (if sortedByQuerySequenceIndex is false)
                2. Removing overlapping MUMs (in both sequences) and MUMs with same 
                    diagonal offset (usually adjacent)
                3. Check for  separation between two MUMs
                4. Check the diagonal separation
                5. If MUMs passes above conditions merge them in one cluster.
                6. Sort MUMs using cluster id
                7. Process clusters (Joining clusters)</summary>
            <param name="matchExtensions">List of maximum unique matches</param>
            <param name="sortedByQuerySequenceIndex">Flag to indicate whether the match 
            extensions are already started by query sequence index or not.</param>
            <returns>List of Cluster</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.FilterMatches(System.Collections.Generic.List{Bio.Algorithms.SuffixTree.MatchExtension})">
            <summary>
            Removes the duplicate and overlapping maximal unique matches.
            </summary>
            <param name="matches">List of matches</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.Sort(System.Collections.Generic.IEnumerable{Bio.Algorithms.SuffixTree.MatchExtension},System.String)">
            <summary>
            Sort by Cluster by specified column
            </summary>
            <param name="matches">List of matches</param>
            <param name="sortBy">Column to be sorted by</param>
            <returns>Sorted list of cluster</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.GetClusters(System.Collections.Generic.List{Bio.Algorithms.SuffixTree.MatchExtension},System.Boolean)">
            <summary>
            Process the matches and create clusters
            </summary>
            <param name="matches">List of matches</param>
            <param name="sortedByQuerySequenceIndex">Flag to indicate whether the match 
            extensions are already started by query sequence index or not.</param>
            <returns>List of clusters</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.Find(System.Int32)">
            <summary>
            Return the id of the set containing "a" in Union-Find.
            </summary>
            <param name="matchIndex">Index of the maximal unique match in UnionFind</param>
            <returns>Cluster id</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.Union(System.Int32,System.Int32)">
            <summary>
            Group the matches in Union
            </summary>
            <param name="firstMatchIndex">Id of first cluster</param>
            <param name="secondMatchIndex">Id of second cluster</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ClusterBuilder.ProcessCluster(System.Collections.Generic.List{Bio.Algorithms.Alignment.Cluster},System.Collections.Generic.List{Bio.Algorithms.SuffixTree.MatchExtension},System.Int32,System.Int32)">
            <summary>
            Process the clusters
            </summary>
            <param name="clusters">List of clusters</param>
            <param name="matches">List of matches</param>
            <param name="indexToSkip">Start index upto which match extension to be ignored.</param>
            <param name="clusterSize">Size of cluster</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ClusterBuilder.FixedSeparation">
            <summary>
            Gets or sets maximum fixed diagonal difference
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ClusterBuilder.MaximumSeparation">
            <summary>
            Gets or sets maximum separation between the adjacent matches in clusters
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ClusterBuilder.MinimumScore">
            <summary>
            Gets or sets minimum output score
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ClusterBuilder.SeparationFactor">
            <summary>
            Gets or sets separation factor. Fraction equal to 
            (diagonal difference / match separation) where higher values
            increase the insertion or deletion (indel) tolerance
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ClusterBuilder.ScoreMethod">
            <summary>
            Gets or sets the method to use while calculating score of a cluster.
            Default is MatchLength.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.ClusterScoreMethod">
            <summary>
            Enum to indicate method to use while calculating score of a cluster.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ClusterScoreMethod.MatchLength">
            <summary>
            Use sum of length of matches in a cluster.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ClusterScoreMethod.ReferenceOffset">
            <summary>
            Use Maximum(ReferenceStart + Length) - Min(RefereceStart) from matches in a cluster.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.DeltaAlignment">
            <summary>
            Represents a alignment object in terms of delta.
            Delta is an encoded representation of alignments between input sequences.
            It contains the start and end indices of alignment in reference and
            query sequence followed by error values and list of integer in 
            following lines. Each integer represent an insertion (+ve) in reference
            sequence and deletion (-ve) in reference sequence.
            This class represents such alignment with required properties and
            utility methods.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DeltaAlignment.internalDeltas">
            <summary>
            List of integers that pointing the insertion and deletion indices
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.DeltaAlignment.queryDirection">
            <summary>
            The query direction
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DeltaAlignment.#ctor(Bio.ISequence,Bio.ISequence)">
            <summary>
             Initializes a new instance of the DeltaAlignment class
             </summary>
             <param name="referenceSequence">Reference Sequence</param>
             <param name="querySequence">Query Sequence</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DeltaAlignment.NewAlignment(Bio.ISequence,Bio.ISequence,Bio.Algorithms.Alignment.Cluster,Bio.Algorithms.SuffixTree.MatchExtension)">
            <summary>
            Create a new delta alignment
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <param name="cluster">Cluster object</param>
            <param name="match">Match object</param>
            <returns>Newly created DeltaAlignment object</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DeltaAlignment.ConvertDeltaToSequences">
            <summary>
            Convert the delta alignment object to its sequence representation
            </summary>
            <returns>Reference sequence alignment at 0th index and
            Query sequence alignment at 1st index</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.DeltaAlignment.ToString">
            <summary>
            Converts Ref ID, Query Id, Ref start, Ref End, Query start, Query End to string.
            </summary>
            <returns>Ref ID, Query Id, Ref start, Ref End, Query start, Query End.</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.Id">
            <summary>
            Id for this Delta alignment.
            Note: As file position is used as ID in case of comparative assembly steps, this value may vary from step to step.
                  For example: if 0 is the id for a delta alignment in 2nd step then the same delta alignment
                               can have 500 as id in 3rd step.
                  This change in id may happen due to the sorting of delta or ignoring some other delta alignments etc.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.QueryDirection">
            <summary>
            Gets or sets the query sequence direction FORWARD or REVERSE
            When this is reverse, the second offsets will be reversed in output
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.IsReverseQueryDirection">
            <summary>
            Returns TRUE if this is a REVERSE query sequence direction
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.FirstSequenceStart">
            <summary>
            Gets or sets the start index of first sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.FirstSequenceEnd">
            <summary>
            Gets or sets the end index of first sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.SecondSequenceStart">
            <summary>
            Gets or sets the start index of second sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.SecondSequenceEnd">
            <summary>
            Gets or sets the end index of second sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.Errors">
            <summary>
            Gets or sets errors
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.SimilarityErrors">
            <summary>
            Gets or sets similarity errors
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.NonAlphas">
            <summary>
            Gets or sets number of non alphabets encountered during alignment
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.DeltaReferencePosition">
            <summary>
            Gets or sets the value of delta reference position
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.Deltas">
            <summary>
            Gets list of integers that pointing the insertion and 
            deletion indices
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.ReferenceSequence">
            <summary>
            Gets reference sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.DeltaAlignment.QuerySequence">
            <summary>
            Gets query sequence id
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.ModifiedSmithWaterman">
            <summary>
            Implements algorithm to extend given pair of sequences in
            specified direction. This implementation is specific to NUCmer.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.DirectionFlag">
            <summary>
            Direction in which the method has to be implemented
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.AlignFlag">
            <summary>
            Perform alignment
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.OptimalFlag">
            <summary>
            Maximise the alignment score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.SeqendFlag">
            <summary>
            Align till end of shortest sequence
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.ForwardAlignFlag">
            <summary>
            Align forward till the score or target reached
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.BackwardAlignFlag">
            <summary>
            Align backward till the score or target reached
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.ForcedFlag">
            <summary>
            Force the alignment till the end irrespective of the score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.ForcedForwardAlignFlag">
            <summary>
            Ignore score and align to reach the target
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.MaximumAlignmentLength">
            <summary>
            Maximum number of bases till the alignment can be extended
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.DefaultBreakLength">
            <summary>
            Number of bases to be extended before stopping alignment
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.DefaultValidScore">
            <summary>
            Default valid score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.DefaultGapExtensionScore">
            <summary>
            Default substitution score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.DefaultGapOpeningScore">
            <summary>
            Default gap opening score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.StopCharacter">
            <summary>
            Use this character if non alphabet is encountered in sequence
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.DeleteState">
            <summary>
            Represents deletion at the given base
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.InsertState">
            <summary>
            Represents insertioin at the given base
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.MatchState">
            <summary>
            Represents a match at the given base
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.StartState">
            <summary>
            Represents a start at the given base
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.NoneState">
            <summary>
            unknown state at the given base
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ModifiedSmithWaterman.#ctor">
            <summary>
            Initializes a new instance of the ModifiedSmithWaterman class
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.ModifiedSmithWaterman.gapOpeningScore">
            <summary>
            Gets or sets gap opening score
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ModifiedSmithWaterman.ExtendSequence(Bio.ISequence,System.Int64,System.Int64@,Bio.ISequence,System.Int64,System.Int64@,System.Collections.Generic.IList{System.Int64},System.Int32)">
            <summary>
            Performs the function specified by the methodName on given pair of
            sequences, represented by the start and end indices.
            Find the diagonal in which the highest score is achieved
            1. Find the dimension of score matrix
            2. Calculate diagonals till maximum score is reached or the end 
                    (free the Nodes memory as when the values are no more required)
                a. Create and fill the Matrix
                b. Trim unrequired diagonal nodes (left)
                c. Trim unrequired diagonal nodes (right)
            3. Trace the path back to the highest scoring diagonal and generate the delta
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="referenceStart">Start index of the reference sequence</param>
            <param name="referenceEnd">End index of the reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <param name="queryStart">Start index of the query sequence</param>
            <param name="queryEnd">End index of the query sequence</param>
            <param name="deltas">List of deltas</param>
            <param name="methodName">Name of the method to be implemented</param>
            <returns>Is aligned</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ModifiedSmithWaterman.SetScore(Bio.Algorithms.Alignment.Score,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate the score of operation
            </summary>
            <param name="currentScore">Current Score</param>
            <param name="deleteScore">Score of delete</param>
            <param name="insertScore">Score of Insert</param>
            <param name="matchScore">Score of match</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ModifiedSmithWaterman.GetMaximumScore(Bio.Algorithms.Alignment.Score[])">
            <summary>
            Find the Maximum Score in given list
            </summary>
            <param name="scores">List of scores</param>
            <returns>Maximum score</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ModifiedSmithWaterman.GenerateDelta(System.Collections.Generic.List{Bio.Algorithms.Alignment.Diagonal},System.Int64,System.Int64,System.Int64,System.Collections.Generic.IList{System.Int64})">
            <summary>
            Generate the list of delta
            </summary>
            <param name="diagonals">List of diagonals</param>
            <param name="counter">diagonal index</param>
            <param name="currentDiagonal">Current diagonal index</param>
            <param name="length">Length of sequence</param>
            <param name="deltas">list of Deltas</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.ModifiedSmithWaterman.GetMatchScore(System.Int32,System.Int32,Bio.ISequence,System.Int64,Bio.ISequence,System.Int64,System.Int64,System.Int32)">
            <summary>
            Find the Score of the given match
            </summary>
            <param name="diagonalCounter">diagonal counter</param>
            <param name="diagonalIndex">diagonal index</param>
            <param name="referenceSequence">Reference sequence</param>
            <param name="referenceIndex">Index of symbol in reference</param>
            <param name="querySequence">Query sequence</param>
            <param name="queryIndex">Index of symbol in query</param>
            <param name="length">Length of diagonal</param>
            <param name="methodName">Name of the method to be implemented</param>
            <returns>match Score</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ModifiedSmithWaterman.ValidScore">
            <summary>
            Gets or sets valid score
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ModifiedSmithWaterman.GapExtensionScore">
            <summary>
            Gets or sets substitution score
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ModifiedSmithWaterman.SimilarityMatrix">
            <summary>
            Gets or sets diagonal score to be used to calculate scores.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.ModifiedSmithWaterman.BreakLength">
            <summary>
            Gets or sets number of bases to be extended before stopping alignment
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.Score">
            <summary>
            Structure to hold the Score value
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Score.Value">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Score.State">
            <summary>
            Gets or sets the state
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.Node">
            <summary>
            Structure to hold the Node value
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.Node.#ctor">
            <summary>
            Initializes a new instance of the Node class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Node.Scores">
            <summary>
            Gets or sets the List of Score of given node
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Node.MaximumScore">
            <summary>
            Gets or sets the maximum score of give node
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.Diagonal">
            <summary>
            Structure to hold the Diagonal value
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.Diagonal.#ctor">
            <summary>
            Initializes a new instance of the Diagonal class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Diagonal.Left">
            <summary>
            Gets or sets left index of diagonal
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Diagonal.Right">
            <summary>
            Gets or sets right index of diagonal
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Diagonal.Nodes">
            <summary>
            Gets or sets the list of nodes
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.NUCmer">
            <summary>
            NUCmer is a system for rapidly aligning entire genomes or very large DNA
            sequences. It allows alignment of multiple reference sequences to multiple query sequences.
            This is commonly used to identify the position and orientation of set of sequence
            contigs in relation to finished sequence.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer.DefaultLengthOfMUM">
            <summary>
            Default minimum length of Matches to be searched in streaming process
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer.DefaultGapOpenCost">
            <summary>
            Default gap open penalty for use in alignment algorithms
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer.DefaultGapExtensionCost">
            <summary>
            Default gap extension penalty for use in alignment algorithms
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer.ReferenceSequence">
            <summary>
            Represents reference sequences
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer.FirstSequenceStart">
            <summary>
            Property referring to Second sequence start in MUM
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer._nucmerAligner">
            <summary>
            Alignment engine
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer._internalReferenceSequence">
            <summary>
            Holds the reference sequence.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmer._internalMummer">
            <summary>
            Holds the suffix tree.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.#ctor(Bio.Algorithms.SuffixTree.ISuffixTree)">
            <summary>
            
            </summary>
            <param name="suffixTree"></param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.#ctor(Bio.ISequence)">
            <summary>
            Initializes a new instance of the NUCmer class.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.SetDefaults">
            <summary>
            User will typically choose their own parameters, these defaults are reasonable for many cases.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.GetClusters(Bio.ISequence,System.Boolean,System.Boolean)">
            <summary>
            Gets the clusters
            </summary>
            <param name="querySequence">Query sequence.</param>
            <param name="isUniqueInReference">flag to indicate that the matches should be unique in reference.</param>
            <param name="isReversed">True if the query sequence is a reverse-complement</param>
            <returns>Returns clusters.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.GetDeltaAlignments(Bio.ISequence,System.Boolean,System.Boolean)">
            <summary>
            Generates Delta Alignments.
            </summary>
            <param name="querySequence">Query Sequence</param>
            <param name="isUniqueInReference">Whether MUMs are unique in query or not.</param>
            <param name="isReversed">True if the query sequence is a reverse-complement</param>
            <returns>List of enumerable of delta alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.GetClusters(System.Collections.Generic.List{Bio.Algorithms.SuffixTree.MatchExtension},System.Boolean)">
            <summary>
            get the clusters
            </summary>
            <param name="matchExtensionList">List of Matches of a read.</param>
            <param name="sortedMatches">Flag to indicate that the matches are sorted or not.</param>
            <returns>List of clusters</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.ProcessCluster(System.Collections.Generic.IList{Bio.Algorithms.Alignment.Cluster})">
            <summary>
            Process the cluster
            1. Re-map the reference sequence index to original index
            2. Create synteny
            3. Process synteny
            </summary>
            <param name="clusters">List of clusters of a read.</param>
            <returns>List of delta alignments</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.GetMumList(Bio.ISequence,System.Boolean)">
            <summary>
            Returns the matches for a query sequence against our reference sequence.
            </summary>
            <param name="querySequence">Query sequence.</param>
            <param name="isUniqueInReference">flag to indicate that the matches should be unique in reference.</param>
            <returns>Matches</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.SortCluster(System.Collections.Generic.IEnumerable{Bio.Algorithms.Alignment.Cluster},System.String)">
            <summary>
            Sort the clusters by given field
            </summary>
            <param name="clusters">List of clusters to be sorted</param>
            <param name="sortBy">Field to be sorted by</param>
            <returns>List of sorted clusters</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.IsClusterShadowed(System.Collections.Generic.List{Bio.Algorithms.Alignment.DeltaAlignment},Bio.Algorithms.Alignment.Cluster,Bio.Algorithms.Alignment.DeltaAlignment)">
            <summary>
            Check if the cluster is shadowed (contained in alignment)
            </summary>
            <param name="alignments">List of alignment</param>
            <param name="currentCluster">current cluster</param>
            <param name="currentDeltaAlignment">Current delta alignment</param>
            <returns>Is cluster contained in alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.ProcessSynteny(System.Collections.Generic.List{Bio.Algorithms.Alignment.Synteny})">
            <summary>
            Extend each cluster in every synteny
            </summary>
            <param name="syntenies">List of synteny</param>
            <returns>List of delta alignments</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.ExtendClusters(Bio.Algorithms.Alignment.Synteny)">
            <summary>
            Extend the cluster in synteny
            </summary>
            <param name="synteny">Synteny in which cluster needs to be extened.</param>
            <returns>List of delta alignments</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.ExtendToPreviousSequence(Bio.ISequence,Bio.ISequence,System.Collections.Generic.IList{Bio.Algorithms.Alignment.DeltaAlignment},Bio.Algorithms.Alignment.DeltaAlignment,Bio.Algorithms.Alignment.DeltaAlignment)">
            <summary>
            Extend the cluster backward
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <param name="alignments">List of alignments</param>
            <param name="currentAlignment">current alignment object</param>
            <param name="targetAlignment">target alignment object</param>
            <returns>Was clusted extended backward</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.ExtendToNextSequence(Bio.ISequence,Bio.ISequence,Bio.Algorithms.Alignment.DeltaAlignment,System.Int64,System.Int64,System.Int32)">
            <summary>
            Extend the cluster forward
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <param name="currentAlignment">current alignment object</param>
            <param name="targetReference">target position in reference sequence</param>
            <param name="targetQuery">target position in query sequence</param>
            <param name="methodName">Name of the method to be implemented</param>
            <returns>Was cluster extended forward</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.GetPreviousAlignment(System.Collections.Generic.IEnumerable{Bio.Algorithms.Alignment.DeltaAlignment},Bio.Algorithms.Alignment.DeltaAlignment)">
            <summary>
            Find the previous eligible sequence for alignment/extension
            </summary>
            <param name="alignments">List of alignment</param>
            <param name="currentAlignment">Current alignment</param>
            <returns>Reverse alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.GetNextCluster(System.Collections.Generic.IList{Bio.Algorithms.Alignment.Cluster},Bio.Algorithms.Alignment.Cluster,System.Int64@,System.Int64@)">
            <summary>
            Find the next eligible sequence for alignment/extension
            </summary>
            <param name="clusters">List of clusters</param>
            <param name="currentCluster">Current cluster</param>
            <param name="targetReference">target position in reference sequence</param>
            <param name="targetQuery">target position in query sequence</param>
            <returns>Forward cluster in the list</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmer.ValidateSequenceList(Bio.ISequence,Bio.IAlphabet,System.String)">
            <summary>
            Validate the list of sequences
            </summary>
            <param name="sequence">List of sequence</param>
            <param name="alphabetSet">Alphabet set</param>
            <param name="sequenceType">Type of sequence</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.LengthOfMUM">
            <summary>
            Gets or sets minimum length of Match that can be considered as MUM.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.SimilarityMatrix">
            <summary>
            Gets or sets similarity matrix for use in alignment algorithms.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.GapOpenCost">
            <summary> 
            Gets or sets gap open penalty for use in alignment algorithms. 
            For alignments using a linear gap penalty, this is the gap penalty.
            For alignments using an affine gap, this is the penalty to open a new gap.
            This is a negative number, for example GapOpenCost = -8, not +8.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.GapExtensionCost">
            <summary> 
            Gets or sets gap extension penalty for use in alignment algorithms. 
            Not used for alignments using a linear gap penalty.
            For alignments using an affine gap, this is the penalty to
            extend an existing gap.
            This is a negative number, for example GapExtensionCost = -2, not +2.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.ConsensusResolver">
            <summary>
            Gets or sets the object that will be used to compute the alignment's consensus.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.BreakLength">
            <summary>
            Gets or sets number of bases to be extended before stopping alignment
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.FixedSeparation">
            <summary>
            Gets or sets maximum fixed diagonal difference
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.MaximumSeparation">
            <summary>
            Gets or sets maximum separation between the adjacent matches in clusters
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.MinimumScore">
            <summary>
            Gets or sets minimum output score
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.SeparationFactor">
            <summary>
            Gets or sets separation factor. Fraction equal to 
            (diagonal difference / match separation) where higher values
            increase the insertion or deletion (indel) tolerance
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.NUCmer.ScoreMethod">
            <summary>
            Gets or sets the method to use while calculating score of a cluster.
            Default is MatchLength.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.NUCmerAttributes">
            <summary>
            This class extends MUMmerAttributes and adds NUCmer specific attributes
            required to run the NUCmer algorithm.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.MUMmer.MUMmerAttributes">
            <summary>
            This class extends PairwiseAlignmentAttributes and adds MUMmer specific attributes
            required to run the MUMmer algorithm.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.PairwiseAlignmentAttributes">
            <summary>
            This class implements IAlignmentAttributes interface and defines all the 
            parameters required to run any pairwise algorithm.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseAlignmentAttributes.SimilarityMatrix">
            <summary>
            Describes matrix that determines the score for any possible pair
            of symbols
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseAlignmentAttributes.GapOpenCost">
            <summary>
            Describes cost of inserting a gap character into a sequence.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseAlignmentAttributes.GapExtensionCost">
            <summary>
            Describes cost of extending an already existing gap.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseAlignmentAttributes.attributes">
            <summary>
            List of Parameters required to run NUCmer
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseAlignmentAttributes.#ctor">
            <summary>
            Initializes a new instance of the PairwiseAlignmentAttributes class.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseAlignmentAttributes.Attributes">
            <summary>
            Gets list of attributes
            </summary>
        </member>
        <member name="F:Bio.Algorithms.MUMmer.MUMmerAttributes.LengthOfMUM">
            <summary>
            Describes the Minimal length Maximal Unique Match parameter
            </summary>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAttributes.#ctor">
            <summary>
            Initializes a new instance of the MUMmerAttributes class.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAttributes.FixedSeparation">
            <summary>
            Describes maximum fixed diagonal difference
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAttributes.MaximumSeparation">
            <summary>
            Describes maximum separation between the adjacent matches in clusters
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAttributes.MinimumScore">
            <summary>
            Describes Minimum Output Score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAttributes.SeparationFactor">
            <summary>
            Describes Separation Factor
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.NUCmerAttributes.BreakLength">
            <summary>
            Describes number of bases to be extended before stopping alignment
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.NUCmerAttributes.#ctor">
            <summary>
            Initializes a new instance of the NUCmerAttributes class.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.Synteny">
            <summary>
            An ordered list of clusters between two sequences A and B
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.Synteny.internalReferenceSequence">
            <summary>
            Reference sequence
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.Synteny.internalQuerySequence">
            <summary>
            Query sequence
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.Synteny.internalClusters">
            <summary>
            List of clusters
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.Synteny.#ctor(Bio.ISequence,Bio.ISequence)">
            <summary>
            Initializes a new instance of the Synteny class
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Synteny.ReferenceSequence">
            <summary>
            Gets reference sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Synteny.QuerySequence">
            <summary>
            Gets query sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.Synteny.Clusters">
            <summary>
            Gets list of clusters
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.PairwiseAlignedSequence">
            <summary>
            PairwiseAlignedSequence is a class containing the single aligned unit of pairwise alignment.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseAlignedSequence.ConsensusKey">
            <summary>
            Constant string indicating consensus in meta-data.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseAlignedSequence.ScoreKey">
            <summary>
            Constant string indicating alignment score in meta-data.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseAlignedSequence.FirstOffsetKey">
            <summary>
            Constant string indicating offset of first sequence in alignment.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseAlignedSequence.SecondOffsetKey">
            <summary>
            Constant string indicating offset of second sequence in alignment.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseAlignedSequence.#ctor">
            <summary>
            Initializes a new instance of the PairwiseAlignedSequence class.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseAlignedSequence.#ctor(Bio.Algorithms.Alignment.IAlignedSequence)">
            <summary>
            Initializes a new instance of the PairwiseAlignedSequence class
            Internal constructor for creating new instance of 
            PairwiseAlignedSequence from specified IAlignedSequence.
            </summary>
            <param name="alignedSequence">IAlignedSequence instance.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseAlignedSequence.ToString">
            <summary>
            Converts the Consensus, First and Second sequences.
            </summary>
            <returns>Consensus, First and Second sequences.</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseAlignedSequence.FirstSequence">
            <summary>
            Gets or sets Alignment of First Sequence.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseAlignedSequence.SecondSequence">
            <summary>
            Gets or sets Alignment of Second Sequence.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseAlignedSequence.Consensus">
            <summary>
            Gets or sets Consensus of FirstSequence and SecondSequence.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseAlignedSequence.Score">
            <summary>
            Gets or sets Score of the alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseAlignedSequence.FirstOffset">
            <summary>
            Gets or sets Offset of FirstSequence.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseAlignedSequence.SecondOffset">
            <summary>
            Gets or sets Offset of SecondSequence.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.PairwiseOverlapAffineAlignmentJob">
            <summary>
            Pairwise Overlap alignment implementation using affine gap model.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.PairwiseOverlapSimpleAlignmentJob">
            <summary>
            Pairwise Overlap alignment implementation using simple gap model.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapSimpleAlignmentJob.#ctor(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,Bio.ISequence,Bio.ISequence)">
            <summary>
            Inializes a new alignment job
            </summary>
            <param name="similarityMatrix"></param>
            <param name="gapOpenCost"></param>
            <param name="aInput"></param>
            <param name="bInput"></param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapSimpleAlignmentJob.#ctor(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32,Bio.ISequence,Bio.ISequence)">
            <summary>
            Inializes a new alignment job
            </summary>
            <param name="similarityMatrix"></param>
            <param name="gapOpenCost"></param>
            <param name="gapExtensionCost"></param>
            <param name="aInput"></param>
            <param name="bInput"></param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapSimpleAlignmentJob.ComputeIntermediateBlock(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes weights for all blocks of the grid except the lower-right corner one.
            Assumes the grid cache to the left and top of the block has already been filled.
            Weights on the bottom and right edge of the block are written back to the grid.
            </summary>
            <param name="blockRow">First index of the block within the grid</param>
            <param name="blockCol">Second index of the block within the grid</param>
            <param name="lastRow">Last valid row index within the block; rows beyond this index stay uninitialized</param>
            <param name="lastCol">Last valid column index within the block; columns beyond this index stay uninitialized</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapSimpleAlignmentJob.ComputeCornerBlock(System.Int32,System.Int32,System.Int32,System.Int32,System.SByte[][])">
            <summary>
            Computes the lower-right corner block of the grid.
            Combines the forward and traceback passes for performance.
            This is the only block computation that takes place for smaller-than-block alignments
            </summary>
            <param name="trace">Array of traceback pointers</param>
            <param name="blockRow">First index of the block within the grid</param>
            <param name="blockCol">Second index of the block within the grid</param>
            <param name="lastRow">Last valid row index within the block; rows beyond this index stay uninitialized</param>
            <param name="lastCol">Last valid column index within the block; columns beyond this index stay uninitialized</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapSimpleAlignmentJob.ComputeTraceBlock(System.Int32,System.Int32,System.Int32,System.Int32,System.SByte[][])">
            <summary>
            Computes the traceback pointers for the block.
            Assumes the grid cache has been already filled during the forward pass
            </summary>
            <param name="trace">Array of traceback pointers</param>
            <param name="blockRow">First index of the block within the grid</param>
            <param name="blockCol">Second index of the block within the grid</param>
            <param name="lastRow">Last valid row index within the block; rows beyond this index stay uninitialized</param>
            <param name="lastCol">Last valid column index within the block; columns beyond this index stay uninitialized</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapSimpleAlignmentJob.SetBoundaryCondition(System.SByte[][],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the boundary values tor traceback
            </summary>
            <param name="trace">Array of traceback pointers</param>
            <param name="blockRow">First index of the block within the grid</param>
            <param name="blockCol">Second index of the block within the grid</param>
            <param name="lastRow">Last valid row index within the block; rows beyond this index stay uninitialized</param>
            <param name="lastCol">Last valid column index within the block; columns beyond this index stay uninitialized</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapSimpleAlignmentJob.InitializeCache">
            <summary>
            Initializes grid cache for the algorithm.      
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapSimpleAlignmentJob.ComputeBlock(Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.WeightFunction,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Forward pass for the block.
            </summary>
            <param name="weightFunction"></param>
            <param name="blockRow"></param>
            <param name="blockCol"></param>
            <param name="lastRow"></param>
            <param name="lastCol"></param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAffineAlignmentJob.#ctor(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32,Bio.ISequence,Bio.ISequence)">
            <summary>
            Inializes a new alignment job
            </summary>
            <param name="similarityMatrix"></param>
            <param name="gapOpenCost"></param>
            <param name="gapExtensionCost"></param>
            <param name="aInput"></param>
            <param name="bInput"></param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAffineAlignmentJob.ComputeIntermediateBlock(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes weights for all blocks of the grid except the lower-right corner one.
            Assumes the grid cache to the left and top of the block has already been filled.
            Weights on the bottom and right edge of the block are written back to the grid.
            </summary>
            <param name="blockRow">First index of the block within the grid</param>
            <param name="blockCol">Second index of the block within the grid</param>
            <param name="lastRow">Last valid row index within the block; rows beyond this index stay uninitialized</param>
            <param name="lastCol">Last valid column index within the block; columns beyond this index stay uninitialized</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAffineAlignmentJob.ComputeCornerBlock(System.Int32,System.Int32,System.Int32,System.Int32,System.SByte[][])">
            <summary>
            Computes the lower-right corner block of the grid.
            Combines the forward and traceback passes for performance.
            This is the only block computation that takes place for smaller-than-block alignments
            </summary>
            <param name="trace">Array of traceback pointers</param>
            <param name="blockRow">First index of the block within the grid</param>
            <param name="blockCol">Second index of the block within the grid</param>
            <param name="lastRow">Last valid row index within the block; rows beyond this index stay uninitialized</param>
            <param name="lastCol">Last valid column index within the block; columns beyond this index stay uninitialized</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAffineAlignmentJob.ComputeTraceBlock(System.Int32,System.Int32,System.Int32,System.Int32,System.SByte[][])">
            <summary>
            Computes the traceback pointers for the block.
            Assumes the grid cache has been already filled during the forward pass
            </summary>
            <param name="trace">Array of traceback pointers</param>
            <param name="blockRow">First index of the block within the grid</param>
            <param name="blockCol">Second index of the block within the grid</param>
            <param name="lastRow">Last valid row index within the block; rows beyond this index stay uninitialized</param>
            <param name="lastCol">Last valid column index within the block; columns beyond this index stay uninitialized</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAffineAlignmentJob.InitializeCache">
            <summary>
            Initializes grid cache for the algorithm.      
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAffineAlignmentJob.ComputeBlock(Bio.Algorithms.Alignment.DynamicProgrammingPairwiseAlignerJob.WeightFunction,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Forward pass for the block.
            </summary>
            <param name="weightFunction"></param>
            <param name="blockRow"></param>
            <param name="blockCol"></param>
            <param name="lastRow"></param>
            <param name="lastCol"></param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.PairwiseOverlapAligner">
            <summary>
            Implements the pair-wise overlap alignment algorithm described in Chapter 2 of
            Biological Sequence Analysis; Durbin, Eddy, Krogh and Mitchison; Cambridge Press; 1998.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAligner.CreateSimpleAlignmentJob(Bio.ISequence,Bio.ISequence)">
            <summary>
            Creates the Simple aligner job
            </summary>
            <param name="sequenceA">First aligned sequence</param>
            <param name="sequenceB">Second aligned sequence</param>
            <returns></returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseOverlapAligner.CreateAffineAlignmentJob(Bio.ISequence,Bio.ISequence)">
            <summary>
            Creates the Affine aligner job
            </summary>
            <param name="sequenceA">First aligned sequence</param>
            <param name="sequenceB">Second aligned sequence</param>
            <returns></returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseOverlapAligner.Name">
            <summary>
            Gets the name of the current Alignment algorithm used.
            This is a overridden property from the abstract parent.
            This property returns the Name of our algorithm i.e 
            pair-wise-Overlap algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseOverlapAligner.Description">
            <summary>
            Gets the description of the pair-wise-Overlap algorithm used.
            This is a overridden property from the abstract parent.
            This property returns a simple description of what 
            PairwiseOverlapAligner class implements.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.PairwiseSequenceAlignment">
            <summary>
            A simple implementation of IPairwiseSequenceAlignment that stores the 
            results as list of Aligned Sequences.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.seqAlignment">
            <summary>
            Sequence alignment instance.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.alignedSequences">
            <summary>
            List of alignments.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.#ctor(Bio.ISequence,Bio.ISequence)">
            <summary>
            Initializes a new instance of the PairwiseSequenceAlignment class
            Constructs PairwiseSequenceAlignment with input sequences.
            </summary>
            <param name="firstSequence">First input sequence.</param>
            <param name="secondSequence">Second input sequence.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.#ctor">
            <summary>
            Initializes a new instance of the PairwiseSequenceAlignment class
            Constructs an empty PairwiseSequenceAlignment.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.AddSequence(Bio.Algorithms.Alignment.PairwiseAlignedSequence)">
            <summary>
            Add a new Aligned Sequence Object to the end of the list.
            </summary>
            <param name="pairwiseAlignedSequence">The sequence to add.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.Add(Bio.Algorithms.Alignment.PairwiseAlignedSequence)">
            <summary>
            Adds an aligned sequence to the list of aligned sequences in the PairwiseSequenceAlignment.
            Throws exception if sequence alignment is read only.
            </summary>
            <param name="item">PairwiseAlignedSequence to add.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.Clear">
            <summary>
            Clears the PairwiseSequenceAlignment
            Throws exception if PairwiseSequenceAlignment is read only.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.Contains(Bio.Algorithms.Alignment.PairwiseAlignedSequence)">
            <summary>
            Returns true if the PairwiseSequenceAlignment contains the aligned sequence in the
            list of aligned sequences.
            </summary>
            <param name="item">PairwiseAlignedSequence object.</param>
            <returns>True if contains item, otherwise returns false.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.CopyTo(Bio.Algorithms.Alignment.PairwiseAlignedSequence[],System.Int32)">
            <summary>
            Copies the aligned sequences from the PairwiseSequenceAlignment into an existing aligned sequence array.
            </summary>
            <param name="array">Array into which to copy the sequences.</param>
            <param name="arrayIndex">Starting index in array at which to begin the copy.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.Remove(Bio.Algorithms.Alignment.PairwiseAlignedSequence)">
            <summary>
            Removes item from the list of aligned sequences in the PairwiseSequenceAlignment.
            Throws exception if PairwiseSequenceAlignment is read only.
            </summary>
            <param name="item">Aligned sequence object.</param>
            <returns>True if item was removed, false if item was not found.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.ToString">
            <summary>
            Converts the Aligned Sequences to string.
            </summary>
            <returns>Aligned Sequence Data.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.GetEnumerator">
            <summary>
            Returns an enumerator for the aligned sequences in the PairwiseSequenceAlignment.
            </summary>
            <returns>Returns the enumerator for PairwiseAlignedSequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the aligned sequences in the PairwiseSequenceAlignment.
            </summary>
            <returns>Returns the enumerator for PairwiseAlignedSequence.</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.Metadata">
            <summary>
            Gets any additional information about the Alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.AlignedSequences">
            <summary>
            Gets list of the (output) aligned sequences.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.Sequences">
            <summary>
            Gets list of sequences involved in this alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.PairwiseAlignedSequences">
            <summary>
            Gets the list of alignments.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.FirstSequence">
            <summary>
            Gets accessor for the first sequence.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.SecondSequence">
            <summary>
            Gets accessor for the second sequence.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.Documentation">
            <summary>
            Gets or sets Documentation object is intended for tracking the history, provenance,
            and experimental context of a PairwiseSequenceAlignment. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.Count">
            <summary>
            Gets number of aligned sequence objects in the PairwiseSequenceAlignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether PairwiseSequenceAlignment is read-only or not.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.PairwiseSequenceAlignment.Item(System.Int32)">
            <summary>
            Returns the nth aligned sequence in the alignment.
            </summary>
            <param name="i">The index.</param>
            <returns>The aligned sequence.</returns>
        </member>
        <member name="T:Bio.Algorithms.Alignment.SequenceAligners">
            <summary>
            SequenceAligners class is an abstraction class which provides instances
            and lists of all Aligners currently supported by Bio. 
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAligners.#cctor">
            <summary>
            Initializes static members of the SequenceAligners class.
            Static constructor
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAligners.GetAligners">
            <summary>
            Gets all registered aligners in core folder and addins (optional) folders
            </summary>
            <returns>List of registered aligners</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAligners.SmithWaterman">
            <summary>
            Gets an instance of SmithWatermanAligner class which implements
            the SmithWaterman algorithm for partial alignment
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAligners.NeedlemanWunsch">
            <summary>
            Gets an instance of NeedlemanWunschAligner class which implements
            the NeedlemanWunsch algorithm for global alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAligners.MUMmer">
            <summary>
            Gets an instance of MUMmer3 class which implements
            the MUMmer algorithm for partial alignment
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAligners.NUCmer">
            <summary>
            Gets an instance of NUCmer3 class which implements
            the NUCmer algorithm for alignment
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAligners.All">
            <summary>
            Gets the list of all aligners which is supported by the framework.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.SequenceAlignment">
            <summary>
            A simple implementation of ISequenceAlignment that stores the 
            result of an alignment. 
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAlignment.#ctor">
            <summary>
            Initializes a new instance of the SequenceAlignment class
            Default Constructor.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAlignment.#ctor(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Constructor which initializes the sequences.
            </summary>
            <param name="initialSequences">Sequences</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SequenceAlignment.ToString">
            <summary>
            Converts the Aligned Sequences to string.
            </summary>
            <returns>Aligned Sequence Data.</returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAlignment.Metadata">
            <summary>
            Gets any additional information about the Alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAlignment.AlignedSequences">
            <summary>
            Gets list of aligned sequences.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAlignment.Sequences">
            <summary>
            Gets list of source sequences involved in the alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SequenceAlignment.Documentation">
            <summary>
            Gets or sets documentation for this alignment.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.SmithWatermanAligner">
            <summary>
            Implements the SmithWaterman algorithm for partial alignment.
            See Chapter 2 in Biological Sequence Analysis; Durbin, Eddy, Krogh and Mitchison; 
            Cambridge Press; 1998.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SmithWatermanAligner.CreateTracebackTable">
            <summary>
            This is step (2) in the dynamic programming model - to fill in the scoring matrix
            and calculate the traceback entries.  In the Smith-Waterman algorithm, we track the
            highest scoring cell during the algorithm - this is often NOT the bottom/right cell as
            it would be in a global alignment.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.SmithWatermanAligner.CreateAffineTracebackTable">
            <summary>
            This method is used to create the traceback/scoring table when an affine gap model 
            is being used - this is where the open cost is different than the extension cost for a gap
            and generally will produce a better alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SmithWatermanAligner.Name">
            <summary>
            Gets the name of the current Alignment algorithm used.
            This is a overridden property from the abstract parent.
            This property returns the Name of our algorithm i.e 
            Smith-Waterman algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.SmithWatermanAligner.Description">
            <summary>
            Gets the Description of the current Alignment algorithm used.
            This is a overridden property from the abstract parent.
            This property returns a simple description of what 
            SmithWatermanAligner class implements.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.SourceDirection">
            <summary> Direction to source of cell value, used during traceback. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SourceDirection.Stop">
            <summary> During traceback, stop at this cell (used by SmithWaterman). </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SourceDirection.Diagonal">
            <summary> Source was up and left from current cell. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SourceDirection.Up">
            <summary> Source was up from current cell. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SourceDirection.Left">
            <summary> Source was left of current cell. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SourceDirection.Block">
            <summary> During traceback, stop at this cell. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.SourceDirection.Invalid">
            <summary> Error code, if cell has code Invalid error has occurred. </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.DistanceCalculator">
            <summary>
            Class calculates distance between contigs using mate pairs mapped to contigs.
            Reference: The Greedy Path-Merging Algorithm for contig Scaffolding: HUSON et al.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.IDistanceCalculator">
            <summary>
            Classes implementing interface calculates distance between contigs using 
            mate pair information.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.IDistanceCalculator.CalculateDistance">
            <summary>
            Calculates distances between contigs.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.DistanceCalculator.contigPairedReads">
            <summary>
            Contigs and mate pairs mapping
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.DistanceCalculator.#ctor(Bio.Algorithms.Assembly.Padena.Scaffold.ContigMatePairs)">
            <summary>
            Distance calculator.
            </summary>
            <param name="contigPairedReads">Contig pair reads.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.DistanceCalculator.CalculateDistance">
            <summary>
            Calculates distances between contigs.
            </summary>
            <returns>Contig pair reads. </returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.DistanceCalculator.CalculateInterContigDistance(System.Collections.Generic.KeyValuePair{Bio.ISequence,System.Collections.Generic.Dictionary{Bio.ISequence,System.Collections.Generic.IList{Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair}}},System.Int64)">
            <summary>
            Calculate distance between single pair of contigs.
            </summary>
            <param name="contigsPairedRead">Contig mate pairs map.</param>
            <param name="lengthOfContig">Length of forward contig.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.DistanceCalculator.CalculateDistance(Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair,System.Int64)">
            <summary>
            Calculates distance between contigs for each pair of Full Overlap.
            </summary>
            <param name="validPairedRead">Valid mate pairs which have full Overlap 
            and support a particular orientation of contigs.</param>
            <param name="length">Length of forward contig.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.DistanceCalculator.EdgeBundling(System.Collections.Generic.IList{Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair})">
            <summary>
            Bundles all valid mate pairs in single edge but considering ±3σ limit.
            </summary>
            <param name="contigPairedRead">List of Valid Paired Reads.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.DistanceCalculator.CalculateWeigthedEdge(System.Collections.Generic.IList{Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair})">
            <summary>
            Further estimates distances using weighted mean. 
            and standard deviation by merging valid mate pairs.
            </summary>
            <param name="distances">List of valid mate pairs.</param>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder">
            <summary>
            Generates Scaffolds using Graph.
            Algorithm:
            Step1: Generate contig overlap graph. 
            Step2: Map Reads to contigs.
            Step3: Generate Contig Mate Pair Map.
            Step4: Filter Paired Reads.
            Step5: Distance Orientation.
            Step6: Trace Scaffold Paths.
            Step7: Assemble paths.
            Step8: Generate sequence of scaffolds.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.IGraphScaffoldBuilder">
            <summary>
            Generates Scaffolds using Graph.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.IGraphScaffoldBuilder.BuildScaffold(System.Collections.Generic.IEnumerable{Bio.ISequence},System.Collections.Generic.IList{Bio.ISequence},System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds scaffolds from list of reads and contigs.
            </summary>
            <param name="reads">List of reads.</param>
            <param name="contigs">List of contigs.</param>
            <param name="lengthofKmer">Kmer Length.</param>
            <param name="depth">Depth for graph traversal.</param>
            <param name="redundancy">Number of mate pairs required to create a link between two contigs.
             Hierarchical Scaffolding With Bambus
             by: Mihai Pop, Daniel S. Kosack, Steven L. Salzberg
             Genome Research, Vol. 14, No. 1. (January 2004), pp. 149-159.</param>
            <returns>List of scaffold sequences.</returns>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.redundancyField">
            <summary>
            Number of paired read required to connect two contigs.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.depthField">
            <summary>
            Depth for graph traversal.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.kmerLength">
            <summary>
            Kmer length.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.mapPairedReads">
            <summary>
            Mapping reads to mate pairs.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.readContigMap">
            <summary>
            Mapping reads to contigs.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.pairedReadFilter">
            <summary>
            Filtering of mate pairs based on orientation of contigs.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.distanceCalculator">
            <summary>
            Calculation of distance between contigs using mate pairs.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.tracePath">
            <summary>
            Traversal of contig overlap graph.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.pathAssembler">
            <summary>
            Removal of containing paths and removal of overlapping paths.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.#ctor">
            <summary>
            Initializes a new instance of the GraphScaffoldBuilder class. 
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.#ctor(Bio.Algorithms.Assembly.IMatePairMapper,Bio.Algorithms.Assembly.Padena.Scaffold.IReadContigMapper,Bio.Algorithms.Assembly.Padena.Scaffold.IOrientationBasedMatePairFilter,Bio.Algorithms.Assembly.Padena.Scaffold.IDistanceCalculator,Bio.Algorithms.Assembly.Padena.Scaffold.ITracePath,Bio.Algorithms.Assembly.Padena.Scaffold.IPathPurger)">
            <summary>
            Initializes a new instance of the GraphScaffoldBuilder class.
            </summary>
            <param name="mapPairedReads">Mapping reads to mate pairs.</param>
            <param name="readContigMap"> Mapping reads to contigs.</param>
            <param name="pairedReadFilter">Filtering of mate pairs.</param>
            <param name="distanceCalculator">Calculation of distance between 
            contigs using mate pairs.</param>
            <param name="tracePath">Traversal of contig overlap graph.</param>
            <param name="pathAssembler">Removal of containing paths and removal of overlapping paths.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.BuildScaffold(System.Collections.Generic.IEnumerable{Bio.ISequence},System.Collections.Generic.IList{Bio.ISequence},System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds scaffolds from list of reads and contigs.
            </summary>
            <param name="reads">List of reads.</param>
            <param name="contigs">List of contigs.</param>
            <param name="lengthofKmer">Kmer Length.</param>
            <param name="depth">Depth for graph traversal.</param>
            <param name="redundancy">Number of mate pairs required to create a link between two contigs.
             Hierarchical Scaffolding With Bambus
             by: Mihai Pop, Daniel S. Kosack, Steven L. Salzberg
             Genome Research, Vol. 14, No. 1. (January 2004), pp. 149-159.</param>
            <returns>List of scaffold sequences.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.Dispose">
            <summary>
            Implements dispose to suppress GC finalize
            This is done as this class creates an instance 
            of ContigGraph which extends IDisposable.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.GenerateContigOverlapGraph(System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            Generate contig overlap graph.
            </summary>
            <param name="contigs">List of contig sequences.</param>
            <returns>Contig Graph.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.ReadContigMap(System.Collections.Generic.IList{Bio.ISequence},System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Map reads to contigs.
            </summary>
            <param name="contigs">List of sequences of contigs.</param>
            <param name="reads">List of sequences of reads.</param>
            <returns>Map of reads and contigs.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.MapPairedReadsToContigs(Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMap,System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Map paired reads to contigs using FASTA sequence header.
            </summary>
            <param name="readContigMaps">Map between reads and contigs.</param>
            <param name="reads">Sequences of reads.</param>
            <returns>Contig Mate Pair map.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.FilterReadsBasedOnOrientation(Bio.Algorithms.Assembly.Padena.Scaffold.ContigMatePairs)">
            <summary>
            Filter reads based on orientation of contigs.
            </summary>
            <param name="contigMatePairs">Contig Mate Pair map.</param>
            <returns>Returns Contig Mate Pair map.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.CalculateDistanceBetweenContigs(Bio.Algorithms.Assembly.Padena.Scaffold.ContigMatePairs)">
            <summary>
            Calculate distance between contigs using paired reads.
            </summary>
            <param name="contigMatePairs">Contig Mate Pair map.</param>
            <returns>Number of contig-read pairs.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.TracePath(Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph,Bio.Algorithms.Assembly.Padena.Scaffold.ContigMatePairs)">
            <summary>
            Performs Breadth First Search in contig overlap graph.
            </summary>
            <param name="contigGraph">Contig Graph.</param>
            <param name="contigMatePairs">Contig Mate Pair map.</param>
            <returns>List of Scaffold Paths.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.PathPurger(System.Collections.Generic.IList{Bio.Algorithms.Assembly.Padena.Scaffold.ScaffoldPath})">
            <summary>
            Remove containing and overlapping paths.
            </summary>
            <param name="paths">List of Scaffold Paths.</param>
            <returns>Number of final paths.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.GenerateScaffold(Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph,System.Collections.Generic.IList{Bio.Algorithms.Assembly.Padena.Scaffold.ScaffoldPath})">
            <summary>
            Generate sequences from list of contig nodes.
            </summary>
            <param name="contigGraph">Contig Overlap Graph.</param>
            <param name="paths">Scaffold paths.</param>
            <returns>List of sequences of scaffolds.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.Dispose(System.Boolean)">
            <summary>
            Dispose field instances.
            </summary>
            <param name="disposeManaged">If disposeManaged equals true, clean all resources.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.GraphScaffoldBuilder.ValidateReads(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Validate input sequences
            </summary>
            <param name="reads">The Reads</param>
            <returns>Valid reads.</returns>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.OrientationBasedMatePairFilter">
            <summary>
            Filter mate pairs based on support for contig orientation.
            The mate pairs support specific orientation of contigs, 
            based on mapping of reverse read or forward read to specify orientation.
            Orientation 1
            ----------) (------------- 
            contig 1      contig 2
            Orientation 2
            ----------) (-------------
            contig 2      contig 1.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.IOrientationBasedMatePairFilter">
            <summary>
            Filter mate pairs based on support for contig orientation.
            The mate pairs support specific orientation of contigs, 
            based on mapping of reverse read or forward read to specify orientation.
            Orientation 1
            ----------) (------------- 
            contig 1      contig 2
            
            Orientation 2
            ----------) (-------------
            
            contig 2      contig 1
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.IOrientationBasedMatePairFilter.FilterPairedReads(Bio.Algorithms.Assembly.Padena.Scaffold.ContigMatePairs,System.Int32)">
            <summary>
            Filter mate pairs.
            </summary>
            <param name="matePairMap">Dictionary of Map between contigs using mate pair information.</param>
            <param name="redundancy">Number of mate pairs require to create a link 
            between two contigs.</param>
            <returns>List of contig mate pairs.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.OrientationBasedMatePairFilter.FilterPairedReads(Bio.Algorithms.Assembly.Padena.Scaffold.ContigMatePairs,System.Int32)">
            <summary>
            Filter Paired Read Based on Orientation.
            </summary>
            <param name="matePairMap">Map between contigs using mate pair information.</param>
            <param name="redundancy">Number of mate pairs required to create a link between two contigs.
             Hierarchical Scaffolding With Bambus
             by: Mihai Pop, Daniel S. Kosack, Steven L. Salzberg 
            Genome Research, Vol. 14, No. 1. (January 2004), pp. 149-159.</param>  
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.PathPurger">
            <summary>
            Removes containing paths and merge Overlapping scaffold paths.
            Containing Paths
            -------------- Contig 1
                --------   Contig 2
            Overlapping Paths
            --------        Contig 1 
                ---------   Contig 2.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.IPathPurger">
            <summary>
            Removes containing paths and merge Overlapping scaffold paths.
            Containing Paths
            -------------- Contig 1
                --------   Contig 2
            Overlapping Paths
            --------        Contig 1 
                ---------   Contig 2
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.IPathPurger.PurgePath(System.Collections.Generic.IList{Bio.Algorithms.Assembly.Padena.Scaffold.ScaffoldPath})">
            <summary>
            Removes containing paths and merge overlapping paths.
            </summary>
            <param name="scaffoldPaths">Input paths/scaffold.</param>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.PathPurger.internalScaffoldPaths">
            <summary>
            Input list of scaffold paths.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.PathPurger.PurgePath(System.Collections.Generic.IList{Bio.Algorithms.Assembly.Padena.Scaffold.ScaffoldPath})">
            <summary>
            Removes containing paths and merge overlapping paths.
            </summary>
            <param name="scaffoldPaths">Input paths/scaffold.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.PathPurger.RemoveContainingPaths(Bio.Algorithms.Assembly.Padena.Scaffold.ScaffoldPath,Bio.Algorithms.Assembly.Padena.Scaffold.ScaffoldPath)">
            <summary>
            Remove containing paths.
            </summary>
            <param name="scaffoldPath">Current path.</param>
            <param name="path">Path to be compared with.</param>
            <returns>Containing paths or not.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.PathPurger.RemoveOverlappingPaths(Bio.Algorithms.Assembly.Padena.Scaffold.ScaffoldPath,Bio.Algorithms.Assembly.Padena.Scaffold.ScaffoldPath)">
            <summary>
            Removes Overlapping paths by generating pairwise overlaps between paths.
            </summary>
            <param name="scaffoldPath">Current path.</param>
            <param name="path">Path to be compared with.</param>
            <returns>Overlapping paths or not.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.PathPurger.StitchPath(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node,Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Edge}},System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node,Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Edge}},System.Int32,System.Int32)">
            <summary>
            Stitches overlapping paths and update the path.
            </summary>
            <param name="scaffoldPath">Current path.</param>
            <param name="path">Path to be compared with.</param>
            <param name="pos">End position of overlap in first path.</param>
            <param name="pos1">End position of overlap in second path.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.PathPurger.SearchContainingAndOverlappingPaths(Bio.Algorithms.Assembly.Padena.Scaffold.ScaffoldPath,System.Boolean[])">
            <summary>
            Search for containing and overlapping paths.
            </summary>
            <param name="scaffoldPath">Current Path.</param>
            <param name="isConsumed">Path status.</param>
            <returns>Update list or not.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.PathPurger.UpdatePath(System.Boolean[])">
            <summary>
            Removes all consumed path.
            </summary>
            <param name="isConsumed">Status of paths.</param>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMapper">
            <summary>
            Maps reads to contigs.
            Class map reads to contigs using kmer method of alignment.
            Each Sequence is broken in kmers. And these kmer are aligned with 
            kmer of other sequences to generate un-gapped alignments.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.IReadContigMapper">
            <summary>
            Interface is used by classes that maps mate pairs to contigs. 
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.IReadContigMapper.Map(System.Collections.Generic.IList{Bio.ISequence},System.Collections.Generic.IEnumerable{Bio.ISequence},System.Int32)">
            <summary>
            Map reads to contigs.
            Reads are aligned to contigs for distance calculation between
            contigs using mate pair library information, which will aid in scaffold building. 
            </summary>
            <param name="contigs">List of contig sequences.</param>
            <param name="reads">List of paired reads to be mapped.</param>
            <param name="kmerLength">Length of kmer.</param>
            <returns>Read contig Map.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMapper.Map(System.Collections.Generic.IList{Bio.ISequence},System.Collections.Generic.IEnumerable{Bio.ISequence},System.Int32)">
            <summary>
            Public method mapping Reads to Contigs.
            </summary>
            <param name="contigs">List of sequences of contigs.</param>
            <param name="reads">List of input reads.</param>
            <param name="kmerLength">Length of kmer.</param>
            <returns>Contig Read Map.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMapper.MapRead(System.Int64,System.Collections.Generic.IList{System.Collections.Generic.IList{Bio.Algorithms.Kmer.KmerIndexer}},System.Int64,System.Int64,System.Int32)">
            <summary>
            Traverse through list of contig-read match indexes for given read.
            </summary>
            <param name="position">Position from where list of 
             indexes should be traversed.</param>
            <param name="contigReadMatch">List for contig-read match indexes.</param>
            <param name="contigIndex">Index of contig sequence.</param>
            <param name="readLength">Length of read.</param>
            <param name="kmerLength">Length of kmer.</param>
            <returns>List of read maps.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMapper.FindContinuous(Bio.Algorithms.Kmer.KmerIndexer,System.Collections.Generic.IList{Bio.Algorithms.Assembly.Padena.Scaffold.ReadMap},System.Int64,System.Int32,System.Int64)">
            <summary>
            Merge continuous positions of a read in kmer indexes.
            </summary>
            <param name="kmer">Position of contig kmer.</param>
            <param name="readMaps">Alignment between read and contig.</param>
            <param name="position">Position of kmer in read.</param>
            <param name="kmerLength">Length of kmer.</param>
            <param name="readLength">Length of the read.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMapper.IsContinousRight(Bio.Algorithms.Assembly.Padena.Scaffold.ReadMap,System.Int64,System.Int64,System.Int32)">
            <summary>
             Find if positions occur simultaneously of read in contig, 
             if contig is traced from right direction.
            </summary>
            <param name="map">Map from previous position of read.</param>
            <param name="readPosition">Position of read.</param>
            <param name="contigPosition">Position of contig.</param>
            <param name="length">Length of kmer.</param>
            <returns>True if continuous position of reads in contig.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMapper.IsContinousLeft(Bio.Algorithms.Assembly.Padena.Scaffold.ReadMap,System.Int64,System.Int64,System.Int32)">
            <summary>
             Find if positions occur simultaneously of read in contig, 
             if contig is traced from left direction.
            </summary>
            <param name="map">Map from previous position of read.</param>
            <param name="readPosition">Position of read.</param>
            <param name="contigPosition">Position of contig.</param>
            <param name="length">Length of kmer.</param>
            <returns>True if continuous position of reads in contig.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMapper.SetReadContigOverlap(System.Int64,Bio.Algorithms.Assembly.Padena.Scaffold.ReadMap)">
            <summary>
            Determines whether read is full or partial overlap between read and contig.
            Overlap of read and contig
            FullOverlap
            ------------- Contig
               ------     Read
            PartialOverlap
            -------------       Contig
                       ------   Read.
            </summary>
            <param name="length">Length of read.</param>
            <param name="read">Map of read to contig.</param>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMapper.ReadIndex">
            <summary>
            Stores information of kmer reads map with contigs.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMapper.ReadIndex.contigReadMatchIndexes">
            <summary>
            Contig stored in form of kmer maps of reads
            ------------------------------  Contig
            --------                        read1
            --------                        read5
                    --------                read2
                            --------        read3
                                    ------  read4.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMapper.ReadIndex.readSequence">
            <summary>
            Read Sequence.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMapper.ReadIndex.#ctor(Bio.ISequence)">
            <summary>
            Initializes a new instance of the ReadIndex class.
            </summary>
            <param name="read">Read sequence.</param>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMapper.ReadIndex.ContigReadMatchIndexes">
            <summary>
            Gets the value of Read as indexes of contig overlap.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMapper.ReadIndex.ReadSequence">
            <summary>
            Gets the value of read sequence.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.TracePath">
            <summary>
            Performs Breadth First Search on Contig Overlap Graph
            using distance between contigs as constrain.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.ITracePath">
            <summary>
            Traverse through Contig overalp graphs to generate scaffold paths.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ITracePath.FindPaths(Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph,Bio.Algorithms.Assembly.Padena.Scaffold.ContigMatePairs,System.Int32,System.Int32)">
            <summary>
            Performs Breadth First Search to traverse through graph to generate scaffold paths.
            </summary>
            <param name="overlapGraph">Contig Overlap Graph.</param>
            <param name="contigPairedReadMaps">InterContig Distances.</param>
            <param name="lengthOfKmer">Length of Kmer</param>
            <param name="searchDepth">Depth to which graph is searched.</param>
            <returns>List of paths/scaffold</returns>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.TracePath.graph">
            <summary>
            Contig Overlap Graph.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.TracePath.depth">
            <summary>
            Depth to which graph is traversed.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.TracePath.kmerLength">
            <summary>
            Length of Kmer (indicates kmer -1 overlap between contigs).
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.TracePath.FindPaths(Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph,Bio.Algorithms.Assembly.Padena.Scaffold.ContigMatePairs,System.Int32,System.Int32)">
            <summary>
            Performs Breadth First Search to traverse through graph to generate scaffold paths.
            </summary>
            <param name="overlapGraph">Contig Overlap Graph.</param>
            <param name="contigPairedReadMaps">InterContig Distances.</param>
            <param name="lengthOfKmer">Length of Kmer.</param>
            <param name="searchDepth">Depth to which graph is searched.</param>
            <returns>List of paths/scaffold.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.TracePath.TraverseGraph(Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node,System.Collections.Generic.Dictionary{Bio.ISequence,System.Collections.Generic.IList{Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair}})">
            <summary>
            Performs Breadth First Search.
            </summary>
            <param name="node">Start Node.</param>
            <param name="contigPairedReadMap">Map of all contigs having valid 
            mate pairs with given node contig.</param>
            <returns>List of paths.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.TracePath.LeftExtension(System.Collections.Generic.KeyValuePair{Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node,Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Edge},System.Collections.Generic.Queue{Bio.Algorithms.Assembly.Padena.Scaffold.Paths},System.Collections.Generic.List{Bio.Algorithms.Assembly.Padena.Scaffold.Paths},Bio.Algorithms.Assembly.Padena.Scaffold.ScaffoldPath,System.Collections.Generic.Dictionary{Bio.ISequence,System.Collections.Generic.IList{Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair}})">
            <summary>
            Add left extension of the nodes to queue.  
            </summary>
            <param name="node">Current node.</param>
            <param name="search">Queue for BFS.</param>
            <param name="paths">List of paths.</param>
            <param name="familyTree">Nodes visited for construction of paths.</param>
            <param name="contigPairedReadMap">Contig and valid mate pair map.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.TracePath.RightExtension(System.Collections.Generic.KeyValuePair{Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node,Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Edge},System.Collections.Generic.Queue{Bio.Algorithms.Assembly.Padena.Scaffold.Paths},System.Collections.Generic.List{Bio.Algorithms.Assembly.Padena.Scaffold.Paths},Bio.Algorithms.Assembly.Padena.Scaffold.ScaffoldPath,System.Collections.Generic.Dictionary{Bio.ISequence,System.Collections.Generic.IList{Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair}})">
            <summary>
            Add right extension of the nodes to queue.
            </summary>
            <param name="node">Current node.</param>
            <param name="search">Queue for BFS.</param>
            <param name="paths">List of paths.</param>
            <param name="familyTree">Nodes visited for construction of paths.</param>
            <param name="contigPairedReadMap">Contig and valid mate pair map.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.TracePath.DistanceConstraint(Bio.Algorithms.Assembly.Padena.Scaffold.Paths,System.Collections.Generic.Dictionary{Bio.ISequence,System.Collections.Generic.IList{Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair}})">
            <summary>
            Apply Distance constrains on given two nodes.
            The distances between contigs are calculated using paired read information.
            </summary>
            <param name="childPath">Destination node.</param>
            <param name="contigPairedReadMaps">Map of contigs and paired reads.</param>
            <returns>Whether Distance between contig nodes lie in constraint or not.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.TracePath.GetPathLength(Bio.Algorithms.Assembly.Padena.Scaffold.Paths)">
            <summary>
            Get length of path traversed using BFS.
            </summary>
            <param name="childPath">Path travelled to reach destination node.</param>
            <returns>Distance between first and last contig node.</returns>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.Paths">
            <summary>
            Class stores information of path traveled while performing BFS.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.Paths.path">
            <summary>
            Path traveled.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.Paths.CurrentNode">
            <summary>
            Gets or sets value of current Node.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.Paths.NodeOrientation">
            <summary>
            Gets or sets a value indicating whether orientation of current node.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.Paths.FamilyTree">
            <summary>
            Gets the value of family tree/path traversed to reach to current node.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.MUMmer.LIS.ILongestIncreasingSubsequence">
            <summary>
            This interface defines contract for classes implementing
             Longest increasing subsequence.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.LIS.ILongestIncreasingSubsequence.GetLongestSequence(System.Collections.Generic.IList{Bio.Algorithms.SuffixTree.Match})">
            <summary>
            This method will run greedy version of 
            longest increasing subsequence algorithm on the list of Mum.        
            </summary>
            <param name="sortedMums">List of Sorted Mums.</param>
            <returns>Returns the longest subsequence list of Mum.</returns>
        </member>
        <member name="T:Bio.Algorithms.MUMmer.LIS.LongestIncreasingSubsequence">
            <summary>
            This class implements an algorithm to find the longest increasing
            subsequence from the list of MUMs. In the process 
                1. Removes the criss-cross mums.
                2. Removes the overlapping portion of MUM by trimming the appropriate MUM.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.LIS.LongestIncreasingSubsequence.GetLongestSequence(System.Collections.Generic.IList{Bio.Algorithms.SuffixTree.Match})">
            <summary>
            Find the longest increasing sub sequence from the given set of MUMs.
            </summary>
            <param name="sortedMums">List of sorted MUMs.</param>
            <returns>Longest Increasing Subsequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.LIS.LongestIncreasingSubsequence.SortMum(System.Collections.Generic.IList{Bio.Algorithms.SuffixTree.Match})">
            <summary>
            Sorts the MUMs.
            </summary>
            <param name="mumList">List of MUMs.</param>
            <returns>Sorted list of MUMs.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.LIS.LongestIncreasingSubsequence.ConvertToMUMExtension(System.Collections.Generic.IList{Bio.Algorithms.SuffixTree.Match})">
            <summary>
            Convert given list of MUMs to MaxUniqueMatchExtension
            </summary>
            <param name="sortedMums">List of MUMs</param>
            <returns>List of MaxUniqueMatchExtension</returns>
        </member>
        <member name="T:Bio.Algorithms.MUMmer.MUMmer">
            <summary>
            MUMmer is a system for rapidly aligning entire genomes or very large protein
            sequences. It is a pair wise sequence algorithm. The algorithm assumes the 
            sequences are closely related, and using this assumption can quickly compare
            sequences that are millions of nucleotides in length. The algorithm is 
            designed to perform high resolution comparison of genome-length sequences. 
            </summary>
        </member>
        <member name="F:Bio.Algorithms.MUMmer.MUMmer.suffixTree">
            <summary>
            Holds the suffix tree.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmer.#ctor(Bio.ISequence)">
            <summary>
            Initializes a new instance of the MUMmer class with specified reference sequence.
            </summary>
            <param name="referenceSequence">Reference sequence.</param>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmer.#ctor(Bio.Algorithms.SuffixTree.ISuffixTree)">
            <summary>
            Initializes a new instance of the MUMmer class with the specified suffix tree.
            This enables to use custom suffix tree.
            </summary>
            <param name="suffixTree">Suffix tree.</param>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmer.GetMatches(Bio.ISequence)">
            <summary>
            Gets the maximum matches - MaxMatch.
            This method does not considers uniqueness.
            </summary>
            <param name="querySequence">Query sequence.</param>
            <returns>Returns IEnumerable of MUMs.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmer.GetMatchesUniqueInReference(Bio.ISequence)">
            <summary>
            Gets the maximum unique matches in reference sequence.
            </summary>
            <param name="querySequence">Query sequence.</param>
            <returns>Returns IEnumerable of MUMs.</returns>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmer.Name">
            <summary>
            Gets the name of the MUMmer.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmer.Description">
            <summary>
            Gets or sets the description of the MUMmer.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmer.LengthOfMUM">
            <summary>
            Gets or sets the length of MUM.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmer.NoAmbiguity">
            <summary>
            Gets or sets a value indicating whether only basic symbols should be matched.
            Thus the matches will not contains any ambiguous symbols.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmer.ReferenceSequence">
            <summary>
            Gets the referenceSequence.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.MUMmer.MUMmerAligner">
            <summary>
            This class is used for Align MUMs.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.MUMmer.MUMmerAligner.AlignmentChar">
            <summary>
            Alignment Char.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.MUMmer.MUMmerAligner.storeMUMs">
            <summary>
            Boolean indicating whether the MUMs generated 
            during alignment are to be stored for later access.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.MUMmer.MUMmerAligner.mums">
            <summary>
            Stores list of MUMs.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAligner.#ctor">
            <summary>
            Initializes a new instance of the MUMmerAligner class.
            Constructor for all the pairwise aligner 
            (NeedlemanWunsch, SmithWaterman, Overlap).
            Sets default similarity matrix and gap penalty.
            Users will typically reset these using parameters 
            specific to their particular sequences
            and needs.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAligner.Bio#Algorithms#Alignment#ISequenceAligner#AlignSimple(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Align the list of input sequences using linear gap model.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAligner.AlignSimple(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Align the list of input sequences using a simple constant penalty gap model.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAligner.AlignSimple(Bio.ISequence,System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Align the reference sequence and query sequences using an affine gap model.
            </summary>
            <param name="referenceSequence">Reference sequence.</param>
            <param name="querySequenceList">List of query sequence.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAligner.Bio#Algorithms#Alignment#ISequenceAligner#Align(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Align aligns the set of input sequences using the affine gap model 
            (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAligner.Align(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Align aligns the set of input sequences using the affine gap model 
            (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAligner.Align(Bio.ISequence,System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
             Align aligns the reference sequence with query sequences using the affine gap model 
             (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="referenceSequence">Reference sequence.</param>
            <param name="querySequenceList">List of query sequence.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAligner.Validate(Bio.ISequence,System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Validate the inputs.
            </summary>
            <param name="referenceSequence">Reference sequence.</param>
            <param name="querySequenceList">List of input sequences.</param>
            <returns>Are inputs valid.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAligner.GetMumsForLIS(System.Collections.Generic.IEnumerable{Bio.Algorithms.SuffixTree.Match})">
            <summary>
            Generates a list of MUMs for computing LIS.
            </summary>
            <param name="mums">MUMs generated by the MUMmer.</param>
            <returns>List of MUMs.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAligner.CreateDefaultGap(System.Int64)">
            <summary>
            Create a default gap sequence of given length, pad the symbol - in sequence.
            </summary>
            <param name="length">Length of gap.</param>
            <returns>Hyphen padded sequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAligner.Alignment(Bio.ISequence,System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            This method is considered as main execute method which defines the
            step by step algorithm. Derived class flows the defined flow by this
            method.
            </summary>
            <param name="referenceSequence">Reference sequence.</param>
            <param name="querySequenceList">List of input sequences.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAligner.AlignmentWithoutAccumulatedMUMs(Bio.ISequence,System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            This method is considered as main execute method which defines the
            step by step algorithm. Derived class flows the defined flow by this
            method. Does not store MUMs, processes MUMs and gaps to find 
            alignment directly. 
            </summary>
            <param name="referenceSequence">Reference sequence.</param>
            <param name="querySequenceList">List of input sequences.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAligner.AlignmentWithAccumulatedMUMs(Bio.ISequence,System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            This method is considered as main execute method which defines the
            step by step algorithm. Derived class flows the defined flow by this
            method. Store generated MUMs in properties MUMs, SortedMUMs.
            Alignment first finds MUMs for all the query sequence, and then 
            runs pairwise algorithm on gaps to produce alignments.
            </summary>
            <param name="referenceSequence">Reference sequence.</param>
            <param name="querySequenceList">List of input sequences.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAligner.RunPairWise(Bio.ISequence,Bio.ISequence)">
            <summary>
            Get the alignment using pair wise.
            </summary>
            <param name="seq1">Sequence 1.</param>
            <param name="seq2">Sequence 2.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAligner.ProcessGaps(Bio.ISequence,Bio.ISequence,System.Collections.Generic.IList{Bio.Algorithms.SuffixTree.Match})">
            <summary>
            Get all the gaps in each sequence and call pairwise alignment.
            </summary>
            <param name="referenceSequence">Reference sequence.</param>
            <param name="sequence">Query sequence.</param>
            <param name="mums">List of MUMs.</param>
            <returns>Aligned sequences.</returns>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MUMmerAligner.AlignGap(Bio.ISequence,Bio.ISequence,System.Collections.Generic.List{System.Byte},System.Collections.Generic.List{System.Byte},System.Collections.Generic.List{System.Byte},Bio.Algorithms.SuffixTree.Match,Bio.Algorithms.SuffixTree.Match,System.Collections.Generic.List{System.Int64}@)">
            <summary>
            Align the Gap by executing pairwise alignment.
            </summary>
            <param name="referenceSequence">Reference sequence.</param>
            <param name="querySequence">Query Sequence.</param>
            <param name="sequenceResult1">Editable sequence containing alignment first result.</param>
            <param name="sequenceResult2">Editable sequence containing alignment second result.</param>
            <param name="consensusResult">Editable sequence containing consensus sequence.</param>
            <param name="mum1">First MUM of Gap.</param>
            <param name="mum2">Second MUM of Gap.</param>
            <param name="insertions">Insertions made to the aligned sequences.</param>
            <returns>Score of alignment.</returns>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmerAligner.LengthOfMUM">
            <summary>
            Gets or sets the length of MUM.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmerAligner.SimilarityMatrix">
            <summary>
            Gets or sets similarity matrix for use in alignment algorithms.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmerAligner.GapOpenCost">
            <summary> 
            Gets or sets gap open penalty for use in alignment algorithms. 
            For alignments using a linear gap penalty, this is the gap penalty.
            For alignments using an affine gap, this is the penalty to open a new gap.
            This is a negative number, for example GapOpenCost = -8, not +8.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmerAligner.GapExtensionCost">
            <summary> 
            Gets or sets gap extension penalty for use in alignment algorithms. 
            Not used for alignments using a linear gap penalty.
            For alignments using an affine gap, this is the penalty to
            extend an existing gap.
            This is a negative number, for example GapExtensionCost = -2, not +2.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmerAligner.ConsensusResolver">
            <summary>
            Gets or sets the object that will be used to compute the alignment's consensus.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmerAligner.PairWiseAlgorithm">
            <summary>
            Gets or sets the pair wise aligner which will be executed 
            by end of Mummer.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmerAligner.Name">
            <summary>
            Gets the name of the Aligner. Intended to be filled in 
            by classes deriving from DynamicProgrammingPairwiseAligner class
            with the exact name of the Alignment algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmerAligner.Description">
            <summary>
            Gets the description of the Aligner. Intended to be filled in 
            by classes deriving from DynamicProgrammingPairwiseAligner class
            with the exact details of the Alignment algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmerAligner.StoreMUMs">
            <summary>
            Gets or sets a value indicating whether the Boolean value indicating 
            whether MUMs generated are to be stored or not.
            Set to false by default.
            Note: Storing MUMs incur memory overhead.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmerAligner.MUMs">
            <summary>
            Gets the list of MUMs after applying Longest Increasing Subsequence
            algorithm to order and merge MUMs, for each query sequence.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmerAligner.AmbigiousMatchesAllowed">
            <summary>
            Gets or sets a value indicating whether Ambiguous matches are allowed or not.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmerAligner.MaximumMatchEnabled">
            <summary>
            Gets or sets a value indicating whether MaxMatch option should be enabled or not.
            If this property is set to true, then mums are generated irrespective of 
            uniqueness in query and reference sequences.
            By default this property is set to false, indicating that matches are unique in reference sequence only.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MUMmerAligner.UseGapExtensionCost">
            <summary>
            Gets or sets a value indicating whether to run Align or AlignSimple.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.MUMmer.MummerAlphabetExtensions">
            <summary>
            Class to get the MUMmer alphabet corresponding to the specified alphabet.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MummerAlphabetExtensions.GetMummerAlphabet(Bio.IAlphabet)">
            <summary>
            Find corresponding mummer alphabet which supports the concatenation symbol using an existing alphabet
            </summary>
            <param name="alphabet">Existing alphabet type</param>
            <returns>Corresponding mummer alphabet</returns>
        </member>
        <member name="T:Bio.Algorithms.MUMmer.MummerDnaAlphabet">
            <summary>
            Alphabet for use by MUMmer to support concatenation character '+'
            </summary>
        </member>
        <member name="T:Bio.AmbiguousDnaAlphabet">
            <summary>
            Ambiguous symbol in the DNA.
            </summary>
        </member>
        <member name="T:Bio.DnaAlphabet">
            <summary>
                The basic alphabet that describes symbols used in DNA sequences.
                This alphabet allows not only for the four base nucleotide symbols,
                but also for various ambiguities, termination, and gap symbols.
                <para>
                    The character representations come from the NCBI4na standard and
                    are used in many sequence file formats. The NCBI4na standard is the
                    same as the IUPACna standard with only the addition of the gap
                    character.
                </para>
                <para>
                    The entries in this dictionary are:
                    Symbol - Name
                    A - Adenine
                    C - Cytosine
                    M - A or C
                    G - Guanine
                    R - G or A
                    S - G or C
                    V - G or V or A
                    T - Thymine
                    W - A or T
                    Y - T or C
                    H - A or C or T
                    K - G or T
                    D - G or A or T
                    B - G or T or C
                    - - Gap
                    N - A or G or T or C.
                </para>
            </summary>
        </member>
        <member name="T:Bio.IAlphabet">
            <summary>
            An alphabet defines a set of symbols common to a particular representation
            of a biological sequence. The symbols in these alphabets are those you would find
            as the individual sequence items in an ISequence variable.
            <para>
            The symbols in an alphabet may represent a particular biological structure
            or they may represent information helpful in understanding a sequence. For instance
            gap symbol, termination symbol, and symbols representing items whose
            definition remains ambiguous are all allowed.
            </para>
            </summary>
        </member>
        <member name="M:Bio.IAlphabet.TryGetComplementSymbol(System.Byte,System.Byte@)">
            <summary>
            Gets the complement for the specified symbol.
            This is to address the scenarios like in case of DNA complement of A is T etc.
            Note: If the complement is not supported then this method returns false.
                  To know whether this alphabet supports complement or not, Use IsComplementSupported property.
            </summary>
            <param name="symbol">Symbol for which the complement symbol is needed.</param>
            <param name="complementSymbol">Complement symbol.</param>
            <returns>Returns true if complement symbol is found and returned, else returns false.</returns>
        </member>
        <member name="M:Bio.IAlphabet.TryGetComplementSymbol(System.Byte[],System.Byte[]@)">
            <summary>
            Gets the complements for the specified symbols.
            This is to address the scenarios like in case of DNA complement of A is T etc.
            Note: If the complement is not supported then this method returns false.
                  To know whether this alphabet supports complement or not, Use IsComplementSupported property.
            </summary>
            <param name="symbols">Symbol for which the complement symbol is needed.</param>
            <param name="complementSymbols">Complement symbol.</param>
            <returns>Returns true if complement symbol is found and returned, else returns false.</returns>
        </member>
        <member name="M:Bio.IAlphabet.TryGetDefaultGapSymbol(System.Byte@)">
            <summary>
            Gets the default gap symbol if present in the alphabet.
            </summary>
            <param name="defaultGapSymbol">Default gap symbol if the alphabet has one.</param>
            <returns>Returns true if the default gap symbol is returned in defaultGapSymbol parameter,
            else returns false.</returns>
        </member>
        <member name="M:Bio.IAlphabet.TryGetDefaultTerminationSymbol(System.Byte@)">
            <summary>
            Gets the default termination symbol if present in the alphabet.
            </summary>
            <param name="defaultTerminationSymbol">Default termination symbol if the alphabet has one.</param>
            <returns>Returns true if the default termination symbol is returned in defaultTerminationSymbol 
            parameter, else returns false.</returns>
        </member>
        <member name="M:Bio.IAlphabet.TryGetGapSymbols(System.Collections.Generic.HashSet{System.Byte}@)">
            <summary>
            Gets the gap symbols if present in the alphabet.
            </summary>
            <param name="gapSymbols">Gap symbols as hashset if the alphabet has one or more gap symbols.</param>
            <returns>Returns true if the gap symbols are returned in gapSymbols parameter, else returns false.</returns>
        </member>
        <member name="M:Bio.IAlphabet.TryGetTerminationSymbols(System.Collections.Generic.HashSet{System.Byte}@)">
            <summary>
            Gets the termination symbols if present in the alphabet.
            </summary>
            <param name="terminationSymbols">Termination symbols as hashset if the alphabet has one or more termination symbols.</param>
            <returns>Returns true if the termination symbols are returned in trminationSymbols parameter, else returns false.</returns>
        </member>
        <member name="M:Bio.IAlphabet.GetValidSymbols">
            <summary>
            Gets the symbols that are valid for this alphabet.
            This Method can be used for better performance where lot of 
            validation happens like in case of Parsers.
            </summary>
        </member>
        <member name="M:Bio.IAlphabet.GetAmbiguousSymbols">
            <summary>
            Gets the ambiguous symbols present in alphabet.
            </summary>
        </member>
        <member name="M:Bio.IAlphabet.GetSymbolValueMap">
            <summary>
            Maps A to A  and a to A
            that is key will contain unique values.
            This will be used in the IsValidSymbol method to address Scenarios like a == A, G == g etc.
            </summary>
        </member>
        <member name="M:Bio.IAlphabet.GetConsensusSymbol(System.Collections.Generic.HashSet{System.Byte})">
            <summary>
            Find the consensus symbol for a set of symbols.
            </summary>
            <param name="symbols">Set of sequence items.</param>
            <returns>Consensus symbol.</returns>
        </member>
        <member name="M:Bio.IAlphabet.TryGetAmbiguousSymbol(System.Collections.Generic.HashSet{System.Byte},System.Byte@)">
            <summary>
            Gets the ambiguous symbol for the specified set of symbols.
            </summary>
            <param name="symbols">Set of symbols for which the ambiguous symbol is required.</param>
            <param name="ambiguousSymbol">Ambiguous symbol.</param>
            <returns>Returns true if the ambiguous symbol found and returned in ambiguousSymbol parameter, else returns false.</returns>
        </member>
        <member name="M:Bio.IAlphabet.TryGetBasicSymbols(System.Byte,System.Collections.Generic.HashSet{System.Byte}@)">
            <summary>
            Gets the set of basic symbols for the specified ambiguous symbol.
            </summary>
            <param name="ambiguousSymbol">Ambiguous symbol for which the basic symbols is required.</param>
            <param name="basicSymbols">Set of basic symbols belongs to the specified ambiguous symbol.</param>
            <returns>Returns true if the basic symbols are found and returned in basicSymbols parameter, else returns false.</returns>
        </member>
        <member name="M:Bio.IAlphabet.CompareSymbols(System.Byte,System.Byte)">
            <summary>
            Compares two items and specifies whether they are same or not.
            If the any of the bytes (Nucleotides) passed not belongs to
            this alphabet then this method throws an exception.
            TO Address scenarios like, N!=N, M != A etc.
            For the Scenarios like A == a, g == G use IsValidSymbol method.
            </summary>
            <param name="x">First symbol to compare.</param>
            <param name="y">Second symbol to compare.</param>
            <returns>Returns true if x equals y.</returns>
        </member>
        <member name="M:Bio.IAlphabet.ValidateSequence(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Validates if all symbols match with the specified alphabet type.
            </summary>
            <param name="symbols">Symbols to be validated.</param>
            <param name="offset">Offset from where validation should start.</param>
            <param name="length">Number of symbols to validate from the specified offset.</param>
            <returns>True if the validation succeeds, else false.</returns>
        </member>
        <member name="M:Bio.IAlphabet.CheckIsGap(System.Byte)">
            <summary>
            Checks if the provided item is a gap character or not
            </summary>
            <param name="item">Item to be checked</param>
            <returns>True if the specified item is a gap</returns>
        </member>
        <member name="M:Bio.IAlphabet.CheckIsAmbiguous(System.Byte)">
            <summary>
            Checks if the provided item is an ambiguous character or not
            </summary>
            <param name="item">Item to be checked</param>
            <returns>True if the specified item is a ambiguous</returns>
        </member>
        <member name="M:Bio.IAlphabet.GetFriendlyName(System.Byte)">
            <summary>
            Gets the friendly name of a given symbol.
            </summary>
            <param name="item">Symbol to find friendly name.</param>
            <returns>Friendly name of the given symbol.</returns>
        </member>
        <member name="P:Bio.IAlphabet.Name">
            <summary>
            Gets a human readable name for the alphabet. 
            For example "DNA", "RNA", or "Amino Acid".
            </summary>
        </member>
        <member name="P:Bio.IAlphabet.HasGaps">
            <summary>
            Gets a value indicating whether the alphabet has one or more symbols 
            that represent a gap.
            </summary>
        </member>
        <member name="P:Bio.IAlphabet.HasAmbiguity">
            <summary>
            Gets a value indicating whether the alphabet has one or more symbols 
            that represent an ambiguous item (i.e. and item for which it is not 
            precisely known what it represents).
            </summary>
        </member>
        <member name="P:Bio.IAlphabet.HasTerminations">
            <summary>
            Gets a value indicating whether the alphabet has one or more symbols 
            that represent terminal items.
            </summary>
        </member>
        <member name="P:Bio.IAlphabet.IsComplementSupported">
            <summary>
            Gets a value indicating whether this alphabet supports complement or not.
            </summary>
        </member>
        <member name="P:Bio.IAlphabet.Count">
            <summary>
            Gets the count of symbols present in this alphabet.
            This includes basic symbols, gaps, terminations and ambiguous symbols present in this alphabet.
            </summary>
        </member>
        <member name="P:Bio.IAlphabet.Item(System.Int32)">
            <summary>
            Provides array like access to the symbols in this alphabet.
            </summary>
            <param name="index">Index of symbol present in this alphabet.</param>
            <returns>A byte which represents the symbol.</returns>
        </member>
        <member name="F:Bio.DnaAlphabet.basicSymbols">
            <summary>
                Contains only basic symbols including Gap
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.nucleotideValueMap">
            <summary>
                Nucleotide map  -  Maps A to A  and a to A
                that is key will contain unique values.
                This will be used in the IsValidSymbol method to address Scenarios like a == A, G == g etc.
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.friendlyNameMap">
            <summary>
                Symbol to Friendly name mapping.
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.nucleotides">
            <summary>
                Holds the nucleotides present in this DnaAlphabet.
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.basicSymbolsToAmbiguousSymbolMap">
            <summary>
            Mapping from set of symbols to corresponding ambiguous symbol.
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.ambiguousSyToBasicSymbolsMap">
            <summary>
                Mapping from ambiguous symbol to set of basic symbols they represent.
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.symbolToComplementSymbolMap">
            <summary>
                Holds complements.
            </summary>
        </member>
        <member name="M:Bio.DnaAlphabet.#cctor">
            <summary>
                Initializes static members of the DnaAlphabet class.
            </summary>
        </member>
        <member name="M:Bio.DnaAlphabet.#ctor">
            <summary>
                Initializes a new instance of the DnaAlphabet class.
            </summary>
        </member>
        <member name="F:Bio.DnaAlphabet.Instance">
            <summary>
                Static instance of this class.
            </summary>
        </member>
        <member name="M:Bio.DnaAlphabet.GetFriendlyName(System.Byte)">
            <summary>
                Gets the friendly name of a given symbol.
            </summary>
            <param name="item">Symbol to find friendly name.</param>
            <returns>Friendly name of the given symbol.</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.TryGetComplementSymbol(System.Byte,System.Byte@)">
            <summary>
                This method tries to get the complement of this symbol.
            </summary>
            <param name="symbol">Symbol to look up.</param>
            <param name="complementSymbol">Complement  symbol (output).</param>
            <returns>Returns true if found else false.</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.TryGetComplementSymbol(System.Byte[],System.Byte[]@)">
            <summary>
                This method tries to get the complements for specified symbols.
            </summary>
            <param name="symbols">Symbols to look up.</param>
            <param name="complementSymbols">Complement  symbols (output).</param>
            <returns>Returns true if found else false.</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.TryGetDefaultGapSymbol(System.Byte@)">
            <summary>
                Try to get the default gap symbol.
            </summary>
            <param name="defaultGapSymbol">Default gap symbol (output).</param>
            <returns>True if gets else false.</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.TryGetDefaultTerminationSymbol(System.Byte@)">
            <summary>
                Get the termination symbols if present in the alphabet.
            </summary>
            <param name="defaultTerminationSymbol">The default Termination Symbol.</param>
            <returns>True if gets else false.</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.TryGetGapSymbols(System.Collections.Generic.HashSet{System.Byte}@)">
            <summary>
                Get the gap symbols if present in the alphabet.
            </summary>
            <param name="gapSymbols">Hash set of gap Symbols.</param>
            <returns>If Gaps found returns true. </returns>
        </member>
        <member name="M:Bio.DnaAlphabet.TryGetTerminationSymbols(System.Collections.Generic.HashSet{System.Byte}@)">
            <summary>
                Get the termination symbols if present in the alphabet.
            </summary>
            <param name="terminationSymbols">Termination Symbols.</param>
            <returns>True if gets else false.</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.GetValidSymbols">
            <summary>
                Get the valid symbols in the alphabet.
            </summary>
            <returns>True if gets else false.</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.TryGetAmbiguousSymbol(System.Collections.Generic.HashSet{System.Byte},System.Byte@)">
            <summary>
                Get the ambiguous symbols if present in the alphabet.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="ambiguousSymbol">Ambiguous Symbol. </param>
            <returns>True if gets else false.</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.TryGetBasicSymbols(System.Byte,System.Collections.Generic.HashSet{System.Byte}@)">
            <summary>
                Get the basic symbols if present in the alphabet.
            </summary>
            <param name="ambiguousSymbol">The ambiguousSymbol.</param>
            <param name="basicSymbols">The basicSymbols.</param>
            <returns>True if gets else false.</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.CompareSymbols(System.Byte,System.Byte)">
            <summary>
                Compares two symbols.
            </summary>
            <param name="x">The first symbol to compare.</param>
            <param name="y">The second symbol to compare.</param>
            <returns>Returns true if x equals y else false.</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.GetConsensusSymbol(System.Collections.Generic.HashSet{System.Byte})">
            <summary>
                Find the consensus nucleotide for a set of nucleotides.
            </summary>
            <param name="symbols">Set of sequence items.</param>
            <returns>Consensus nucleotide.</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.ValidateSequence(System.Byte[],System.Int64,System.Int64)">
            <summary>
                Validates if all symbols provided are DNA symbols or not.
            </summary>
            <param name="symbols">Symbols to be validated.</param>
            <param name="offset">Offset from where validation should start.</param>
            <param name="length">Number of symbols to validate from the specified offset.</param>
            <returns>True if the validation succeeds, else false.</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.CheckIsGap(System.Byte)">
            <summary>
                Checks if the provided item is a gap character or not
            </summary>
            <param name="item">Item to be checked</param>
            <returns>True if the specified item is a gap</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.CheckIsAmbiguous(System.Byte)">
            <summary>
                Checks if the provided item is an ambiguous character or not
            </summary>
            <param name="item">Item to be checked</param>
            <returns>True if the specified item is a ambiguous</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.GetAmbiguousSymbols">
            <summary>
                Gets the ambiguous symbols present in alphabet.
            </summary>
        </member>
        <member name="M:Bio.DnaAlphabet.GetSymbolValueMap">
            <summary>
                Maps A to A  and a to A
                that is key will contain unique values.
                This will be used in the IsValidSymbol method to address Scenarios like a == A, G == g etc.
            </summary>
        </member>
        <member name="M:Bio.DnaAlphabet.ToString">
            <summary>
                Converts the DNA Alphabets to string.
            </summary>
            <returns>DNA alphabets.</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.GetEnumerator">
            <summary>
                Byte array of nucleotides.
            </summary>
            <returns>Returns the Enumerator for nucleotides list.</returns>
        </member>
        <member name="M:Bio.DnaAlphabet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Creates an IEnumerator of the nucleotides.
            </summary>
        </member>
        <member name="M:Bio.DnaAlphabet.AddNucleotide(System.Byte,System.String,System.Byte[])">
            <summary>
                Add the given nucleotide symbols to this alphabet type.
            </summary>
            <param name="nucleotideValue">The nucleotide Value.</param>
            <param name="friendlyName">User friendly name of the symbol.</param>
            <param name="otherPossibleValues">The other Possible Values.</param>
        </member>
        <member name="M:Bio.DnaAlphabet.MapAmbiguousNucleotide(System.Byte,System.Byte[])">
            <summary>
                Maps the ambiguous nucleotide to the nucleotides it represents.
                For example ambiguous nucleotide M represents the basic nucleotides A or C.
            </summary>
            <param name="ambiguousNucleotide">Ambiguous nucleotide.</param>
            <param name="nucleotidesToMap">Nucleotide represented by ambiguous nucleotide.</param>
        </member>
        <member name="M:Bio.DnaAlphabet.MapComplementNucleotide(System.Byte,System.Byte)">
            <summary>
                Verify whether the nucleotides exist or not.
            </summary>
            <param name="nucleotide">The Nucleotide.</param>
            <param name="complementNucleotide">Complement Nucleotide.</param>
        </member>
        <member name="P:Bio.DnaAlphabet.A">
            <summary>
                Gets A - Adenine.
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.T">
            <summary>
                Gets T - Thymine.
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.G">
            <summary>
                Gets G - Guanine.
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.C">
            <summary>
                Gets C - Cytosine.
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.Gap">
            <summary>
                Gets Default Gap symbol.
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.Name">
            <summary>
                Gets or sets Friendly name for Alphabet type.
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.HasGaps">
            <summary>
                Gets or sets a value indicating whether this alphabet has a gap character.
                This alphabet does have a gap symbol.
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.HasAmbiguity">
            <summary>
                Gets or sets a value indicating whether this alphabet has ambiguous character.
                This alphabet does have ambiguous symbols.
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.HasTerminations">
            <summary>
                Gets or sets a value indicating whether this alphabet has termination character.
                This alphabet does not have termination symbols.
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.IsComplementSupported">
            <summary>
                Gets or sets a value indicating whether this Complement is supported on this Alphabet.
                This alphabet has support for complement.
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.Count">
            <summary>
                Gets count of nucleotides.
            </summary>
        </member>
        <member name="P:Bio.DnaAlphabet.Item(System.Int32)">
            <summary>
                Gets the byte value of item at the given index.
            </summary>
            <param name="index">Index of the item to retrieve.</param>
            <returns>Byte value at the given index.</returns>
        </member>
        <member name="F:Bio.AmbiguousDnaAlphabet.Instance">
            <summary>
            New instance of Ambiguous symbol.
            </summary>
        </member>
        <member name="M:Bio.AmbiguousDnaAlphabet.#cctor">
            <summary>
            Initializes static members of the AmbiguousDnaAlphabet class.
            </summary>
        </member>
        <member name="M:Bio.AmbiguousDnaAlphabet.#ctor">
            <summary>
            Initializes a new instance of the AmbiguousDnaAlphabet class.
            </summary>
        </member>
        <member name="M:Bio.AmbiguousDnaAlphabet.GetConsensusSymbol(System.Collections.Generic.HashSet{System.Byte})">
            <summary>
            Find the consensus nucleotide for a set of nucleotides.
            </summary>
            <param name="symbols">Set of sequence items.</param>
            <returns>Consensus nucleotide.</returns>
        </member>
        <member name="P:Bio.AmbiguousDnaAlphabet.AC">
            <summary>
            Gets Ambiguous symbol A-Adenine C-Cytosine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousDnaAlphabet.GA">
            <summary>
            Gets Ambiguous symbol G-Guanine A-Adenine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousDnaAlphabet.GC">
            <summary>
            Gets Ambiguous symbol G-Guanine C-Cytosine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousDnaAlphabet.AT">
            <summary>
            Gets Ambiguous symbol A-Adenine T-Thymine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousDnaAlphabet.TC">
            <summary>
            Gets Ambiguous symbol T-Thymine C-Cytosine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousDnaAlphabet.GT">
            <summary>
            Gets Ambiguous symbol  G-Guanine T-Thymine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousDnaAlphabet.GCA">
            <summary>
            Gets Ambiguous symbol G-Guanine C-Cytosine A-Adenine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousDnaAlphabet.ACT">
            <summary>
            Gets Ambiguous symbol A-Adenine C-Cytosine T-Thymine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousDnaAlphabet.GAT">
            <summary>
            Gets Ambiguous symbol G-Guanine A-Adenine T-Thymine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousDnaAlphabet.GTC">
            <summary>
            Gets Ambiguous symbol G-Guanine T-Thymine C-Cytosine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousDnaAlphabet.Any">
            <summary>
            Gets Ambiguous symbol Any.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.MUMmer.MummerDnaAlphabet.Instance">
            <summary>
            New instance of Ambiguous symbol.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MummerDnaAlphabet.#ctor">
            <summary>
            Initializes a new instance of the AmbiguousDnaAlphabet class.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MummerDnaAlphabet.ConcatenationChar">
            <summary>
            Gets the Concatenation character
            </summary>
        </member>
        <member name="T:Bio.Algorithms.MUMmer.MummerProteinAlphabet">
            <summary>
            Alphabet for use by MUMmer to support concatenation character '+'
            </summary>
        </member>
        <member name="T:Bio.AmbiguousProteinAlphabet">
            <summary>
            Ambiguous characters in the Protein.
            </summary>
        </member>
        <member name="T:Bio.ProteinAlphabet">
            <summary>
            The basic alphabet that describes symbols used in sequences of amino
            acids that come from codon encodings of RNA. This alphabet allows for
            the twenty amino acids as well as a termination and gap symbol.
            <para>
            The character representations come from the NCBIstdaa standard and
            are used in many sequence file formats. The NCBIstdaa standard has all
            the same characters as NCBIeaa and IUPACaa, but adds Selenocysteine,
            termination, and gap symbols to the latter.
            </para>
            <para>
            The entries in this dictionary are:
            Symbol - Extended Symbol - Name
            A - Ala - Alanine
            C - Cys - Cysteine
            D - Asp - Aspartic Acid
            E - Glu - Glutamic Acid
            F - Phe - Phenylalanine
            G - Gly - Glycine
            H - His - Histidine
            I - Ile - Isoleucine
            K - Lys - Lysine
            L - Leu - Leucine
            M - Met - Methionine
            N - Asn - Asparagine
            O - Pyl - Pyrrolysine
            P - Pro - Proline
            Q - Gln - Glutamine
            R - Arg - Arginine
            S - Ser - Serine
            T - Thr - Threoine
            U - Sel - Selenocysteine
            V - Val - Valine
            W - Trp - Tryptophan
            Y - Tyr - Tyrosine
            * - Ter - Termination
            - - --- - Gap.
            </para>
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.basicSymbols">
            <summary>
            Contains only basic symbols including Gap
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.aminoAcidValueMap">
            <summary>
            Amino acids map  -  Maps A to A  and a to A
            that is key will contain unique values.
            This will be used in the IsValidSymbol method to address Scenarios like a == A, G == g etc.
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.friendlyNameMap">
            <summary>
            Symbol to Friendly name mapping.
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.aminoAcids">
            <summary>
            Holds the amino acids present in this RnaAlphabet.
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.basicSymbolsToAmbiguousSymbolMap">
            <summary>
            Mapping from set of symbols to corresponding ambiguous symbol.
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.ambiguousSyToBasicSymbolsMap">
            <summary>
            Mapping from ambiguous symbol to set of basic symbols they represent.
            </summary>
        </member>
        <member name="M:Bio.ProteinAlphabet.#cctor">
            <summary>
            Initializes static members of the ProteinAlphabet class
            Set up the static instance.
            </summary>
        </member>
        <member name="M:Bio.ProteinAlphabet.#ctor">
            <summary>
            Initializes a new instance of the ProteinAlphabet class.
            </summary>
        </member>
        <member name="F:Bio.ProteinAlphabet.Instance">
            <summary>
            Instance of this class.
            </summary>
        </member>
        <member name="M:Bio.ProteinAlphabet.GetFriendlyName(System.Byte)">
            <summary>
            Gets the friendly name of a given symbol.
            </summary>
            <param name="item">Symbol to find friendly name.</param>
            <returns>Friendly name of the given symbol.</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.TryGetComplementSymbol(System.Byte,System.Byte@)">
            <summary>
            Gets the complement of the symbol.
            </summary>
            <param name="symbol">The protein symbol.</param>
            <param name="complementSymbol">The complement symbol.</param>
            <returns>Returns true if it gets the complements symbol.</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.TryGetComplementSymbol(System.Byte[],System.Byte[]@)">
            <summary>
            This method tries to get the complements for specified symbols.
            </summary>
            <param name="symbols">Symbols to look up.</param>
            <param name="complementSymbols">Complement  symbols (output).</param>
            <returns>Returns true if found else false.</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.TryGetDefaultGapSymbol(System.Byte@)">
            <summary>
            Gets the default Gap symbol.
            </summary>
            <param name="defaultGapSymbol">The default symbol.</param>
            <returns>Returns true if it gets the Default Gap Symbol.</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.TryGetDefaultTerminationSymbol(System.Byte@)">
            <summary>
            Gets the default Termination symbol.
            </summary>
            <param name="defaultTerminationSymbol">The default Termination symbol.</param>
            <returns>Returns true if it gets the  default Termination symbol.</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.TryGetGapSymbols(System.Collections.Generic.HashSet{System.Byte}@)">
            <summary>
            Gets the Gap symbol.
            </summary>
            <param name="gapSymbols">The Gap Symbol.</param>
            <returns>Returns true if it gets the  Gap symbol.</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.TryGetTerminationSymbols(System.Collections.Generic.HashSet{System.Byte}@)">
            <summary>
            Gets the Termination symbol.
            </summary>
            <param name="terminationSymbols">The Termination symbol.</param>
            <returns>Returns true if it gets the Termination symbol.</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.GetValidSymbols">
            <summary>
            Gets the valid symbol.
            </summary>
            <returns>Returns HashSet of valid symbols.</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.GetAmbiguousSymbols">
            <summary>
            Gets the ambigious characters present in alphabet.
            </summary>
        </member>
        <member name="M:Bio.ProteinAlphabet.GetSymbolValueMap">
            <summary>
            Maps A to A  and a to A
            that is key will contain unique values.
            This will be used in the IsValidSymbol method to address Scenarios like a == A, G == g etc.
            </summary>
        </member>
        <member name="M:Bio.ProteinAlphabet.TryGetAmbiguousSymbol(System.Collections.Generic.HashSet{System.Byte},System.Byte@)">
            <summary>
            Gets the Ambiguous symbol.
            </summary>
            <param name="symbols">The symbol.</param>
            <param name="ambiguousSymbol">The Ambiguous symbol.</param>
            <returns>Returns true if it gets the Ambiguous symbol.</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.TryGetBasicSymbols(System.Byte,System.Collections.Generic.HashSet{System.Byte}@)">
            <summary>
            Gets the Basic symbol.
            </summary>
            <param name="ambiguousSymbol">The Ambiguous symbol.</param>
            <param name="basicSymbols">The Basic symbol.</param>
            <returns>Returns true if it gets the Basic symbol.</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.CompareSymbols(System.Byte,System.Byte)">
            <summary>
            Compares two symbols.
            </summary>
            <param name="x">The first symbol to compare.</param>
            <param name="y">The second symbol to compare.</param>
            <returns>Returns true if x equals y else false.</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.GetConsensusSymbol(System.Collections.Generic.HashSet{System.Byte})">
            <summary>
            Find the consensus nucleotide for a set of nucleotides.
            </summary>
            <param name="symbols">Set of sequence items.</param>
            <returns>Consensus nucleotide.</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.ValidateSequence(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Validates if all symbols provided are Protein symbols or not.
            </summary>
            <param name="symbols">Symbols to be validated.</param>
            <param name="offset">Offset from where validation should start.</param>
            <param name="length">Number of symbols to validate from the specified offset.</param>
            <returns>True if the validation succeeds, else false.</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.CheckIsGap(System.Byte)">
            <summary>
            Checks if the provided item is a gap character or not
            </summary>
            <param name="item">Item to be checked</param>
            <returns>True if the specified item is a gap</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.CheckIsAmbiguous(System.Byte)">
            <summary>
            Checks if the provided item is an ambiguous character or not
            </summary>
            <param name="item">Item to be checked</param>
            <returns>True if the specified item is a ambiguous</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.GetEnumerator">
            <summary>
            Byte array of nucleotides.
            </summary>
            <returns>Returns the Enumerator for nucleotides list.</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.ToString">
            <summary>
            Converts the Protein Alphabets to string.
            </summary>
            <returns>Protein alphabets.</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides.
            </summary>
            <returns>Returns Enumerator over alphabet values.</returns>
        </member>
        <member name="M:Bio.ProteinAlphabet.AddAminoAcid(System.Byte,System.String,System.Byte[])">
            <summary>
            Adds a Amino acid to the existing amino acids.
            </summary>
            <param name="aminoAcidValue">Amino acid to be added.</param>
            <param name="friendlyName">User friendly name of the symbol.</param>
            <param name="otherPossibleValues">Maps Capital and small Letters.</param>
        </member>
        <member name="M:Bio.ProteinAlphabet.MapAmbiguousAminoAcid(System.Byte,System.Byte[])">
            <summary>
            Maps the ambiguous amino acids to the amino acids it represents. 
            For example ambiguous amino acids M represents the basic nucleotides A or C.
            </summary>
            <param name="ambiguousAminoAcid">Ambiguous amino acids.</param>
            <param name="aminoAcidsToMap">Nucleotide represented by ambiguous amino acids.</param>
        </member>
        <member name="P:Bio.ProteinAlphabet.A">
            <summary>
            Gets the Alanine Amino acid. 
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.C">
            <summary>
            Gets the Cysteine Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.D">
            <summary>
            Gets the Aspartic Acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.E">
            <summary>
            Gets the Glutamic Acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.F">
            <summary>
            Gets the Phenylalanine Amino acid. 
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.G">
            <summary>
            Gets the Glycine Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.H">
            <summary>
            Gets the Histidine Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.I">
            <summary>
            Gets the Isoleucine Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.K">
            <summary>
            Gets the Lysine Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.L">
            <summary>
            Gets the Leucine Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.M">
            <summary>
            Gets the Methionine Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.N">
            <summary>
            Gets the Asparagine Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.O">
            <summary>
            Gets the Pyrrolysine Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.P">
            <summary>
            Gets the Proline Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.Q">
            <summary>
            Gets the Glutamine Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.R">
            <summary>
            Gets the Arginine Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.S">
            <summary>
            Gets the Serine Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.T">
            <summary>
            Gets the Threoine Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.U">
            <summary>
            Gets the Selenocysteine Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.V">
            <summary>
            Gets the Valine Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.W">
            <summary>
            Gets the Tryptophan Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.Y">
            <summary>
            Gets the Tyrosine Amino acid.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.Gap">
            <summary>
            Gets the Gap character.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.Ter">
            <summary>
            Gets the Termination character.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.Name">
            <summary>
            Gets or sets the name of this alphabet - this is always 'Protein'.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.HasGaps">
            <summary>
            Gets or sets a value indicating whether this alphabet has a gap character.
            This alphabet does have a gap character.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.HasAmbiguity">
            <summary>
            Gets or sets a value indicating whether this alphabet has ambiguous characters.
            This alphabet does have ambiguous characters.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.HasTerminations">
            <summary>
            Gets or sets a value indicating whether this alphabet has termination characters.
            This alphabet does have termination characters.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.IsComplementSupported">
            <summary>
            Gets or sets a value indicating whether complement is supported or not.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.Count">
            <summary>
            Gets count of nucleotides.
            </summary>
        </member>
        <member name="P:Bio.ProteinAlphabet.Item(System.Int32)">
            <summary>
            Gets the byte value of item at the given index.
            </summary>
            <param name="index">Index of the item to retrieve.</param>
            <returns>Byte value at the given index.</returns>
        </member>
        <member name="F:Bio.AmbiguousProteinAlphabet.Instance">
            <summary>
            New instance of Ambiguous character.
            </summary>
        </member>
        <member name="M:Bio.AmbiguousProteinAlphabet.#cctor">
            <summary>
            Initializes static members of the AmbiguousProteinAlphabet class.
            </summary>
        </member>
        <member name="M:Bio.AmbiguousProteinAlphabet.#ctor">
            <summary>
            Initializes a new instance of the AmbiguousProteinAlphabet class.
            </summary>
        </member>
        <member name="M:Bio.AmbiguousProteinAlphabet.GetConsensusSymbol(System.Collections.Generic.HashSet{System.Byte})">
            <summary>
            Find the consensus nucleotide for a set of nucleotides.
            </summary>
            <param name="symbols">Set of sequence items.</param>
            <returns>Consensus nucleotide.</returns>
        </member>
        <member name="P:Bio.AmbiguousProteinAlphabet.X">
            <summary>
            Gets X - Xxx - Undetermined or atypical.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousProteinAlphabet.Z">
            <summary>
            Gets Z - Glx - Glutamic Acid or Glutamine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousProteinAlphabet.B">
            <summary>
            Gets the Aspartic Acid or Asparagine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousProteinAlphabet.J">
            <summary>
            Gets the Leucine or Isoleucine.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.MUMmer.MummerProteinAlphabet.Instance">
            <summary>
            New instance of Ambiguous symbol.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MummerProteinAlphabet.#cctor">
            <summary>
            Initializes static members of the AmbiguousDnaAlphabet class.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MummerProteinAlphabet.#ctor">
            <summary>
            Initializes a new instance of the AmbiguousDnaAlphabet class.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MummerProteinAlphabet.ConcatenationChar">
            <summary>
            Gets the Concatenation character
            </summary>
        </member>
        <member name="T:Bio.Algorithms.MUMmer.MummerRnaAlphabet">
            <summary>
            Alphabet for use by MUMmer to support concatenation character '+'
            </summary>
        </member>
        <member name="T:Bio.AmbiguousRnaAlphabet">
            <summary>
            Ambiguous symbols in the RNA.
            </summary>
        </member>
        <member name="T:Bio.RnaAlphabet">
            <summary>
            The basic alphabet that describes symbols used in RNA sequences.
            This alphabet allows not only for the four base nucleotide symbols,
            but also for various ambiguities, termination, and gap symbols.
            <para>
            The symbol representations come from the NCBI4na standard and
            are used in many sequence file formats. The NCBI4na standard is the
            same as the IUPACna standard with only the addition of the gap
            symbol.
            </para>
            <para>
            The entries in this dictionary are:
            Symbol - Name
            A - Adenine
            C - Cytosine
            M - A or C
            G - Guanine
            R - G or A
            S - G or C
            V - G or V or A
            U - Uracil
            W - A or U
            Y - U or C
            H - A or C or U
            K - G or U
            D - G or A or U
            B - G or U or C
            - - Gap
            N - A or G or U or C.
            </para>
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.basicSymbols">
            <summary>
            Contains only basic symbols including Gap
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.nucleotideValueMap">
            <summary>
            Nucleotide map  -  Maps A to A  and a to A
            that is key will contain unique values.
            This will be used in the IsValidSymbol method to address Scenarios like a == A, G == g etc.
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.friendlyNameMap">
            <summary>
            Symbol to Friendly name mapping.
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.nucleotides">
            <summary>
            Holds the nucleotides present in this DnaAlphabet.
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.basicSymbolsToAmbiguousSymbolMap">
            <summary>
            Mapping from set of symbols to corresponding ambiguous symbol.
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.ambiguousSyToBasicSymbolsMap">
            <summary>
            Mapping from ambiguous symbol to set of basic symbols they represent.
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.symbolToComplementSymbolMap">
            <summary>
            Holds complements.
            </summary>
        </member>
        <member name="M:Bio.RnaAlphabet.#cctor">
            <summary>
            Initializes static members of the RnaAlphabet class.
            </summary>
        </member>
        <member name="M:Bio.RnaAlphabet.#ctor">
            <summary>
            Initializes a new instance of the RnaAlphabet class.
            </summary>
        </member>
        <member name="F:Bio.RnaAlphabet.Instance">
            <summary>
            Static instance of this class.
            </summary>
        </member>
        <member name="M:Bio.RnaAlphabet.GetFriendlyName(System.Byte)">
            <summary>
            Gets the friendly name of a given symbol.
            </summary>
            <param name="item">Symbol to find friendly name.</param>
            <returns>Friendly name of the given symbol.</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.TryGetComplementSymbol(System.Byte,System.Byte@)">
            <summary>
            This method tries to get the complement of this symbol.
            </summary>
            <param name="symbol">Symbol to look up.</param>
            <param name="complementSymbol">Complement  symbol (output).</param>
            <returns>Returns true if found else false.</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.TryGetComplementSymbol(System.Byte[],System.Byte[]@)">
            <summary>
            This method tries to get the complements for specified symbols.
            </summary>
            <param name="symbols">Symbols to look up.</param>
            <param name="complementSymbols">Complement  symbols (output).</param>
            <returns>Returns true if found else false.</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.TryGetDefaultGapSymbol(System.Byte@)">
            <summary>
            Try to get the default gap symbol.
            </summary>
            <param name="defaultGapSymbol">Default gap symbol (output).</param>
            <returns>True if gets else false.</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.TryGetDefaultTerminationSymbol(System.Byte@)">
            <summary>
            Get the termination symbols if present in the alphabet.
            </summary>
            <param name="defaultTerminationSymbol">The default Termination Symbol.</param>
            <returns>True if gets else false.</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.TryGetGapSymbols(System.Collections.Generic.HashSet{System.Byte}@)">
            <summary>
            Get the gap symbols if present in the alphabet.
            </summary>
            <param name="gapSymbols">Hashset of gap Symbols.</param>
            <returns>If Gaps found returns true. </returns>
        </member>
        <member name="M:Bio.RnaAlphabet.TryGetTerminationSymbols(System.Collections.Generic.HashSet{System.Byte}@)">
            <summary>
            Get the termination symbols if present in the alphabet.
            </summary>
            <param name="terminationSymbols">Termination Symbols.</param>
            <returns>True if gets else false.</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.GetValidSymbols">
            <summary>
            Get the valid symbols in the alphabet.
            </summary>
            <returns>True if gets else false.</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.GetAmbiguousSymbols">
            <summary>
            Gets the ambiguous symbols present in alphabet.
            </summary>
        </member>
        <member name="M:Bio.RnaAlphabet.GetSymbolValueMap">
            <summary>
            Maps A to A  and a to A
            that is key will contain unique values.
            This will be used in the IsValidSymbol method to address Scenarios like a == A, G == g etc.
            </summary>
        </member>
        <member name="M:Bio.RnaAlphabet.TryGetAmbiguousSymbol(System.Collections.Generic.HashSet{System.Byte},System.Byte@)">
            <summary>
            Get the ambiguous symbols if present in the alphabet.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="ambiguousSymbol">Ambiguous Symbol. </param>
            <returns>True if gets else false.</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.TryGetBasicSymbols(System.Byte,System.Collections.Generic.HashSet{System.Byte}@)">
            <summary>
            Get the basic symbols if present in the alphabet.
            </summary>
            <param name="ambiguousSymbol">The ambiguousSymbol.</param>
            <param name="basicSymbols">The basicSymbols.</param>
            <returns>True if gets else false.</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.CompareSymbols(System.Byte,System.Byte)">
            <summary>
            Compares two symbols.
            </summary>
            <param name="x">The first symbol to compare.</param>
            <param name="y">The second symbol to compare.</param>
            <returns>Returns true if x equals y else false.</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.GetConsensusSymbol(System.Collections.Generic.HashSet{System.Byte})">
            <summary>
            Find the consensus nucleotide for a set of nucleotides.
            </summary>
            <param name="symbols">Set of sequence items.</param>
            <returns>Consensus nucleotide.</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.ValidateSequence(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Validates if all symbols provided are RNA symbols or not.
            </summary>
            <param name="symbols">Symbols to be validated.</param>
            <param name="offset">Offset from where validation should start.</param>
            <param name="length">Number of symbols to validate from the specified offset.</param>
            <returns>True if the validation succeeds, else false.</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.CheckIsGap(System.Byte)">
            <summary>
            Checks if the provided item is a gap character or not
            </summary>
            <param name="item">Item to be checked</param>
            <returns>True if the specified item is a gap</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.CheckIsAmbiguous(System.Byte)">
            <summary>
            Checks if the provided item is an ambiguous character or not
            </summary>
            <param name="item">Item to be checked</param>
            <returns>True if the specified item is a ambiguous</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.GetEnumerator">
            <summary>
            Byte array of nucleotides.
            </summary>
            <returns>Returns the Enumerator for nucleotides list.</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.ToString">
            <summary>
            Converts the RNA Alphabets.
            </summary>
            <returns>RNA alphabets.</returns>
        </member>
        <member name="M:Bio.RnaAlphabet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides.
            </summary>
        </member>
        <member name="M:Bio.RnaAlphabet.AddNucleotide(System.Byte,System.String,System.Byte[])">
            <summary>
            Verify whether the nucleotide value or other possible values already exist or not.
            </summary>
            <param name="nucleotideValue">The nucleotideValue.</param>
            <param name="friendlyName">User friendly name of the symbol.</param>
            <param name="otherPossibleValues">The otherPosibleValues.</param>
        </member>
        <member name="M:Bio.RnaAlphabet.MapAmbiguousNucleotide(System.Byte,System.Byte[])">
            <summary>
            Maps the ambiguous nucleotide to the nucleotides it represents. 
            For example ambiguous nucleotide M represents the basic nucleotides A or C.
            </summary>
            <param name="ambiguousNucleotide">Ambiguous nucleotide.</param>
            <param name="nucleotidesToMap">Nucleotide represented by ambiguous nucleotide.</param>
        </member>
        <member name="M:Bio.RnaAlphabet.MapComplementNucleotide(System.Byte,System.Byte)">
            <summary>
            Verify whether the nucleotides exist or not.
            </summary>
            <param name="nucleotide">The Nucleotide.</param>
            <param name="complementNucleotide">Complement Nucleotide.</param>
        </member>
        <member name="P:Bio.RnaAlphabet.A">
            <summary>
            Gets A - Adenine.
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.U">
            <summary>
            Gets U - Uracil.
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.G">
            <summary>
            Gets G - Guanine.
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.C">
            <summary>
            Gets C - Cytosine.
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.Gap">
            <summary>
            Gets Default Gap symbol.
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.Name">
            <summary>
            Gets or sets Friendly name for Alphabet type.
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.HasGaps">
            <summary>
            Gets or sets a value indicating whether this alphabet has a gap symbol.
            This alphabet does have a gap symbol.
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.HasAmbiguity">
            <summary>
            Gets or sets a value indicating whether this alphabet has ambiguous symbols.
            This alphabet does have ambiguous symbols.
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.HasTerminations">
            <summary>
            Gets or sets a value indicating whether this alphabet has termination symbols.
            This alphabet does not have termination symbols.
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.IsComplementSupported">
            <summary>
            Gets or sets a value indicating whether this Complement is supported on this Alphabet.
            This alphabet has support for complement.
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.Count">
            <summary>
            Gets count of nucleotides.
            </summary>
        </member>
        <member name="P:Bio.RnaAlphabet.Item(System.Int32)">
            <summary>
            Gets the byte value of item at the given index.
            </summary>
            <param name="index">Index of the item to retrieve.</param>
            <returns>Byte value at the given index.</returns>
        </member>
        <member name="F:Bio.AmbiguousRnaAlphabet.Instance">
            <summary>
            New instance of Ambiguous symbol.
            </summary>
        </member>
        <member name="M:Bio.AmbiguousRnaAlphabet.#cctor">
            <summary>
            Initializes static members of the AmbiguousRnaAlphabet class.
            </summary>
        </member>
        <member name="M:Bio.AmbiguousRnaAlphabet.#ctor">
            <summary>
            Initializes a new instance of the AmbiguousRnaAlphabet class.
            </summary>
        </member>
        <member name="M:Bio.AmbiguousRnaAlphabet.GetConsensusSymbol(System.Collections.Generic.HashSet{System.Byte})">
            <summary>
            Find the consensus nucleotide for a set of nucleotides.
            </summary>
            <param name="symbols">Set of sequence items.</param>
            <returns>Consensus nucleotide.</returns>
        </member>
        <member name="P:Bio.AmbiguousRnaAlphabet.AC">
            <summary>
            Gets Ambiguous symbols A-Adenine C-Cytosine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousRnaAlphabet.GA">
            <summary>
            Gets Ambiguous symbols G-Guanine A-Adenine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousRnaAlphabet.GC">
            <summary>
            Gets Ambiguous symbols G-Guanine C-Cytosine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousRnaAlphabet.AU">
            <summary>
            Gets Ambiguous symbols A-Adenine U-Uracil.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousRnaAlphabet.UC">
            <summary>
            Gets Ambiguous symbols U-Uracil C-Cytosine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousRnaAlphabet.GU">
            <summary>
            Gets Ambiguous symbols  G-Guanine U-Uracil.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousRnaAlphabet.GCA">
            <summary>
            Gets Ambiguous symbols G-Guanine C-Cytosine A-Adenine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousRnaAlphabet.ACU">
            <summary>
            Gets Ambiguous symbols A-Adenine C-Cytosine U-Uracil.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousRnaAlphabet.GAU">
            <summary>
            Gets Ambiguous symbols G-Guanine A-Adenine U-Uracil.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousRnaAlphabet.GUC">
            <summary>
            Gets Ambiguous symbols G-Guanine U-Uracil C-Cytosine.
            </summary>
        </member>
        <member name="P:Bio.AmbiguousRnaAlphabet.Any">
            <summary>
            Gets Ambiguous symbol Any.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.MUMmer.MummerRnaAlphabet.Instance">
            <summary>
            New instance of Ambiguous symbol.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MummerRnaAlphabet.#cctor">
            <summary>
            Initializes static members of the AmbiguousDnaAlphabet class.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.MUMmer.MummerRnaAlphabet.#ctor">
            <summary>
            Initializes a new instance of the AmbiguousDnaAlphabet class.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.MUMmer.MummerRnaAlphabet.ConcatenationChar">
            <summary>
            Gets the Concatenation character
            </summary>
        </member>
        <member name="T:Bio.Algorithms.StringSearch.BoyerMoore">
            <summary>
            Implements IPatternFinder interface.
            This class contains the implementation of Boyer-Moore string search algorithm.
            Reference: http://www-igm.univ-mlv.fr/~lecroq/string/node14.html
            </summary>
        </member>
        <member name="T:Bio.Algorithms.StringSearch.IPatternFinder">
            <summary>
            Interface to be implemented by the class that implement string search algorithm.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.StringSearch.IPatternFinder.FindMatch(Bio.ISequence,System.Collections.Generic.IList{System.String})">
            <summary>
            Find the matches for given searchStrings in sequence and returns
            the matched strings with indices found at.
            </summary>
            <param name="sequence">Input sequence.</param>
            <param name="searchPatterns">Strings to be searched.</param>
            <returns>Matches found in sequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.StringSearch.IPatternFinder.FindMatch(Bio.ISequence,System.String)">
            <summary>
            Find the matches for given searchString in sequence and returns
            the matched strings with indices found at.
            </summary>
            <param name="sequence">Input sequence.</param>
            <param name="searchPattern">Strings to be searched.</param>
            <returns>Matches found in sequence.</returns>
        </member>
        <member name="P:Bio.Algorithms.StringSearch.IPatternFinder.StartIndex">
            <summary>
            Gets or sets the Minimum start index of the match
            </summary>
        </member>
        <member name="P:Bio.Algorithms.StringSearch.IPatternFinder.IgnoreCase">
            <summary>
            Gets or sets the value indicating whether the match is case sensitive
            <remarks>
            Note that symbols in Sequence are always Upper case.
            </remarks>
            </summary>
        </member>
        <member name="F:Bio.Algorithms.StringSearch.BoyerMoore.Wildcard">
            <summary>
            Wildcard character
            </summary>
        </member>
        <member name="M:Bio.Algorithms.StringSearch.BoyerMoore.FindMatch(Bio.ISequence,System.Collections.Generic.IList{System.String})">
            <summary>
            Find the matches for given searchStrings in sequence and returns
            the matched strings with indices found at.
            </summary>
            <param name="sequence">Input sequence.</param>
            <param name="searchPatterns">Strings to be searched.</param>
            <returns>Matches found in sequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.StringSearch.BoyerMoore.FindMatch(Bio.ISequence,System.String)">
            <summary>
            Find the matches for given searchString in sequence and returns
            the matched strings with indices found at.
            </summary>
            <param name="sequence">Input sequence.</param>
            <param name="searchPattern">String to be searched.</param>
            <returns>Matches found in sequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.StringSearch.BoyerMoore.FindMismatchIndex(Bio.ISequence,System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Find the index at which mismatch occurs
            </summary>
            <param name="sequence">Input sequence.</param>
            <param name="searchPattern">String to be searched.</param>
            <param name="foundAt">current Found at index.</param>
            <param name="patternIndex">current positon in Input sequence.</param>
            <param name="patternfoundAt">Current posistion in string to be searched.</param>
        </member>
        <member name="M:Bio.Algorithms.StringSearch.BoyerMoore.GetGoodSuffixShift(System.String)">
            <summary>
            Get the good suffix heuristics. The pattern is shifted by the longest of the 
            two distances that are given by the bad character and the good suffix heuristics.
            </summary>
            <param name="searchString">Input string.</param>
            <returns>List of good suffix shift.</returns>
        </member>
        <member name="M:Bio.Algorithms.StringSearch.BoyerMoore.GetBadCharacterShift(System.String)">
            <summary>
            Get the bad character heuristics. The text symbol that causes a mismatch, 
            occurs somewhere else in the pattern. Then the pattern can be shifted 
            so that it is aligned to this text symbol.
            </summary>
            <param name="searchString">Input string.</param>
            <returns>List of bad character shifts.</returns>
        </member>
        <member name="M:Bio.Algorithms.StringSearch.BoyerMoore.Suffixes(System.String)">
            <summary>
            Get the good suffix from search string
            </summary>
            <param name="searchString">Input string.</param>
            <returns>Good suffixes</returns>
        </member>
        <member name="P:Bio.Algorithms.StringSearch.BoyerMoore.StartIndex">
            <summary>
            Gets or sets the Minimum start index of the match
            </summary>
        </member>
        <member name="P:Bio.Algorithms.StringSearch.BoyerMoore.IgnoreCase">
            <summary>
            Gets or sets the value indicating whether the match is case sensitive
            <remarks>
            Note that symbols in Sequence are always Upper case.
            </remarks>
            </summary>
        </member>
        <member name="T:Bio.Algorithms.SuffixTree.ISuffixTree">
            <summary>
            This interface defines the contract to be implemented by suffix tree class.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.ISuffixTree.SearchMatches(Bio.ISequence)">
            <summary>
            Gets the matches who's length are greater than or equal to the MinLengthOfMatch.
            </summary>
            <param name="searchSequence">Query sequence.</param>
            <returns>Returns IEnumerable of matches.</returns>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.ISuffixTree.SearchMatchesUniqueInReference(Bio.ISequence)">
            <summary>
            Gets the matches unique in reference sequence whos are greater than or equal to the MinLengthOfMatch.
            </summary>
            <param name="searchSequence">Query sequence.</param>
            <returns>Returns IEnumerable of matches.</returns>
        </member>
        <member name="P:Bio.Algorithms.SuffixTree.ISuffixTree.Name">
            <summary>
            Gets the Name of the suffix tree.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.SuffixTree.ISuffixTree.Sequence">
            <summary>
            Gets sequence of Suffix Tree.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.SuffixTree.ISuffixTree.MinLengthOfMatch">
            <summary>
            Gets or sets Minimum length of match required.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.SuffixTree.ISuffixTree.NoAmbiguity">
            <summary>
            Gets or sets a value indicating whether to match
            basic symbols only by ignoring the ambiguous symbols or not.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.SuffixTree.Match">
            <summary>
            Structure to hold the match information.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.Match.Length">
            <summary>
            Gets or sets the length of match.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.Match.ReferenceSequenceOffset">
            <summary>
            Gets or sets the start index of this match in reference sequence.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.Match.QuerySequenceOffset">
            <summary>
            Gets or sets start index of this match in query sequence.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.Match.ToString">
            <summary>
            Converts RefStart, QueryStart, Length of Match to string.
            </summary>
            <returns>RefStart, QueryStart, Length.</returns>
        </member>
        <member name="T:Bio.Algorithms.SuffixTree.MatchExtension">
            <summary>
            Maximum Unique Match Class.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MatchExtension.Length">
            <summary>
            Gets or sets the length of match.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MatchExtension.ReferenceSequenceOffset">
            <summary>
            Gets or sets the start index of this match in reference sequence.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MatchExtension.QuerySequenceOffset">
            <summary>
            Gets or sets start index of this match in query sequence.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MatchExtension.ReferenceSequenceMumOrder">
            <summary>
            Gets or sets Sequence one's MaxUniqueMatch order. 
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MatchExtension.QuerySequenceMumOrder">
            <summary>
            Gets or sets Sequence Two's MaxUniqueMatch order.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MatchExtension.Query">
            <summary>
            Gets or sets the Query sequence.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MatchExtension.ID">
            <summary>
            Gets or sets cluster Identifier.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MatchExtension.IsGood">
            <summary>
            Gets or sets a value indicating whether MUM is Good candidate.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MatchExtension.IsTentative">
            <summary>
            Gets or sets a value indicating whether MUM is Tentative candidate.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MatchExtension.Score">
            <summary>
            Gets or sets score of MUM.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MatchExtension.Adjacent">
            <summary>
            Gets or sets offset to adjacent MUM.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MatchExtension.From">
            <summary>
            Gets or sets From (index representing the previous MUM to form LIS) of MUM.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MatchExtension.WrapScore">
            <summary>
            Gets or sets wrap score.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MatchExtension.#ctor">
            <summary>
            Initializes a new instance of the MaxUniqueMatchExtension class
            </summary>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MatchExtension.#ctor(Bio.Algorithms.SuffixTree.Match)">
            <summary>
            Initializes a new instance of the MaxUniqueMatchExtension class
            </summary>
            <param name="mum">Maximum Unique Match</param>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MatchExtension.CopyTo(Bio.Algorithms.SuffixTree.MatchExtension)">
            <summary>
            Copy the content to MUM.
            </summary>
            <param name="match">Maximum unique match.</param>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MatchExtension.ToString">
            <summary>
            Converts RefStart, QueryStart, Length, Score, WrapScore, IsGood of MatchExtension to string.
            </summary>
            <returns>RefStart, QueryStart, Length, Score, WrapScore, IsGood.</returns>
        </member>
        <member name="T:Bio.Algorithms.SuffixTree.MultiWaySuffixEdge">
            <summary>
            Structure to hold the suffix edge information.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MultiWaySuffixEdge.StartIndex">
            <summary>
            Gets or sets index of first symbol of this edge.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MultiWaySuffixEdge.Children">
            <summary>
            Holds child edges.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MultiWaySuffixEdge.SuffixLink">
            <summary>
            Holds suffix links.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MultiWaySuffixEdge.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the MultiWaySuffixEdge struct.
            </summary>
            <param name="startIndex">Index of first symbol of the edge.</param>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MultiWaySuffixEdge.GetEndIndex(System.Int64)">
            <summary>
            Gets or sets index of last character.
            </summary>
            <param name="sequenceLength">Length of the sequence for which 
            the suffix tree is created.</param>
            <returns>Returns endIndex of this edge.</returns>
        </member>
        <member name="P:Bio.Algorithms.SuffixTree.MultiWaySuffixEdge.IsLeaf">
            <summary>
            Gets a value indicating whether the edge is at the leaf.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.SuffixTree.MultiWaySuffixTree">
            <summary>
                Represents an in-memory suffix tree.
                This implementation of ISuffix tree only works with Sequence class.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.TerminatingSymbol">
            <summary>
                Character ($) used as terminating symbol for Suffix Tree.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.referenceSequence">
            <summary>
                Holds the reference sequence.
                This will be converted using SymbolValueMap of the alphabet for the performance.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.supportedBaseAlphabet">
            <summary>
                Base alphabet supported by this instance of suffix tree.
                This property depends on the reference sequence.
                For example: if the reference sequence's alphabet is
                AmbiguousDna then Dna and its all derivatives classes are supported.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.uniqueSymbolsInReference">
            <summary>
                Holds the unique symbols present in the reference sequence with their start index.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.uniqueSymbolsStartIndexes">
            <summary>
                Holds the start index of the symbols in uniqueSymbolsInReference set.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.symbolsCount">
            <summary>
                Holds number of symbols in reference sequence.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.edgesCount">
            <summary>
                Holds number of edges present in the suffix tree.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.rootEdge">
            <summary>
                Gets or sets the root node (edge) in suffix tree.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.#ctor(Bio.ISequence)">
            <summary>
                Initializes a new instance of the MultiWaySuffixTree class with the specified sequence.
            </summary>
            <param name="sequence">Sequence to build the suffix tree.</param>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.SearchMatchesUniqueInReference(Bio.ISequence)">
            <summary>
                Gets the matches unique in reference sequence where length is greater than or equal to the MinLengthOfMatch.
            </summary>
            <param name="searchSequence">Sequence to search.</param>
            <returns>Returns IEnumerable of matches.</returns>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.SearchMatches(Bio.ISequence)">
            <summary>
                Gets the matches where length is greater than or equal to the MinLengthOfMatch.
            </summary>
            <param name="searchSequence">Query sequence to search.</param>
            <returns>Returns IEnumerable of matches.</returns>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.ProcessQuerySequence(Bio.ISequence,System.Boolean)">
            <summary>
                Converts any alias symbols in specified query sequence to its base representation to improve the searching time.
                For example, 'a' to 'A' in case of DNASequence.
                If noambiguity is set then all ambiguous symbols in the sequence are converted to '0'.
            </summary>
            <param name="searchSequence">Query sequence to process.</param>
            <param name="noambiguity">Flag to specify whether to consider ambiguous symbols or not.</param>
            <returns>Returns the processed sequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.DepthFirstIterativeTraversal(Bio.Algorithms.SuffixTree.MultiWaySuffixEdge,System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
                Traverse the suffix tree from the specified Edge and updates the startIndexes list.
            </summary>
            <param name="current">Edge to start traversing from.</param>
            <param name="length">Length of the edge for which the startIndexes are needed.</param>
            <param name="startIndexes">List containing the start indexes.</param>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.BuildSuffixTree">
            <summary>
                Builds the suffix tree.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.GetIntermediateEdges(Bio.Algorithms.SuffixTree.MultiWaySuffixEdge,Bio.Algorithms.SuffixTree.MultiWaySuffixEdge,System.Int64,System.Int64,System.Int64,Bio.ISequence,System.Int64)">
            <summary>
                Gets the intermediate edges present in the path of the match between specified edges for the next query index to
                match.
            </summary>
            <param name="fromEdge">Edge from the which to search from.</param>
            <param name="toedge">Edge where to stop the search.</param>
            <param name="matchLengthOfFromEdge">Matching symbols count of the fromEdge.</param>
            <param name="lengthToSearch">Length to search.</param>
            <param name="nextQueryIndex">Next query index.</param>
            <param name="convertedSearchSeq">Converted search sequence.</param>
            <param name="minLengthOfMatch">Minimum length of match required.</param>
            <returns>Returns the intermediate edges found between the fromEdge to toEdge.</returns>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.UpdateSuffixLinks">
            <summary>
                Updates the suffix links for the suffix tree.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.UpdateSuffixLinkForChildOfRoot(System.Int32)">
            <summary>
                Updates the suffix links for the children of the root.
            </summary>
            <param name="childIndex">Child index of the root to update.</param>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.UpdateSuffixLinkForEdge(Bio.Algorithms.SuffixTree.MultiWaySuffixEdge,System.Int32)">
            <summary>
                Updates the suffix link of a child edge of specified edge.
            </summary>
            <param name="parenetEdge">Parent edge.</param>
            <param name="childIndex">Index of the child to update.</param>
        </member>
        <member name="M:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.ValidateMatch(System.Int64,System.Int64,System.Int64,Bio.Util.SortedList{System.Int64,System.Collections.Generic.Dictionary{System.Int64,Bio.Util.SortedList{System.Int64,System.Collections.Generic.SortedSet{System.Int64}}}},Bio.Algorithms.SuffixTree.Match@)">
            <summary>
                Validates whether new match is an exact sub match with any of the previous matches if not then returns the match in
                out param.
            </summary>
            <param name="queryIndex">Query index</param>
            <param name="referenceIndex">Reference index</param>
            <param name="matchLength">Match length</param>
            <param name="previousMatches">Previous matches</param>
            <param name="match">New match</param>
            <returns>Returns true if the new match is not an exact sub match with any of the previous matches, else returns false</returns>
        </member>
        <member name="P:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.EdgesCount">
            <summary>
                Gets total number of edges in this suffix tree.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.Name">
            <summary>
                Gets Name of the suffix tree.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.Sequence">
            <summary>
                Gets Sequence used to build the suffix tree.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.MinLengthOfMatch">
            <summary>
                Gets or sets Minimum length of match required.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.NoAmbiguity">
            <summary>
                Gets or sets a value indicating whether it Matches basic symbols only.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.EdgesFound">
            <summary>
                Structure to hold the edge and length of match.
                Used in the MaxMatch.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.EdgesFound.Edge">
            <summary>
                Edge which contains the symbols which matches the query sequence.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.EdgesFound.LengthOfMatch">
            <summary>
                Length of the symbols from the root.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.EdgesFound.StartIndexesFromPreviousMatchPathEdge">
            <summary>
                Holds the strat indexes of the edge in the previous match path.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.EdgesToLink">
            <summary>
                Structure to hold Edges to link.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.EdgesToLink.ChildIndex">
            <summary>
                Index of child to link.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.SuffixTree.MultiWaySuffixTree.EdgesToLink.ParentEdge">
            <summary>
                Parent edge.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Translation.Codons">
            <summary>
            A class which stores a table of mappings from triplets of RNA nucleotides
            to Amino Acids. This mapping comes from the standard Axiom of Genetics
            triplet rule. This class provides the basic lookup functionality from the
            codons. The ProteinTranslation class provides methods for translating
            whole RNA sequences.
            In order to perform mapping from DNA, it is suggested that you first
            use the Transcription class to create the RNA sequence
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Translation.Codons.CodonMap">
            <summary>
            The mapping dictionary.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Translation.Codons.Lookup(System.Byte,System.Byte,System.Byte)">
            <summary>
            Lookup an amino acid based on a triplet of nucleotides. U U U for instance
            will result in Phenylalanine.
            </summary>
            <param name="n1">The first character.</param>
            <param name="n2">The second character.</param>
            <param name="n3">The third character.</param>
            <returns>The mapped RNA.</returns>
        </member>
        <member name="M:Bio.Algorithms.Translation.Codons.TryLookup(System.Byte,System.Byte,System.Byte,System.Byte@)">
            <summary>
            Lookup an amino acid based on a triplet of nucleotides. U U U for instance
            will result in Phenylalanine.  If the values cannot be
            found in the lookup table, <c>false</c> will be returned.
            </summary>
            <param name="n1">The first character.</param>
            <param name="n2">The second character.</param>
            <param name="n3">The third character.</param>
            <param name="aminoAcid">Mapped RNA value</param>
            <returns>True/False if the value exists</returns>
        </member>
        <member name="M:Bio.Algorithms.Translation.Codons.Lookup(Bio.ISequence,System.Int32)">
            <summary>
            Lookup an amino acid within a sequence starting a certain offset.
            </summary>
            <param name="sequence">The source sequence to lookup from.</param>
            <param name="offset">
            The offset within the sequence from which to look at the next three
            nucleotides. Note that this offset begins its count at zero. Thus
            looking at a sequence described by "AUGGCG" and using a offset of 0
            would lookup the amino acid for codon "AUG" while using a offset of 1
            would lookup the amino acid for codon "UGG".
            </param>
            <returns>An amino acid from the protein alphabet</returns>
        </member>
        <member name="M:Bio.Algorithms.Translation.Codons.TryLookup(Bio.ISequence,System.Int32,System.Byte@)">
            <summary>
            Tries to lookup an amino acid within a sequence starting a certain offset.
            </summary>
            <param name="sequence">The source sequence to lookup from.</param>
            <param name="offset">
            The offset within the sequence from which to look at the next three
            nucleotides. Note that this offset begins its count at zero. Thus
            looking at a sequence described by "AUGGCG" and using a offset of 0
            would lookup the amino acid for codon "AUG" while using a offset of 1
            would lookup the amino acid for codon "UGG".
            </param>
            <param name="aminoAcid">An amino acid from the protein alphabet</param>
            <returns><c>true</c>, if the triplet of nucleotides could
            be mapped, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Bio.Algorithms.Translation.Codons.#cctor">
            <summary>
            Initializes the Codon map dictionary.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Translation.ProteinTranslation">
            <summary>
            Provides the means of translating an RNA sequence into an Protein
            sequence of amino acids.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Translation.ProteinTranslation.Translate(Bio.ISequence)">
            <summary>
            Translates the RNA sequence passed in as source into a Protein
            sequence of amino acids. Works on the entire source sequence
            starting from the first triplet of nucleotides.
            </summary>
            <param name="source">The source sequence which needs to be translated.</param>
            <returns>The translated sequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.Translation.ProteinTranslation.Translate(Bio.ISequence,System.Int32)">
            <summary>
            Translates the RNA sequence passed in as a source into a Protein
            sequence of amino acids. Allows the setting of a particular index
            into the source sequence for the start of translation.
            For instance if you wanted to translate all the phases of an RNA
            sequence you could perform the following:
            Sequence rnaSeq = new Sequence(Alphabets.RNA), "AUGCGCCCG");
            Sequence phase1 = ProteinTranslation.Translate(rnaSeq, 0);
            Sequence phase2 = ProteinTranslation.Translate(rnaSeq, 1);
            Sequence phase3 = ProteinTranslation.Translate(rnaSeq, 2);
            </summary>
            <param name="source">The source RNA sequence to translate from</param>
            <param name="nucleotideOffset">
            An offset into the source sequence from which to begin translation.
            Note that this offset begins counting from 0. Set this parameter to
            0 to translate the entire source sequence. Set it to 1 to ignore the
            first nucleotide in the source sequence, etc.
            </param>
            <returns>The translated sequence.</returns>
        </member>
        <member name="T:Bio.Algorithms.Translation.Transcription">
            <summary>
            Provides basic nucleotide transcription across DNA and RNA sequences.
            Static methods in the class provide lookup for single nucleotide
            complements as well as creating RNA (transcription) or DNA (reverse
            transcription) from a DNA or RNA sequence, respectively.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Translation.Transcription.dnaToRna">
            <summary>
            The DNA to RNA mapping dictionary.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Translation.Transcription.rnaToDna">
            <summary>
            The RNA to DNA mapping dictionary.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Translation.Transcription.GetRnaComplement(System.Byte)">
            <summary>
            Returns the complement nucleotide from DNA to RNA. This also
            respects ambiguous characters in the DNA and RNA alphabet.
            </summary>
            <param name="dnaSource">The DNA source.</param>
            <returns>The complement RNA character.</returns>
        </member>
        <member name="M:Bio.Algorithms.Translation.Transcription.GetDnaComplement(System.Byte)">
            <summary>
            Returns the complement nucleotide from RNA to DNA. This also
            respects ambiguous characters in the DNA and RNA alphabet.
            </summary>
            <param name="rnaSource">The RNA source.</param>
            <returns>The complement DNA character.</returns>
        </member>
        <member name="M:Bio.Algorithms.Translation.Transcription.Transcribe(Bio.ISequence)">
            <summary>
            Transcribes a DNA sequence into an RNA sequence. The length
            of the resulting sequence will equal the length of the source
            sequence. Gap and ambiguous characters will also be transcribed.
            For example:
            Sequence dna = new Sequence(Alphabets.DNA, "TACCGC");
            Sequence rna = Transcription.Transcribe(dna);
            rna.ToString() would produce "AUGGCG"
            </summary>
            <param name="dnaSource">The dna source sequence to be transcribed.</param>
            <returns>The transcribed RNA sequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.Translation.Transcription.ReverseTranscribe(Bio.ISequence)">
            <summary>
            Does reverse transcription from an RNA sequence into an DNA sequence.
            The length of the resulting sequence will equal the length of the source
            sequence. Gap and ambiguous characters will also be transcribed.
            For example:
            Sequence rna = new Sequence(Alphabets.RNA, "UACCGC");
            Sequence dna = Transcription.ReverseTranscribe(rna);
            dna.ToString() would produce "ATGGCG"
            </summary>
            <param name="rnaSource">The RNA source sequence to be reverse transcribed.</param>
            <returns>The reverse transcribed DNA sequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.Translation.Transcription.#cctor">
            <summary>
            Initializes the transcription dictionary.
            </summary>
        </member>
        <member name="T:Bio.Alphabets">
            <summary>
            The currently supported and built-in alphabets for sequence items.
            </summary>
        </member>
        <member name="F:Bio.Alphabets.DNA">
            <summary>
            The DNA alphabet.
            </summary>
        </member>
        <member name="F:Bio.Alphabets.RNA">
            <summary>
            The RNA alphabet.
            </summary>
        </member>
        <member name="F:Bio.Alphabets.Protein">
            <summary>
            The protein alphabet consisting of amino acids.
            </summary>
        </member>
        <member name="F:Bio.Alphabets.AmbiguousDNA">
            <summary>
            The Ambiguous DNA alphabet.
            </summary>
        </member>
        <member name="F:Bio.Alphabets.AmbiguousRNA">
            <summary>
            The Ambiguous RNA alphabet.
            </summary>
        </member>
        <member name="F:Bio.Alphabets.AmbiguousProtein">
            <summary>
            The Ambiguous protein alphabet consisting of amino acids.
            </summary>
        </member>
        <member name="F:Bio.Alphabets.AlphabetToBaseAlphabetMap">
            <summary>
            Mapping between an alphabet type and its corresponding base alphabet type.
            </summary>
        </member>
        <member name="F:Bio.Alphabets.AmbiguousAlphabetMap">
            <summary>
            Mapping between an alphabet type and its corresponding ambiguous alphabet type.
            </summary>
        </member>
        <member name="F:Bio.Alphabets.KnownAlphabets">
            <summary>
            List of all supported Alphabets.
            </summary>
        </member>
        <member name="F:Bio.Alphabets.AlphabetPriorityList">
            <summary>
            List of alphabet instances according to their priority in auto detection
            Auto detection starts from top of the list.
            </summary>
        </member>
        <member name="M:Bio.Alphabets.#cctor">
            <summary>
            Initializes static members of the Alphabets class.
            </summary>
        </member>
        <member name="M:Bio.Alphabets.GetAmbiguousAlphabet(Bio.IAlphabet)">
            <summary>
            Gets the ambiguous alphabet
            </summary>
            <param name="currentAlphabet">Alphabet to validate</param>
            <returns></returns>
        </member>
        <member name="M:Bio.Alphabets.CheckIsFromSameBase(Bio.IAlphabet,Bio.IAlphabet)">
            <summary>
            Verifies if two given alphabets comes from the same base alphabet.
            </summary>
            <param name="alphabetA">First alphabet to compare.</param>
            <param name="alphabetB">Second alphabet to compare.</param>
            <returns>True if both alphabets comes from the same base class.</returns>
        </member>
        <member name="M:Bio.Alphabets.AutoDetectAlphabet(System.Byte[],System.Int64,System.Int64,Bio.IAlphabet)">
            <summary>
            This methods loops through supported alphabet types and tries to identify
            the best alphabet type for the given symbols.
            </summary>
            <param name="symbols">Symbols on which auto detection should be performed.</param>
            <param name="offset">Offset from which the auto detection should start.</param>
            <param name="length">Number of symbols to process from the offset position.</param>
            <param name="identifiedAlphabetType">In case the symbols passed are a sub set of a bigger sequence, 
            provide the already identified alphabet type of the sequence.</param>
            <returns>Returns the detected alphabet type or null if detection fails.</returns>
        </member>
        <member name="M:Bio.Alphabets.MapAlphabetToBaseAlphabet(Bio.IAlphabet,Bio.IAlphabet)">
            <summary>
            Maps the alphabet to its base alphabet.
            For example: AmbiguousDnaAlphabet to DnaAlphabet
            </summary>
            <param name="alphabet">Alphabet to map.</param>
            <param name="baseAlphabet">Base alphabet to map.</param>
        </member>
        <member name="M:Bio.Alphabets.MapAlphabetToAmbiguousAlphabet(Bio.IAlphabet,Bio.IAlphabet)">
            <summary>
            Maps the alphabet to its ambiguous alphabet.
            For example: DnaAlphabet to AmbiguousDnaAlphabet.
            </summary>
            <param name="alphabet">Alphabet to map.</param>
            <param name="ambiguousAlphabet">Ambiguous alphabet to map.</param>
        </member>
        <member name="M:Bio.Alphabets.GetAlphabets">
            <summary>
            Gets all registered alphabets in core folder and addins (optional) folders.
            </summary>
            <returns>List of registered alphabets.</returns>
        </member>
        <member name="P:Bio.Alphabets.All">
            <summary>
             Gets the list of all Alphabets which are supported by the framework.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler">
            <summary>
            Implements a comparative genome assembly for
            assembly of DNA sequences.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.kmerLength">
            <summary>
            K-mer Length.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.#ctor">
            <summary>
             Initializes a new instance of the ComparativeGenomeAssembler class.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.Assemble(System.Collections.Generic.IEnumerable{Bio.ISequence},Bio.Util.FastASequencePositionParser)">
            <summary>
            Assemble the input sequences into the largest possible contigs. 
            </summary>
            <param name="referenceSequence">The sequence used as backbone for assembly.</param>
            <param name="queryParser">The parser to load the sequences to assemble.</param>
            <returns>IComparativeAssembly instance which contains list of assembled sequences.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.WriteDelta(System.Collections.Generic.IEnumerable{Bio.Algorithms.Alignment.DeltaAlignment},System.IO.Stream)">
            <summary>
            Writes delta for query sequences.
            </summary>
            <param name="deltaAlignments">Delta alignments to write.</param>
            <param name="outputStream">Temp stream to write to.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.WriteUnsortedDelta(System.Collections.Generic.IEnumerable{Bio.Algorithms.Alignment.DeltaAlignment},Bio.Util.DeltaAlignmentSorter,System.IO.Stream)">
            <summary>
            Writes delta for query sequences.
            </summary>
            <param name="delta">The Deltas.</param>
            <param name="sorter">Sorter instance.</param>
            <param name="outputStream">Output file name.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.WriteSortedDelta(Bio.Util.DeltaAlignmentSorter,System.IO.Stream,Bio.Util.FastASequencePositionParser,System.IO.Stream)">
            <summary>
            Writes delta for query sequences.
            </summary>
            <param name="sorter">Sorter instance.</param>
            <param name="unsortedDeltaStream">Unsorted Delta Filename.</param>
            <param name="queryParser">Query/read sequences parser.</param>
            <param name="outputStream">Output file name.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.LayoutRefinment(Bio.Util.DeltaAlignmentCollection)">
            <summary>
            Refines layout of alignment between reads and reference genome by taking care of indels and rearrangements.
            </summary>
            <param name="deltaAlignmentCollection">Ordered Repeat Resolved Deltas.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.RepeatResolution(Bio.Util.DeltaAlignmentCollection)">
            <summary>
            Reads ambiguously placed due to genomic reads.
            This step requires mate pair information to resolve the ambiguity about placements of repeated sequences.
            </summary>
            <param name="deltaAlignmentCollection">Alignment between reference genome and reads.</param>
            <returns>List of DeltaAlignments after resolving repeating reads.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.ScaffoldsGenerator(System.Collections.Generic.IEnumerable{Bio.ISequence},System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Build scaffolds from contigs and paired reads (uses Padena Step 6 for assembly).
            </summary>
            <param name="contigs">List of contigs.</param>
            <param name="reads">List of paired reads.</param>
            <returns>List of scaffold sequences.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.ConsensusGenerator(Bio.Util.DeltaAlignmentCollection)">
            <summary>
            Generates a consensus sequence for the genomic region covered by reads.
            </summary>
            <param name="deltaAlignmentCollection">Alignment between reference genome and reads.</param>
            <returns>List of contigs.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.ReadAlignment(System.Collections.Generic.IEnumerable{Bio.ISequence},System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Aligns reads to reference genome using NUCmer.
            </summary>
            <param name="referenceSequence">Sequence of reference genome.</param>
            <param name="reads">List of sequence reads.</param>
            <returns>Delta alignments after read alignment.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.RaiseStatusEvent(System.String)">
            <summary>
            Raises status event.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.StatusEventStart(System.String)">
            <summary>
            Raises status changed event with Step started status message.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.StatusEventEnd(System.String)">
            <summary>
            Raises status changed event with Step ended status message.
            </summary>
        </member>
        <member name="E:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.StatusChanged">
            <summary>
            Provides the status to the subscribers.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.KmerLength">
            <summary>
            Gets or sets the kmer length.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.AllowKmerLengthEstimation">
            <summary>
            Gets or sets a value indicating whether to estimate kmer length.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.ScaffoldRedundancy">
            <summary>
            Gets or sets value of redundancy for building scaffolds.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.ScaffoldingEnabled">
            <summary>
            Gets or sets a value indicating whether to run scaffolding step or not.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.Depth">
            <summary>
            Gets or sets the Depth for graph traversal in scaffold builder step.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.Name">
            <summary>
            Gets the name of the sequence assembly algorithm being
            implemented. This is intended to give the
            developer some information of the current sequence assembly algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.Description">
            <summary>
            Gets the description of the sequence assembly algorithm being
            implemented. This is intended to give the
            developer some information of the current sequence assembly algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.LengthOfMum">
            <summary>
            Gets or sets the length of MUM for using with NUCmer.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.BreakLength">
            <summary>
            Gets or sets number of bases to be extended before stopping alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.FixedSeparation">
            <summary>
            Gets or sets maximum fixed diagonal difference.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.MaximumSeparation">
            <summary>
            Gets or sets maximum separation between the adjacent matches in clusters.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.MinimumScore">
            <summary>
            Gets or sets minimum output score.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Comparative.ComparativeGenomeAssembler.SeparationFactor">
            <summary>
            Gets or sets separation factor. Fraction equal to 
            (diagonal difference / match separation) where higher values
            increase the insertion or deletion (indel) tolerance
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Comparative.ConsensusGeneration">
            <summary>
            Generates consensus of alignment (contigs) from alignment layout. 
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.ConsensusGeneration.GenerateConsensus(Bio.Util.DeltaAlignmentCollection)">
            <summary>
            Generates consensus sequences from alignment layout.
            </summary>
            <param name="alignmentBetweenReferenceAndReads">Input list of reads.</param>
            <returns>List of contigs.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.ConsensusGeneration.GetSequenceFromDelta(Bio.Algorithms.Alignment.DeltaAlignment)">
            <summary>
            Gets the error removed sequence from the delta.
            </summary>
            <param name="deltaAlignment">DeltaAlignment instance.</param>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Comparative.LayoutRefiner">
            <summary>
            Class Layout Refiner.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.LayoutRefiner.RefineLayout(Bio.Util.DeltaAlignmentCollection)">
            <summary>
            Refines alignment layout by taking in consideration indels (insertions and deletions) and rearrangements between two genomes. 
            Requires mate-pair information to resolve ambiguity.
            </summary>
            <param name="orderedDeltas">Order deltas.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.LayoutRefiner.ExtendDeltas(System.Collections.Generic.List{Bio.Algorithms.Alignment.DeltaAlignment},System.Collections.Generic.List{Bio.Algorithms.Alignment.DeltaAlignment})">
            <summary>
            Extended Deltas.
            </summary>
            <param name="leftSideDeltas">Left Side Deltas.</param>
            <param name="rightSideDeltas">Right Side Deltas.</param>
            <returns>Returns Extend Deltas.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.LayoutRefiner.FindMaxOverlap(System.Collections.Generic.List{System.Byte},System.Collections.Generic.List{System.Byte})">
            <summary>
            Find Max Overlap.
            </summary>
            <param name="leftExtension">Left Extension.</param>
            <param name="rightExtension">Right Extension.</param>
            <returns>Returns Max overLap.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.LayoutRefiner.FindLargestAndSecondLargest(System.Int32[],System.Byte@,System.Byte@)">
            <summary>
            Find Largest And SecondLargest.
            </summary>
            <param name="values">Set of Values.</param>
            <param name="indexLargest">Out param largest index.</param>
            <param name="indexSecond">Out param Second largest index.</param>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Comparative.LayoutRefiner.VirtualDeltaAlignmentCollection">
            <summary>
            Virtual DeltaAlingment collection.
            Holds 1000 times the windows size.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.LayoutRefiner.VirtualDeltaAlignmentCollection.#ctor(Bio.Util.DeltaAlignmentCollection,System.Int32)">
            <summary>
            Initializes a new instance of the VirtualDeltaAlignmentCollection class.
            </summary>
            <param name="orderedDeltas"></param>
            <param name="windowSize"></param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.LayoutRefiner.VirtualDeltaAlignmentCollection.TryUnload(System.Int64,System.Collections.Generic.List{Bio.Algorithms.Alignment.DeltaAlignment}@)">
            <summary>
            Trys to unload the delta alignments from the cache.
            </summary>
            <param name="index">index at which current operations are taking place.
            This is required to judge whether to unload a window of delta alignment or not.</param>
            <param name="unloadedDeltas">If this method succeeded then unloaded deltas are passed back in this parameter.</param>
            <returns>Returns true if a cache window is unloaded else false.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.LayoutRefiner.VirtualDeltaAlignmentCollection.GetCachedDeltas">
            <summary>
            Gets the cached deltas.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.LayoutRefiner.VirtualDeltaAlignmentCollection.Unload">
            <summary>
            Unloads a cache window.
            </summary>
            <returns>Returns unloaded deltas.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.LayoutRefiner.VirtualDeltaAlignmentCollection.LoadNextWindow">
            <summary>
            Loads a window a deltas to the cache.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Comparative.LayoutRefiner.VirtualDeltaAlignmentCollection.Count">
            <summary>
            Gets the number of delta alignments present in this instance.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Comparative.LayoutRefiner.VirtualDeltaAlignmentCollection.Item(System.Int64)">
            <summary>
            Gets the delta alignment present at specified index.
            </summary>
            <param name="index">Index of the delta alignment required.</param>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Comparative.RepeatResolver">
            <summary>
            Reads ambiguously placed due to genomic reads.
            This step requires mate pair information to resolve the ambiguity about placements of repeated sequences.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.RepeatResolver.ResolveAmbiguity(Bio.Util.DeltaAlignmentCollection)">
            <summary>
            Reads ambiguously placed due to genomic reads.
            This step requires mate pair information to resolve the ambiguity about placements of repeated sequences.
            </summary>
            <param name="alignmentBetweenReferenceAndReads">Alignment between reference genome and reads.</param>
            <returns>List of DeltaAlignments after resolving repeating reads.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Comparative.RepeatResolver.ResolveRepeatUsingMatePair(System.Collections.Generic.List{Bio.Algorithms.Alignment.DeltaAlignment},System.Collections.Generic.List{Bio.Algorithms.Alignment.DeltaAlignment},System.String)">
            <summary>
            Resolve repeats between two sets of deltas coming from paired reads
            </summary>
            <param name="curReadDeltas">Deltas from a read</param>
            <param name="mateDeltas">Deltas from mate pair</param>
            <param name="libraryName">Clone Library name to use</param>
            <returns>Selected delta out of all given deltas</returns>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Contig">
            <summary>
            Contig is a data storage object representing a set of sequences
            that have been assembled into a new, longer sequence.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Contig.sequences">
            <summary>
            Assembled sequences.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Contig.ToString">
            <summary>
            Converts Consensus Sequence data to string.
            </summary>
            <returns>Consensus Sequence Data.</returns>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Contig.Sequences">
            <summary>
            Gets or sets the set of sequences that have been assembled to form the contig.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Contig.Consensus">
            <summary>
            Gets or sets a sequence derived from the input sequences as assembled, representing the
            contents of the whole range of the contig.
            <remarks>
            This is built by an IConsensusMethod.
            </remarks>
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Contig.Length">
            <summary>
            Gets the length of the contig equals the length of its consensus.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Contig.AssembledSequence">
            <summary>
            A sequence, as it has been located into the contig. This includes
            possible reversal, complementation, or both.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Contig.AssembledSequence.Sequence">
            <summary>
            Gets or sets the sequence, as possibly modified (via gap insertion) by
            the overlap algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Contig.AssembledSequence.Position">
            <summary>
            Gets or sets the offset from the start of the contig where this sequence begins.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Contig.AssembledSequence.IsComplemented">
            <summary>
            Gets or sets a value indicating whether the sequence was complemented in order to find sufficient overlap.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Contig.AssembledSequence.IsReversed">
            <summary>
            Gets or sets a value indicating whether the orientation of the sequence was reversed in order to find
            sufficient overlap.
            <remarks>
            If the assembly algorithm used AssumeStandardOrientation=true, then IsReversed
            and IsComplemented will both be true (reverse complement) or both be false.
            </remarks>
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Contig.AssembledSequence.ReadPosition">
            <summary>
            Gets or sets the position of the Read in alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Contig.AssembledSequence.Length">
            <summary>
            Gets or sets the length of alignment between read and contig.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Graph.BinaryTreeOfDebrujinNodes">
            <summary>
            A Binary Search Tree for Debruijin Nodes
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Graph.BinaryTreeOfDebrujinNodes._root">
            <summary>
            Holds Root node.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.BinaryTreeOfDebrujinNodes.AddOrReturnCurrent(Bio.Algorithms.Kmer.KmerData32)">
            <summary>
            Tries to add specified value to the BinaryTree.
            If the value is already present in the tree then this method returns the value already in the tree.
            Useful when two values that are equal by comparison are not equal by reference.
            </summary>
            <param name="value">Value to add.</param>
            <returns>Returns the value added or already in the tree, else returns false.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.BinaryTreeOfDebrujinNodes.MakeNewNode(Bio.Algorithms.Kmer.KmerData32)">
            <summary>
            Makes a new DeBruijinNode for a kmer, ignores orientation
            </summary>
            <param name="value">Kmer to make node with</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.BinaryTreeOfDebrujinNodes.SearchTree(Bio.Algorithms.Kmer.KmerData32)">
            <summary>
                Searches for a particular node in the tree.
            </summary>
            <param name="kmerValue">The node to be searched.</param>
            <returns>Actual node in the tree.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.BinaryTreeOfDebrujinNodes.GetNodes">
            <summary>
                Gets all nodes in tree.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.BinaryTreeOfDebrujinNodes.Count">
            <summary>
            Gets number of elements present in the BinaryTree.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Graph.DeBruijnEdge">
            <summary>
            Represents an edge in the de bruijn graph.
            Stores orientation (same or opposite) and whether the edge is valid.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnEdge.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DeBruijnEdge class.
            </summary>
            <param name="isSameOrientation">Orientation of edge.</param>
            <param name="isValid">Indicates if this is a valid edge.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnEdge.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DeBruijnEdge class.
            Creates a 'valid' edge by default.
            </summary>
            <param name="orientation">Orientation of edge.</param>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnEdge.IsSameOrientation">
            <summary>
            Gets or sets a value indicating whether orientation of edge is same or opposite.
            If two connected nodes have overlapping sequence, the orientation is 
            true (same orientation). If sequence of one overlaps with the reverse-complement 
            of other's sequence, the orientation is false (opposite orientation).
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnEdge.IsValid">
            <summary>
            Gets or sets a value indicating whether this is a valid edge.
            Used to temporarily remove edges from graph.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Graph.DeBruijnGraph">
            <summary>
            Representation of a De Bruijn Graph.
            Graph is encoded as a collection of de Bruijn nodes.
            The nodes themselves hold the adjacency information.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Graph.DeBruijnGraph._nodeCount">
            <summary>
            Holds node count.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Graph.DeBruijnGraph._nodes">
            <summary>
            Collection of nodes in the graph.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Graph.DeBruijnGraph._nodesNeedCompacting">
            <summary>
            Flag to indicate if the node collection should be compacted
            must be set whenever nodes are deleted;
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Graph.DeBruijnGraph._processedSequencesCount">
            <summary>
            Holds the number of input sequences processed while building graph.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Graph.DeBruijnGraph._skippedSequencesCount">
            <summary>
            Holds number of sequences skipped while building graph.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the DeBruijnGraph class.
            </summary>
            <param name="kmerLength">Length of the kmer.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.ValidateGraph(Bio.Algorithms.Assembly.Graph.DeBruijnGraph)">
            <summary>
            Validate input graph.
            Throws exception if graph is null.
            </summary>
            <param name="graph">Input graph.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.Build(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Build graph nodes and edges from list of k-mers.
            Creates a node for every unique k-mer (and reverse-complement) 
            in the read. Then, generates adjacency information between nodes 
            by computing pairs of nodes that have overlapping regions 
            between node sequences.
            </summary>
            <param name="sequences">List of input sequences.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.GetNodes">
            <summary>
            Gets the nodes present in this graph.
            Nodes marked for delete are not returned.
            </summary>
            <returns>The list of all available nodes in the graph.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.GetUnvisitedNodes">
            <summary>
            Return all nodes in the array with the visit flag set to false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.SetNodeVisitState(System.Boolean)">
            <summary>
            Change the VisitFlag of all nodes in the graph
            </summary>
            <param name="stateToSet">Visited or Not?</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.GetNodeSequence(Bio.Algorithms.Assembly.Graph.DeBruijnNode)">
            <summary>
            Gets the sequence from the specified node.
            </summary>
            <param name="node">DeBruijn node.</param>
            <returns>Returns an instance of sequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.RemoveNodes(System.Collections.Generic.IEnumerable{Bio.Algorithms.Assembly.Graph.DeBruijnNode})">
            <summary>
            Remove all nodes in input list from graph.
            </summary>
            <param name="nodesToRemove">Nodes to be removed.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.RemoveMarkedNodes">
            <summary>
            Removes the nodes which are marked for delete.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.GetNextSymbolFrom(Bio.Algorithms.Assembly.Graph.DeBruijnNode,System.Boolean,System.Boolean)">
            <summary>
            Gets the last or first symbol in the node depending on the isForwardDirection flag is true or false.
            If the isSameOrientation flag is false then symbol will be taken from the ReverseComplement of the kmer data.
            </summary>
            <param name="node">DeBruijn node.</param>
            <param name="isForwardDirection">Flag to indicate whether the node is in forward direction or not.</param>
            <param name="isSameOrientation">Flag to indicate the orientation.</param>
            <returns>Byte represnting the symbol.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.GenerateLinks(Bio.Algorithms.Assembly.Graph.KmerDictionary)">
            <summary>
            Adds the links between the nodes of the graph.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.RemoveDeletedNodesFromArray">
            <summary>
            Cleans out the deleted nodes from the array
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.CompactDeletedNodesFromList">
            <summary>
            Compact the node list by removing deleted nodes
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.CompactDeletedNodesFromBigList">
            <summary>
            Compact the node list by removing deleted nodes
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.GetMarkedNodes">
            <summary>
            Gets the nodes present in this graph.
            Nodes marked for delete are not returned.
            </summary>
            <returns>List of DeBruin node that are maked for deletion.</returns>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.NodeCount">
            <summary>
            Gets or sets the number of nodes available in the graph.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.KmerLength">
            <summary>
            Gets the kmerlength of the graph.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.ProcessedSequencesCount">
            <summary>
            Gets number of sequences processed while building the graph.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.SkippedSequencesCount">
            <summary>
            Gets number of sequences skipped from the input sequences.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.GraphBuildCompleted">
            <summary>
            Gets a value indicating that whether the graph is built or not.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnGraph.LinkGenerationCompleted">
            <summary>
            Gets a value indicating that whether the Link generating is completed or not.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Graph.DeBruijnNode">
            <summary>
            Represents a node in the De Bruijn graph
            A node is associated with a k-mer. 
            Also holds adjacency information with other nodes.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Graph.DeBruijnNode._nodeInfo">
            <summary>
            Holds a flag to indicate whether this node is deleted or not.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Graph.DeBruijnNode._nodeOperations">
            <summary>
            Holds the value of validextension required, is node marked for deletion , right extension count and left extension count
            in 8, 7, 4 to 6 and 1 to 3 bits respectively.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Graph.DeBruijnNode._nodeOrientation">
            <summary>
            Stores the node orientation.
            First 4 bits Forward links orientation, next 4 bits reverse links orientation (from Right to Left).
            If bit values are 1 then same orientation. If bit values are 0 then orientation is different.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Graph.DeBruijnNode._validNodeExtensions">
            <summary>
            Stores the valid Node extensions
            First 4 bits Forward links orientation, next 4 bits reverse links orientation (from Right to Left).
            If bit values are 0 then valid extension. If bit values are 1 then not a valid extension.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.#ctor(Bio.Algorithms.Kmer.KmerData32,System.Byte)">
            <summary>
            Initializes a new instance of the DeBruijnNode class.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.MarkLeftExtensionAsInvalid(Bio.Algorithms.Assembly.Graph.DeBruijnNode)">
            <summary>
            Marks the LeftExtensions of the current node as invalid.
            </summary>
            <param name="node">Debruijn node which matches one of the left extensions of the current node.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.MarkRightExtensionAsInvalid(Bio.Algorithms.Assembly.Graph.DeBruijnNode)">
            <summary>
            Marks the RightExtensions of the current node as invalid.
            </summary>
            <param name="node">Debruijn node which matches one of the right extensions of the current node.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.RemoveMarkedExtensions">
            <summary>
            Deletes the extension nodes those are marked for deletion.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.SetExtensionNode(System.Boolean,System.Boolean,Bio.Algorithms.Assembly.Graph.DeBruijnNode)">
            <summary>
            Sets the extension nodes of the current node.
            </summary>
            <param name="isForwardDirection">True indicates Right extension and false indicates left extension.</param>
            <param name="sameOrientation">Orientation of the connecting edge.</param>
            <param name="extensionNode">Node to which the extension is to be set.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.GetExtensionNodes">
            <summary>
            Returns all the left extension and right extension nodes of the current node.
            </summary>
            <returns>Left extension and right extension nodes.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.GetRightExtensionNodesWithOrientation">
            <summary>
            Retrives the list of right extension nodes along with the orientation.
            </summary>
            <returns>Dictionary with the right extension node and the orientation.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.GetLeftExtensionNodesWithOrientation">
            <summary>
            Retrives the list of left extension nodes along with the orientation.
            </summary>
            <returns>Dictionary with the left extension node and the orientation.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.RemoveExtensionThreadSafe(Bio.Algorithms.Assembly.Graph.DeBruijnNode)">
            <summary>
            Removes edge corresponding to the node from appropriate data structure,
            after checking whether given node is part of left or right extensions.
            Thread-safe method.
            </summary>
            <param name="node">Node for which extension is to be removed.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.GetLeftExtensionNodes">
            <summary>
            Retrieves all the Left extension nodes of the current node.
            </summary>
            <returns>Right extension nodes.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.GetRightExtensionNodes">
            <summary>
            Retrieves all the Right extension nodes of the current node.
            </summary>
            <returns>Right extension nodes.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.ComputeValidExtensions">
            <summary>
            Sets whether valid extensions are required or not.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.UndoAmbiguousExtensions">
            <summary>
            Deletes all the extension marked for deletion and sets the node extensions as valid.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.PurgeInvalidExtensions">
            <summary>
            Removes all the invalid extensions permanently.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.MarkNodeForDelete">
            <summary>
            Marks the node for deletion.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.MarkExtensionInvalid(Bio.Algorithms.Assembly.Graph.DeBruijnNode)">
            <summary>
            Makes extension edge corresponding to the node invalid,
            after checking whether given node is part of left or right extensions.
            Not Thread-safe. Use lock at caller if required.
            </summary>
            <param name="node">Node for which extension is to be made invalid.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.GetOriginalSymbols(System.Int32)">
            <summary>
            Gets the original symbols.
            </summary>
            <param name="kmerLength">Length of the kmer.</param>
            <returns>Return the decompressed kmer data.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.GetReverseComplementOfOriginalSymbols(System.Int32)">
            <summary>
            Gets the reverse complement of original symbols.
            </summary>
            <param name="kmerLength">Length of the kmer.</param>
            <returns>Returns the reverse complement of the current node value.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnNode.IsPalindrome(System.Int32)">
            <summary>
            Checks whether the node value (kmer data) is palindrome or not.
            </summary>
            <returns>True if the node value is palindrome otherwise false.</returns>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.ORIGINAL_SYMBOLS">
            <summary>
            
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.NodeValue">
            <summary>
            Gets or sets the value of an DeBrujinNode.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.KmerCount">
            <summary>
            Gets or sets the number of duplicate kmers in the DeBrujin graph.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.Left">
            <summary>
            Gets or sets the Left node, used by binary tree.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.Right">
            <summary>
            Gets or sets the Right Node, used by binary tree.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.IsMarkedForDelete">
            <summary>
            Gets a value indicating whether the node is marked for deletion or not.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.IsDeleted">
            <summary>
            Gets or sets a value indicating whether this node is deleted or not.
            Note: As we are only periodically not deleting any nodes from the Tree, this flag helps to
            identify which nodes are deleted. 
            
            TODO: Ensure this variable cannot be modified without modifying the parent graphs node count
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.IsVisited">
            <summary>
            A flag that can be used to determine if the node has been visited 
            during a specific step
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.ExtensionsCount">
            <summary>
            Gets the number of extension nodes.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.RightExtensionNodesCount">
            <summary>
            Gets or sets the number of right extension nodes.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.LeftExtensionNodesCount">
            <summary>
            Gets or sets the number of left extension nodes.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.ValidExtensionsRequried">
            <summary>
            Gets or sets a value indicating whether node has valid extension or not.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.RightExtension0">
            <summary>
            Gets or sets the RightExtension node for dna symbol 'A'.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.RightExtension1">
            <summary>
            Gets or sets the RightExtension node for dna symbol 'C'.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.RightExtension2">
            <summary>
            Gets or sets the RightExtension node for dna symbol 'G'.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.RightExtension3">
            <summary>
            Gets or sets the RightExtension node for dna symbol 'T'.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.LeftExtension0">
            <summary>
            Gets or sets the Left Extension node for dna symbol 'A'.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.LeftExtension1">
            <summary>
            Gets or sets the Left Extension node for dna symbol 'C'.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.LeftExtension2">
            <summary>
            Gets or sets the Left Extension node for dna symbol 'G'.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnNode.LeftExtension3">
            <summary>
            Gets or sets the Left Extension node for dna symbol 'T'.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Graph.DeBruijnPath">
            <summary>
            Represents a path in De Bruijn graph.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Graph.DeBruijnPath.path">
            <summary>
            List of node in De Bruijn graph path.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnPath.#ctor">
            <summary>
            Initializes a new instance of the DeBruijnPath class.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnPath.#ctor(System.Collections.Generic.IEnumerable{Bio.Algorithms.Assembly.Graph.DeBruijnNode})">
            <summary>
            Initializes a new instance of the DeBruijnPath class with specified nodes.
            </summary>
            <param name="nodes">List of nodes.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnPath.#ctor(Bio.Algorithms.Assembly.Graph.DeBruijnNode)">
            <summary>
            Initializes a new instance of the DeBruijnPath class with specified node.
            </summary>
            <param name="node">Graph node.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnPath.RemoveAll(System.Predicate{Bio.Algorithms.Assembly.Graph.DeBruijnNode})">
            <summary>
            Removes all nodes from path that match the given predicate.
            </summary>
            <param name="predicate">Predicate to remove nodes.</param>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnPath.PathNodes">
            <summary>
            Gets the list of nodes in path.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Graph.DeBruijnPathList">
            <summary>
            Class representing the list of paths in de bruijn graph.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Graph.DeBruijnPathList.paths">
            <summary>
            List of paths.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnPathList.#ctor">
            <summary>
            Initializes a new instance of the DeBruijnPathList class.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnPathList.#ctor(System.Collections.Generic.IEnumerable{Bio.Algorithms.Assembly.Graph.DeBruijnPath})">
            <summary>
            Initializes a new instance of the DeBruijnPathList class.
            Adds elements in input enumerable type to list.
            </summary>
            <param name="paths">List of paths.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.DeBruijnPathList.AddPaths(System.Collections.Generic.IList{Bio.Algorithms.Assembly.Graph.DeBruijnPath})">
            <summary>
            Add the given list of paths to local variable.
            </summary>
            <param name="pathsList">List of paths to add.</param>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.DeBruijnPathList.Paths">
            <summary>
            Gets list of paths.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Graph.Edge`1">
            <summary>
            Edge class.
            In case of Directed graph, VertexId1 is the tail and VertexId2 is the head of the edge.
            </summary>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Edge`1.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the Edge class.
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Edge`1.Id">
            <summary>
            Gets Id of the Edge.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Edge`1.Data">
            <summary>
            Gets or sets the Data.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Edge`1.VertexId1">
            <summary>
            First vertex id.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Edge`1.VertexId2">
            <summary>
            Second vertex id.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Graph.Graph`2">
            <summary>
            Graph data structure.
            </summary>
            <typeparam name="T">Type of data to store in Vertex.</typeparam>
            <typeparam name="U">Type of data to store in edge.</typeparam>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Graph`2.#ctor">
            <summary>
            Constructor to create an instance of graph.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Graph`2.GetVertices">
            <summary>
            Gets existing nodes.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Graph`2.GetEdges">
            <summary>
            Gets existing nodes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Graph`2.DeleteVertex(Bio.Algorithms.Assembly.Graph.Vertex{`0})">
            <summary>
            Deletes the node.
            Note this will not delete associated edges.
            </summary>
            <param name="node">Vertex to be deleted.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Graph`2.DeleteVertex(System.Int64)">
            <summary>
            Deletes the node.
            Note this will not delete associated edges.
            </summary>
            <param name="vertexId">Id of the vertex to be deleted.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Graph`2.AddVertex(`0)">
            <summary>
            Adds a new vertex to the graph.
            </summary>
            <param name="vertexData">Data to store in new vertex.</param>
            <returns>New vertex.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Graph`2.AddEdge(`1,System.Int64,System.Int64)">
            <summary>
            Adds new edges to the graph which connects two vertices.
            Note: this method will not validate the present of vertex1 and vertex2 in the graph.
            </summary>
            <param name="edgeData">Data to store in new edge.</param>
            <param name="vertexId1">Id of the Vertex1.</param>
            <param name="vertexId2">Id of the Vertex2</param>
            <returns>New Edge.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Graph`2.DeleteEdge(System.Int64)">
            <summary>
            Deletes the edge.
            </summary>
            <param name="edgeId"></param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Graph`2.GetAdjacentVertices(Bio.Algorithms.Assembly.Graph.Vertex{`0})">
            <summary>
            Gets the vertices adjacent to given vertex.
            </summary>
            <param name="vertex">Vertex.</param>
            <returns>Enumerable of vertices adjacent to given vertex.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Graph`2.IsAdjacent(Bio.Algorithms.Assembly.Graph.Vertex{`0},Bio.Algorithms.Assembly.Graph.Vertex{`0})">
            <summary>
            Verifies if two vertices are adjacent to each other or not.
            </summary>
            <param name="vertex1">Vertex1</param>
            <param name="vertex2">Vertex2</param>
            <returns>Returns true if vertices are adjacent to each other else false.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Graph`2.GetVertex(System.Int64)">
            <summary>
            Gets the vertex for the specified vertexid.
            </summary>
            <param name="vertexId">Vertex id.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Graph`2.GetEdge(System.Int64)">
            <summary>
            Gets the Edge for the specified edgeid.
            </summary>
            <param name="edgeId">Edge id.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Graph`2.GetEdge(System.Int64,System.Int64)">
            <summary>
            Gets the edge containing vertexid1 and vertexid2.
            </summary>
            <param name="vertexId1">First vertex id</param>
            <param name="vertexId2">Second vertex id.</param>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Graph`2.VertexArray">
            <summary>
            Holds Vertices present in the graph.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Graph`2.EdgeArray">
            <summary>
            Holds edges present in the graph.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Graph`2.DeletedVertexCount">
            <summary>
            Deleted vertices count.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Graph`2.DeletedEdgeCount">
            <summary>
            Deleted edges count.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Graph`2.VertexCount">
            <summary>
            # of vertices present in the graph excluding deleted vertices.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Graph`2.EdgeCount">
            <summary>
            No of edges present in the graph excluding deleted edges.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Graph`2.TotalVertexCount">
            <summary>
            Total no of vertices in the graph Including deleted vertices.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Graph`2.TotalEdgeCount">
            <summary>
            Total no of edges in the graph Including deleted edges.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Graph.KmerDictionary">
            <summary>
            Implements a thread safe K-mer dictionary (12 &lt; k &lt; 31) for storing values associated with ulong k-mers.
            Backend is an array of binary search trees
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Graph.KmerDictionary.HashLength">
            <summary>
            How many bits of the ulong to use to decide which bucket is inserted where?
            Also determines the number of buckets as 2^hashLength,
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Graph.KmerDictionary._buckets">
            <summary>
            Each bucket stores a Tree that can be searched.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Graph.KmerDictionary._hashingMask">
            <summary>
            Mask to hash off higher bits which can be used to get the bucket assignment of a k-mer
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.KmerDictionary.#ctor">
            <summary>
            Creates a new dictionary to store and search for deBruijin Nodes
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.KmerDictionary.SetNewOrGetOld(Bio.Algorithms.Kmer.KmerData32)">
            <summary>
            Either returns the DeBrujin node associated with the ulong, or
            sets it if an old one does not exist
            Parallel Note: Is thread safe
            </summary>
            <returns>The node representing this value</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.KmerDictionary.GetNodes">
            <summary>
            Enumerate through tree returning an array while removing references to left/right children
            so they can become available to GC if not otherwise referenced.
            </summary>
            <returns>Set of nodes</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.KmerDictionary.TryGetOld(Bio.Algorithms.Kmer.KmerData32)">
            <summary>
            Returns a node for a given k-mer
            </summary>
            <param name="kmer">The kmer</param>
            <returns>true if the item has previously been assigned a serial number; otherwise, false.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.KmerDictionary.AssignBucket(Bio.Algorithms.Kmer.KmerData32)">
            <summary>
            Assign a k-mer encoded as a ulong to a bucket
            </summary>
            <param name="value">kmer value</param>
            <returns>bucket index</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.KmerDictionary.GenerateNodeArray">
            <summary>
            Converts the nodes in the kmer manager into an array
            in order to improve performance and simultaneously destroys tree data structure.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.KmerDictionary.NodeCount">
            <summary>
            Number of kmers in the dictionary
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Graph.Vertex`1">
            <summary>
            Vertex class.
            Stores incoming and outgoing edges to improve the performance.
            </summary>
            <typeparam name="T">Type of data to store in vertex.</typeparam>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Vertex`1.#ctor(System.Int64)">
            <summary>
            Initializes an instance of Vertex class with specified id.
            </summary>
            <param name="id">Id for new Vertex.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Vertex`1.#ctor(System.Int64,`0)">
            <summary>
            Initializes an instance of Vertex class with specified id and data.
            </summary>
            <param name="id">Id for new Vertex.</param>
            <param name="data">Data to store in new Vertex.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Vertex`1.AddIncomingEdge(System.Int64)">
            <summary>
            Adds specified edge id to incoming edges list.
            </summary>
            <param name="edgeID">Edge id to add.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Vertex`1.AddOutgoingEdge(System.Int64)">
            <summary>
            Adds specified edge id to outgoing edge list.
            </summary>
            <param name="edgeId">Edge id to add.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Vertex`1.RemoveFromIncomingEdge(System.Int64)">
            <summary>
            Searches for the specified edge id in incoming edge list and if found 
            removes it from the incoming edge list.
            </summary>
            <param name="edgeID">Edge id to remove.</param>
            <returns>Returns true if edge id found and successfully removed from the incoming list, else returns false.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Vertex`1.RemoveFromOutgoingEdge(System.Int64)">
            <summary>
            Searches for the specified edge id in outgoing edge list and if found 
            removes it from the outgoing edge list.
            </summary>
            <param name="edgeId">Edge id to remove.</param>
            <returns>Returns true if edge id found and successfully removed from the outgoing list, else returns false.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Vertex`1.ReplaceIncomingEdge(System.Int64,System.Int64)">
            <summary>
            Searches for the oldEdgeId in incoming edge list of the Vertex, if found replaces it with the newEdgeId.
            </summary>
            <param name="oldEdgeId">Old edge id to search.</param>
            <param name="newEdgeId">New edge id to replace with old edge id.</param>
            <returns>Returns true if the oldEdgeId found and replaced with newEdgeid, else returns false.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Vertex`1.ReplaceOutgoingEdge(System.Int64,System.Int64)">
            <summary>
            Searches for the oldEdgeId in outgoing edge list of the Vertex, if found replaces it with the newEdgeId.
            </summary>
            <param name="oldEdgeId">Old edge id to search.</param>
            <param name="newEdgeId">New edge id to replace with old edge id.</param>
            <returns>Returns true if the oldEdgeId found and replaced with newEdgeid, else returns false.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Vertex`1.ReplaceIncomingEdge(System.Int32,System.Int64)">
            <summary>
            Replaces the edge id at specified index of incoming edge list of the Vertex with the specified edgeid.
            </summary>
            <param name="index">Zero baced index of incoming edge list.</param>
            <param name="edgeId">Edge id to replace with.</param>
            <returns>Returns true if the index is valid and replaced with edgeId, else returns false.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Vertex`1.ReplaceOutgoingEdge(System.Int32,System.Int64)">
            <summary>
            Replaces the edge id at specified index of outgoing edge list of the Vertex with the specified edgeid.
            </summary>
            <param name="index">Zero baced index of outgoing edge list.</param>
            <param name="edgeId">Edge id to replace with.</param>
            <returns>Returns true if the index is valid and replaced with edgeId, else returns false.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Vertex`1.ClearAllEdges">
            <summary>
            Removes all edges from incoming and outgoing edge list of the Vertex.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Vertex`1.ClearIncomingEdges">
            <summary>
            Removes all edges from incoming edge list of the Vertex.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Vertex`1.ClearOutgoingEdges">
            <summary>
            Removes all edges from outgoing edge list of the Vertex.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Vertex`1.GetIncomingEdge(System.Int32)">
            <summary>
            Gets the incoming edge id present in specified index of incoming edge list in the Vertex.
            </summary>
            <param name="index">Index of the incoming edge list.</param>
            <returns>Returns Edgeid if the index is valid, else returns -1.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Graph.Vertex`1.GetOutgoingEdge(System.Int32)">
            <summary>
            Gets the outgoing edge id present in specified index of outgoing edge list in the Vertex.
            </summary>
            <param name="index">Index of the outgoing edge list.</param>
            <returns>Returns Edgeid if the index is valid, else returns -1.</returns>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Vertex`1.Id">
            <summary>
            Gets the id of the Vertex.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Vertex`1.Data">
            <summary>
            Gets or sets the data of the Vertex.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Vertex`1.IncomingEdges">
            <summary>
            Holds Incoming edges.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Vertex`1.OutgoingEdges">
            <summary>
            Holds outgoing edges.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Vertex`1.IncomingEdgeCount">
            <summary>
            Gets incoming edge count.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Graph.Vertex`1.OutgoingEdgeCount">
            <summary>
            Gets outgoing edge count.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.IDeBruijnDeNovoAssembler">
            <summary>
            Representation of any sequence assembly algorithm.
            This interface defines contract for classes implementing 
            De Bruijn graph based De Novo Sequence assembler.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.IDeNovoAssembler">
            <summary>
            Representation of any sequence assembly algorithm.
            This interface defines contract for classes implementing De Novo Sequence assembler.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.IDeNovoAssembler.Assemble(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Assemble the input sequences into the largest possible contigs. 
            </summary>
            <param name="inputSequences">The sequences to assemble.</param>
            <returns>IDeNovoAssembly instance which contains list of 
            assembled sequences.</returns>
        </member>
        <member name="P:Bio.Algorithms.Assembly.IDeNovoAssembler.Name">
            <summary>
            Gets the name of the sequence assembly algorithm being
            implemented. This is intended to give the
            developer some information of the current sequence assembly algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.IDeNovoAssembler.Description">
            <summary>
            Gets the description of the sequence assembly algorithm being
            implemented. This is intended to give the
            developer some information of the current sequence assembly algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.IDeBruijnDeNovoAssembler.KmerLength">
            <summary>
            Gets or sets the kmer length.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.IDeBruijnDeNovoAssembler.Graph">
            <summary>
            Gets the assembler de-bruijn graph.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.IDeBruijnDeNovoAssembly">
            <summary>
            An IDeBruijnDeNovoAssembly is the result of running De Bruijn graph based 
            De Novo Assembly on a set of sequences. 
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.IDeNovoAssembly">
            <summary>
            An IDeNovoAssembly is the result of running De Novo Assembly on a set of two or more sequences. 
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.IDeNovoAssembly.AssembledSequences">
            <summary>
            Gets list of sequences created after Assembly.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.IDeNovoAssembly.Documentation">
            <summary>
            Gets or sets the Documentation object is intended for tracking the history, provenance,
            and experimental context of a IDeNovoAssembly. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.IDeBruijnDeNovoAssembly.ContigSequences">
            <summary>
            Gets list of contig sequences created by assembler.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.IDeBruijnDeNovoAssembly.Scaffolds">
            <summary>
            Gets the list of assembler scaffolds.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.IMatePairMapper">
            <summary>
            Map Reads to Mate Pairs
            Interface can be implemented by classes which map reads to mate pairs
            in another input formats.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.IMatePairMapper.Map(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Map Reads to mate pairs.
            </summary>
            <param name="reads">List of reads.</param>
            <returns>List of mate pairs.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.IMatePairMapper.MapContigToMatePairs(System.Collections.Generic.IEnumerable{Bio.ISequence},Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMap)">
            <summary>
            Finds contig pairs having valid mate pairs connection between them.
            </summary>
            <param name="reads">Input list of reads.</param>
            <param name="alignment">Reads con alignment.</param>
            <returns>Contig Mate pair map.</returns>
        </member>
        <member name="T:Bio.Algorithms.Assembly.IOverlapDeNovoAssembler">
            <summary>
            Representation of any sequence assembly algorithm.
            This interface defines contract for classes implementing 
            overlap based De Novo Sequence assembler.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.IOverlapDeNovoAssembler.MergeThreshold">
            <summary>
            Gets or sets Threshold that determines how much overlap is needed 
            for two sequences to be merged. The score from the overlap algorithm 
            must at least equal Threshold for a merge to occur.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.IOverlapDeNovoAssembler.AssumeStandardOrientation">
            <summary>
            Gets or sets a value indicating whether standard orientation is assumed.
            if true, assume that the input sequences are in 5'-to-3' orientation.
            This means that only normal and reverse-complement overlaps need to be tested.
            if false, need to try both orientations for overlaps.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.IOverlapDeNovoAssembler.OverlapAlgorithm">
            <summary>
            Gets or sets the pairwise sequence aligner that will be used to compute overlap during assembly.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.IOverlapDeNovoAssembler.ConsensusResolver">
            <summary>
            Gets or sets the method that will be used to compute a contig's consensus during assembly.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.IOverlapDeNovoAssembly">
            <summary>
            An IOverlapDeNovoAssembly is the result of running 
            Overlap based De Novo Assembly on a set of two or more sequences. 
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.IOverlapDeNovoAssembly.Contigs">
            <summary>
            Gets list of contigs created after Assembly.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.IOverlapDeNovoAssembly.UnmergedSequences">
            <summary>
            Gets list of sequences that could not be merged into any contig.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.MatePair">
            <summary>
            Stores mate pair information.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.MatePair.forwardRead">
            <summary>
            Stores sequence ID of forward read.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.MatePair.reverseRead">
            <summary>
            Stores sequence ID of reverse read.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.MatePair.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MatePair class with specified library name.
            </summary>
            <param name="library">Library name.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.MatePair.#ctor(Bio.ISequence,Bio.ISequence,System.String)">
            <summary>
            Initializes a new instance of the MatePair class with specified library name,
            forward read and reverse read.
            </summary>
            <param name="forwardRead">Forward Read.</param>
            <param name="reverseRead">Reverse Read.</param>
            <param name="library">Library used to sequence reads.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.MatePair.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MatePair class with specified library name,
            forward read and reverse read.
            </summary>
            <param name="forwardReadID">ID of forward read.</param>
            <param name="reverseReadID">ID of reverse read.</param>
            <param name="library">Library used to sequence reads.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.MatePair.GetForwardRead(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Sequence of forward read.
            </summary>
            <param name="sequences">List of input reads.</param>
            <returns>Sequence of forward read.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.MatePair.GetReverseRead(System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            Gets the Sequence of reverse read from given list.
            </summary>
            <param name="sequences">List of input reads.</param>
            <returns>Sequence of reverse read.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.MatePair.ToString">
            <summary>
            Converts ForwardReadID, ReverseReadID, MeanLength, Standard Deviation of MatePair to string.
            </summary>
            <returns>ForwardReadID, ReverseReadID, MeanLength, Standard Deviation.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.MatePair.Validate(System.String)">
            <summary>
            Validate library information.
            </summary>
            <param name="library">Name of library.</param>
            <returns>Is Input Valid.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.MatePair.Validate(System.String,System.String,System.String)">
            <summary>
            Validates the Input.
            </summary>
            <param name="forwardReadID">ID of forward read.</param>
            <param name="reverseReadID">ID of reverse read.</param>
            <param name="library">Name of Library.</param>
            <returns>Are inputs valid.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.MatePair.Validate(Bio.ISequence,Bio.ISequence,System.String)">
            <summary>
            Validates the Input.
            </summary>
            <param name="forwardRead">Sequence of forward read.</param>
            <param name="reverseRead">Sequence of reverse read.</param>
            <param name="library">Name of libarary.</param>
            <returns>Are inputs valid.</returns>
        </member>
        <member name="P:Bio.Algorithms.Assembly.MatePair.ForwardReadID">
            <summary>
            Gets or sets sequence of Forward Read.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.MatePair.ReverseReadID">
            <summary>
            Gets or sets sequence for Reverse Read.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.MatePair.Library">
            <summary>
            Gets and sets Name of Library.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.MatePair.MeanLengthOfLibrary">
            <summary>
            Gets mean length of Insert for Library.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.MatePair.StandardDeviationOfLibrary">
            <summary>
            Gets standard deviation of insert lengths for a library.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.MatePairMapper">
            <summary>
            Class maps reads to mate pairs using sequence ID of sequence in FASTA file.
            Supported mate pair formats
            >chrI0.X1:abc
            ATGC
            >chrI0.Y1:abc
            TACG
            >chrI0.F:abc
            ATGC
            >chrI0.R:abc
            TACG
            >chrI0.1:abc
            ATGC
            >chrI0.2:abc
            TACG
            Where X1,F,1 denotes forward reads and Y1,R,2 denotes reverse reads
            abc denotes library name 
            chrI0 is the sequence id.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.MatePairMapper.readExpression">
            <summary>
            Regular Expression matching reads in supported formats.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.MatePairMapper.Map(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Map reads to mate pairs.
            </summary>
            <param name="reads">List of Reads.</param>
            <returns>List of mate pairs.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.MatePairMapper.MapContigToMatePairs(System.Collections.Generic.IEnumerable{Bio.ISequence},Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMap)">
            <summary>
            Finds contig pairs having valid mate pairs connection between them.
            </summary>
            <param name="reads">Input list of reads.</param>
            <param name="alignment">Reads contig alignment.</param>
            <returns>Contig Mate pair map.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.MatePairMapper.ContigMatePairMapper(System.Collections.Generic.Dictionary{Bio.ISequence,System.Collections.Generic.IList{Bio.Algorithms.Assembly.Padena.Scaffold.ReadMap}},System.Collections.Generic.Dictionary{Bio.ISequence,System.Collections.Generic.IList{Bio.Algorithms.Assembly.Padena.Scaffold.ReadMap}},Bio.Algorithms.Assembly.MatePair,Bio.Algorithms.Assembly.Padena.Scaffold.ContigMatePairs)">
            <summary>
            Creates Paired Read Contig Map.
            </summary>
            <param name="forwardContigs">Contigs aligning to forward read.</param>
            <param name="reverseContigs">Contigs aligning to reverse read.</param>
            <param name="pair">Mate Pair.</param>
            <param name="contigMatePairs">Contig mate pair.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.MatePairMapper.GenerateExpression(System.Text.RegularExpressions.Match)">
            <summary>
            Generates expression for other read using expression on read.
            </summary>
            <param name="match">Pattern match on read whose partner has to be determined.</param>
            <returns>Expression for other read.</returns>
        </member>
        <member name="T:Bio.Algorithms.Assembly.OverlapDeNovoAssembler">
            <summary>
            Implements a simple greedy assembly algorithm for DNA.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.OverlapDeNovoAssembler._sequenceAlphabet">
            <summary>
            The alphabet type of sequences to be assembled
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.#ctor">
            <summary>
            Initializes a new instance of the OverlapDeNovoAssembler class.
            Sets default threshold values, pairwise aligner, consensusResolver.
            Users will typically reset these using parameters 
            specific to their particular sequences and needs.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.Assemble(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Assemble the input sequences into the largest possible contigs. 
            </summary>
            <remarks>
            The algorithm is:
            1.  initialize list of contigs to empty list. List of seqs is passed as argument.
            2.  compute pairwise overlap scores for each pair of input seqs (with reversal and
                complementation as appropriate).
            3.  choose best overlap score. the “merge items” (can be seqs or contigs) are the 
                items with that score. If best score is less than threshold, assembly is finished.
            4.  merge the merge items into a single contig and remove them from their list(s)
            5.  compute the overlap between new item and all existing items
            6.  go to step 3
            </remarks>
            <param name="inputSequences">The sequences to assemble.</param>
            <returns>Returns the OverlapDeNovoAssembly instance which contains list of 
            contigs and list of unmerged sequences which are result of this assembly.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.MakeConsensus(Bio.IAlphabet,Bio.Algorithms.Assembly.Contig)">
            <summary>
            Analyze the passed contig and store a consensus into its Consensus property.
            Public method to allow testing of consensus generation part.
            Used by test automation.
            </summary>
            <param name="alphabet">Sequence alphabet</param>
            <param name="contig">Contig for which consensus is to be constructed</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.SequenceWithoutTerminalGaps(Bio.ISequence)">
            <summary>
            Removes gaps that are inserted by overlap algorithm at beginning or end of sequence.
            </summary>
            <param name="inputSequence">input sequence</param>
            <returns>Sequence without gaps</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.MergeLowerIndexedContig(Bio.Algorithms.Assembly.Contig,Bio.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore,Bio.Algorithms.Assembly.Contig)">
            <summary>
            Method to merge lower-indexed item with new constructed contig.
            Merges consumed contig with new contig. For each sequence in consumed contig, 
            compute sequence and offset to be added to new contig.
            </summary>
            <param name="newContig">New contig for merging</param>
            <param name="globalBest">Best Score along with offsets information</param>
            <param name="consumedContig">Contig to be merged</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.MergeLowerIndexedSequence(Bio.Algorithms.Assembly.Contig,Bio.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore,Bio.ISequence)">
            <summary>
            Method to merge lower-indexed item with new constructed contig
            Merges consumed sequence with new contig. For the consumed sequence,
            compute new sequence and offset to be added to new contig.
            </summary>
            <param name="newContig">New contig for merging</param>
            <param name="globalBest">Best Score, consensus, their offsets</param>
            <param name="consumedSequence">Consumed Sequence to be merged</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.MergeHigherIndexedContig(Bio.Algorithms.Assembly.Contig,Bio.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore,Bio.Algorithms.Assembly.Contig)">
            <summary>
            Method to merge higher-indexed item with new constructed contig.
            Merges consumed contig with new contig. For each sequence in consumed contig, 
            compute sequence and offset to be added to new contig.
            </summary>
            <param name="newContig">New contig for merging</param>
            <param name="globalBest">Best Score, consensus, their offsets</param>
            <param name="consumedContig">Consumed Contig to be merged</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.MergeHigherIndexedSequence(Bio.Algorithms.Assembly.Contig,Bio.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore,Bio.ISequence)">
            <summary>
            Method to merge higher-indexed item with new constructed contig.
            Merges consumed sequence with new contig. For the consumed sequence,
            compute new sequence and offset to be added to new contig.
            </summary>
            <param name="newContig">New contig for merging</param>
            <param name="globalBest">Best Score, consensus, their offsets</param>
            <param name="consumedSequence">Consumed Sequence to be merged</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.Dump(System.Collections.Generic.IList{Bio.Algorithms.Alignment.ISequenceAlignment})">
            <summary>
            Write sequence alignment to application log
            </summary>
            <param name="alignment">sequence alignment</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.Dump(Bio.Algorithms.Assembly.Contig)">
            <summary>
            Write contig to application log
            </summary>
            <param name="contig">contig to be dumped</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.AlignSequence(Bio.ISequence,Bio.ISequence,System.Int32,System.Int32)">
            <summary>
            Aligns the two input sequences, their reverseComplement, complement and reverse
            Keeps track of best score for these combinations.
            </summary>
            <param name="lowerIndexedSequence">Lower-indexed sequence to be aligned</param>
            <param name="higherIndexedSequence">Higher-indexed sequence to be aligned</param>
            <param name="lowerIndex">Index of first sequence in pool</param>
            <param name="higherIndex">Index of second sequence in pool</param>
            <returns>ItemScore containing score, consensus, offset of best alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.AlignAndUpdateBestScore(Bio.ISequence,Bio.ISequence,System.Boolean,System.Boolean,Bio.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore,System.Int32,System.Int32,System.String)">
            <summary>
            Aligns the two input sequence
            Updates best score, if necessary
            </summary>
            <param name="sequence1">First Sequence to be aligned</param>
            <param name="sequence2">Second Sequence to be aligned</param>
            <param name="reversed">Is first sequence reversed?</param>
            <param name="complement">Is first sequence complemented?</param>
            <param name="bestScore">Structure to track best score</param>
            <param name="sequence1PoolIndex">Index of first sequence in pool.
            Used in printing for debug purpose.</param>
            <param name="sequence2PoolIndex">Index of second sequence in pool.
            Used in printing for debug purpose.</param>
            <param name="message">Message to be printed for debug purpose</param>
            <returns>Updated best score</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.RunAlignSimple(Bio.ISequence,Bio.ISequence)">
            <summary>
            Execute Simple Align and return Sequence alignment
            </summary>
            <param name="sequence1">First sequence item</param>
            <param name="sequence2">Second sequence item</param>
            <returns>List of Sequence alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.MakeConsensus(Bio.Algorithms.Assembly.Contig)">
            <summary>
            Analyze the passed contig and store a consensus into its Consensus property.
            </summary>
            <param name="contig">Contig for which consensus is to be constructed</param>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.MergeThreshold">
            <summary>
            Gets or sets Threshold determines how much overlap is needed 
            for two sequences to be merged. The score from the overlap algorithm 
            must at least equal Threshold for a merge to occur.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.AssumeStandardOrientation">
            <summary>
            Gets or sets a value indicating whether standard orientation is assumed.
            if true, assume that the input sequences are in 5'-to-3' orientation.
            This means that only normal and reverse-complement overlaps need to be tested.
            if false, need to try both orientations for overlaps.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.OverlapAlgorithm">
            <summary>
            Gets or sets the pairwise sequence aligner that will be used to compute overlap during assembly.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.ConsensusResolver">
            <summary>
            Gets or sets the method that will be used to compute a contig's consensus during assembly.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.Name">
            <summary>
            Gets the name of the current assembly algorithm used.
            This property returns the Name of our assembly algorithm i.e 
            Simple-sequence algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.Description">
            <summary>
            Gets the description of the current assembly algorithm used.
            This property returns a simple description of what 
             SimpleSequenceAssembler class implements.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore">
            <summary>
            An ItemScore is the overlap score between the current item (owner of this struct)
            and a lower-indexed item. The lower-indexed item may have been reversed or 
            complemented (or both) to get that score. We always perform reverse and/or
            complement on the lower-indexed item (at no loss of generality).
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore.OtherItem">
            <summary>
            the pool index of the lower-indexed item 
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore.OverlapScore">
            <summary>
            the overlap score 
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore.Reversed">
            <summary>
            true if the lower-indexed item was reversed 
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore.Complemented">
            <summary>
            true if the lower-indexed item was complemented 
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore.FirstOffset">
            <summary>
            the offset to apply to the first sequence (from the
            right if reversed, from the left if not reversed) 
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore.SecondOffset">
            <summary>
            the offset to apply to the second sequence (always from 
            the left, since it's never reversed)
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore.#ctor(System.Int32,System.Double,System.Boolean,System.Boolean,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the ItemScore struct
            constructor that sets all properties 
            </summary>
            <param name="otherItem">Pool index of the lower-indexed item</param>
            <param name="overlapScore">Overlap score</param>
            <param name="reversed">Was lower-indexed item reversed</param>
            <param name="complemented">Was lower-indexed item complemented</param>
            <param name="firstOffset">First sequence offset</param>
            <param name="secondOffset">Second sequence offset</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore.#ctor(Bio.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore)">
            <summary>
            Initializes a new instance of the ItemScore struct
            copy constructor
            </summary>
            <param name="other">instance from which item score need to be copied</param>
        </member>
        <member name="T:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem">
            <summary>
            A PoolItem is one item in the merge pool (either a sequence or a contig)
            along with its overlap scores with lower-numbered items.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem._isContig">
            <summary>
            Flag that distinguished whether _item is a contig or sequence. 
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.#ctor(Bio.Algorithms.Assembly.Contig)">
            <summary>
            Initializes a new instance of the PoolItem class.
            constructor for contig.
            </summary>
            <param name="item">Pool object</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.#ctor(Bio.ISequence)">
            <summary>
            Initializes a new instance of the PoolItem class.
            constructor for sequence.
            </summary>
            <param name="item">Pool object</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the PoolItem class.
            constructor that sets item and type.
            </summary>
            <param name="item">Pool object</param>
            <param name="isContig">Is it contig</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.FreeSequences">
            <summary>
            Free the item reference when no longer needed.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.IsContig">
            <summary>
            Gets a value indicating whether item is a contig. 
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.Contig">
            <summary>
            Gets stored Contig, assuming there is one.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.Sequence">
            <summary>
            Gets stored sequence, assuming there is one.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.SequenceOrConsensus">
            <summary>
            Gets the sequence that will be aligned with other pool items. For
            a contig, this is the consensus; for a sequence, it's just the sequence. 
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.Item">
            <summary>
            Gets or sets the item.
            Item can either be an ISequence, or a Contig.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.Scores">
            <summary>
            Gets or sets list of overlap scores.
            List stores the overlap scores with all pool items 
            that have a lower index than this.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.ConsumedBy">
            <summary>
            Gets or sets the index of the pool item that replaced it.
            If a pool item has been merged, consumedBy will be
            the index of the pool item that replaced it.
            A negative value means the  item is still unmerged.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.OverlapDeNovoAssembly">
            <summary>
            OverlapDeNovoAssembly is a implementation of IOverlapDeNovoAssembly that stores the 
            assembly result.
            This class contains list of contigs and list of unmerged sequences.
            To maintain the information like history or context, use Documentation property of this class.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.OverlapDeNovoAssembly.contigs">
            <summary>
            Holds list of contigs created after Assembly.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.OverlapDeNovoAssembly.unmergedSequences">
            <summary>
            Holds list of sequences that could not be merged into any contig.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembly.#ctor">
            <summary>
            Initializes a new instance of the OverlapDeNovoAssembly class.
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.OverlapDeNovoAssembly.ToString">
            <summary>
            Converts the list of contigs to string.
            </summary>
            <returns>contigs data</returns>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembly.Contigs">
            <summary>
            Gets list of contigs created after Assembly.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembly.UnmergedSequences">
            <summary>
            Gets list of sequences that could not be merged into any contig.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembly.AssembledSequences">
            <summary>
            Gets the list of assembled sequences.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.OverlapDeNovoAssembly.Documentation">
            <summary>
            Gets or sets the Documentation object is intended for tracking the history, provenance,
            and experimental context of a OverlapDeNovoAssembly. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.IContigBuilder">
            <summary>
            Framework for building contig sequence from de bruijn graph.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.IContigBuilder.Build(Bio.Algorithms.Assembly.Graph.DeBruijnGraph)">
            <summary>
            Contructs the contigs by performing graph walking
            or graph modification.
            </summary>
            <param name="deBruijnGraph">Input graph.</param>
            <returns>List of contigs.</returns>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.IGraphErrorPurger">
            <summary>
            Framework for detecting erroneous nodes and removing them.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.IGraphErrorPurger.RemoveErroneousNodes(Bio.Algorithms.Assembly.Graph.DeBruijnGraph,Bio.Algorithms.Assembly.Graph.DeBruijnPathList)">
            <summary>
            Modifies de bruijn graph.
            Removes all the nodes in input.
            </summary>
            <param name="deBruijnGraph">De Bruijn Graph.</param>
            <param name="nodesList">List of nodes to be removed.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.IGraphErrorPurger.DetectErroneousNodes(Bio.Algorithms.Assembly.Graph.DeBruijnGraph)">
            <summary>
            Detects nodes that satisfy some error conditions .
            </summary>
            <param name="deBruijnGraph">Input graph.</param>
            <returns>List of error nodes.</returns>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.IGraphErrorPurger.Name">
            <summary>
            Gets the name of the sequence assembly algorithm being
            implemented. This is intended to give the
            developer some information of the current sequence assembly algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.IGraphErrorPurger.Description">
            <summary>
            Gets the description of the sequence assembly algorithm being
            implemented. This is intended to give the
            developer some information of the current sequence assembly algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.IGraphErrorPurger.LengthThreshold">
            <summary>
            Gets or sets the threshold length.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.IGraphEndsEroder">
            <summary>
            Interface for eroding graph nodes that have
            low coverage.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.IGraphEndsEroder.ErodeGraphEnds(Bio.Algorithms.Assembly.Graph.DeBruijnGraph,System.Int32)">
            <summary>
            Erode ends of graph that have low coverage.
            For optimization of another step (dangling link purger)
            in assembly process, this returns a list of integers.
            In case this optimization is not used, a single element
            list containing the number of eroded nodes can be returned.
            </summary>
            <param name="graph">Input graph.</param>
            <param name="erosionThreshold">Threshold for erosion.</param>
            <returns>List containing the number of nodes eroded.</returns>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.IGraphEndsEroder.Name">
            <summary>
            Gets the name of the sequence assembly algorithm being
            implemented. This is intended to give the
            developer some information of the current sequence assembly algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.IGraphEndsEroder.Description">
            <summary>
            Gets the description of the sequence assembly algorithm being
            implemented. This is intended to give the
            developer some information of the current sequence assembly algorithm.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.ILowCoverageContigPurger">
            <summary>
            Interface removing contigs with low coverage.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.ILowCoverageContigPurger.RemoveLowCoverageContigs(Bio.Algorithms.Assembly.Graph.DeBruijnGraph,System.Double)">
            <summary>
            Build contigs from graph. For contigs whose coverage is less than 
            the specified threshold, remove graph nodes belonging to them.
            </summary>
            <param name="deBruijnGraph">DeBruijn Graph.</param>
            <param name="coverageThresholdForContigs">Coverage Threshold for contigs.</param>
            <returns>Number of nodes removed.</returns>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.ContigMatePairs">
            <summary>
            Stores information about Contig - Contig mate pair map.
            Forward Contig     Reverse Contig
            ---------------) (---------------
               -------)           (------
               Forward              Reverse
               read                 read    
            Key: Sequence of Forward Contig
            Value:
                Key: Sequence of reverse contig
                Value: List of mate pair between two contigs.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigMatePairs.#ctor">
            <summary>
            Initializes a new instance of the ContigMatePairs class.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigMatePairs.#ctor(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Initializes a new instance of the ContigMatePairs class with specified contigs.
            </summary>
            <param name="contigs">List of contigs.</param>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph">
            <summary>
            Representation of a De Bruijn Graph.
            Graph is encoded as a collection of de Bruijn nodes.
            The nodes themselves hold the adjacency information.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph.baseSequences">
            <summary>
            Base sequence that holds the list of input sequences.
            Nodes reference into base sequence for k-mers.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph.kmerNodes">
            <summary>
            List of graph nodes.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph.ValidateGraph(Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph)">
            <summary>
            Validate input graph.
            Throws exception if graph is null.
            </summary>
            <param name="graph">Input graph.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph.GetNodeSequence(Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node)">
            <summary>
            Gets the sequence for kmer associated with input node.
            Uses index and position information along with base sequence 
            to construct sequence. 
            There should be atleast one valid position in the node.
            Since all positions indicate the same kmer sequence, 
            the position information from the first kmer is used
            to construct the sequence.
            </summary>
            <param name="node">Graph Node.</param>
            <returns>Sequence associated with input node.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph.BuildContigGraph(System.Collections.Generic.IList{Bio.ISequence},System.Int32)">
            <summary>
            Builds a contig graph from kmer graph using contig data information.
            Creates a graph node for each contig, computes adjacency 
            for contig graph using edge information in kmer graph.
            Finally, all kmer nodes are deleted from the graph.
            </summary>
            <param name="contigs">List of contig data.</param>
            <param name="kmerLength">Kmer length.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph.RemoveNodes(System.Collections.Generic.IEnumerable{Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node})">
            <summary>
            Remove all nodes in input list from graph.
            </summary>
            <param name="nodes">Nodes to be removed.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph.Dispose">
            <summary>
            Implements dispose to supress GC finalize
            This is done as one of the methods uses ReadWriterLockSlim
            which extends IDisposable.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph.Dispose(System.Boolean)">
            <summary>
            Dispose field instances.
            </summary>
            <param name="disposeManaged">If disposeManaged equals true, clean all resources.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph.GenerateContigAdjacency(System.Collections.Generic.IList{Bio.ISequence},System.Int64,Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node[])">
            <summary>
            Generate adjacency information between contig nodes
            by computing overlapping regions between contig sequences.
            </summary>
            <param name="contigs">List of contig data.</param>
            <param name="kmerLength">Kmer length.</param>
            <param name="contigNodes">Array of contig nodes.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph.AddContigGraphEdges(Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node[],System.Collections.Generic.Dictionary{Bio.ISequence,System.Collections.Generic.List{System.Int32}},System.Collections.Generic.Dictionary{Bio.ISequence,System.Collections.Generic.List{System.Int32}})">
            <summary>
            Checks for and adds edges between contigs 
            based on left, right kmer maps.
            </summary>
            <param name="contigNodes">Array of contig nodes.</param>
            <param name="leftKmerMap">Map of left k-mer to contig nodes.</param>
            <param name="rightKmerMap">Map of right k-mer to contig nodes.</param>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph.Nodes">
            <summary>
            Gets the list of nodes in graph.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Edge">
            <summary>
            Represents an edge in the de bruijn graph.
            Stores orientation (same or opposite) and whether the edge is valid.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Edge.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DeBruijnEdge class.
            </summary>
            <param name="isSameOrientation">Orientation of edge.</param>
            <param name="isValid">Indicates if this is a valid edge.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Edge.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DeBruijnEdge class.
            Creates a 'valid' edge by default.
            </summary>
            <param name="orientation">Orientation of edge.</param>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Edge.IsSameOrientation">
            <summary>
            Gets or sets a value indicating whether orientation of edge is same or opposite.
            If two connected nodes have overlapping sequence, the orientation is 
            true (same orientation). If sequence of one overlaps with the reverse-complement 
            of other's sequence, the orientation is false (opposite orientation).
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Edge.IsValid">
            <summary>
            Gets or sets a value indicating whether this is a valid edge.
            Used to temporarily remove edges from graph.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node">
            <summary>
            Represents a node in the Overlap graph
            A node is associated with a contig. 
            Also holds adjacency information with other nodes.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.sequenceIndex">
            <summary>
            Holds sequence index of contig.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.contigLength">
            <summary>
            Length of contig associated with the node.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.rightEndExtensionNodes">
            <summary>
            Right Extension edges. Edge contains connecting node, and orientation of edge. 
            A right-end extension edge will be added from node A to node B, if there is an 
            overlap of length (k-1) between right end of sequence A and left end of sequences B. 
            Orientation is same, if overlapping sequences in adjacent nodes 
            are normal orientation. Orientation is opposite, if one of the 
            sequences is reverse complement.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.leftEndExtensionNodes">
            <summary>
            Left Extension edges. Edge contains connecting node, and orientation of edge. 
            A left-end extension edge will be added from node A to node B, if there is an 
            overlap of length (k-1) between left end of sequence A and right end of sequences B. 
            Orientation is same, if overlapping sequences in adjacent nodes 
            are normal orientation. Orientation is opposite, if one of the 
            sequences is reverse complement.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.isMarked">
            <summary>
            Depicts that whether the node is marked or not.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.coverage">
            <summary>
            Coverage of contig. (No. of reads aligned to contig)
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.#ctor(System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the Node class.
            Creates graph node with sequence index.
            </summary>
            <param name="length">Length of contig.</param>
            <param name="sequenceIndex">Sequence Index for contig.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.AddLeftEndExtension(Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node,System.Boolean)">
            <summary>
            Add node with given orientation to left extension edges.
            Not thread-safe. Use lock at caller if required.
            </summary>
            <param name="node">Node to add left-extension to.</param>
            <param name="isSameOrientation">Orientation of connecting edge.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.AddRightEndExtension(Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node,System.Boolean)">
            <summary>
            Add node with given orientation to right extension edges.
            Not thread-safe. Use lock at caller if required.
            </summary>
            <param name="node">Node to add right-extension to.</param>
            <param name="isSameOrientation">Orientation of connecting edge.</param>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.MarkNode">
            <summary>
            Mark nodes as visited.
            WARNING: DO NOT USE this if you need contig count information.
            contig count field is being re-used for this purpose.
            Old value of contig count will be over-written.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.IsMarked">
            <summary>
            Check if node is marked as visited
            Checks if the contig count field is set to a specific value.
            </summary>
            <returns>True if marked; otherwise false.</returns>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.ValidateNode(Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node)">
            <summary>
            Check if input node is null.
            </summary>
            <param name="node">Input node.</param>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.RightExtensionNodes">
            <summary>
            Gets the right extension edges.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.LeftExtensionNodes">
            <summary>
            Gets the left extension edges.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.ContigLength">
            <summary>
            Gets the length of contig.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.SequenceIndex">
            <summary>
            Gets index of source sequence for contig.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.Coverage">
            <summary>
            Coverage of contig. (No. of reads aligned to contig)
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.Node.ExtensionsCount">
            <summary>
            Gets the total number of extension edges for the node.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.ContigReadOverlapType">
            <summary>
            Overlap between Read and Contig.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ContigReadOverlapType.FullOverlap">
            <summary>
            FullOverlap.
            ------------- Contig
               ------     Read
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ContigReadOverlapType.PartialOverlap">
            <summary>
            PartialOverlap.
            -------------       Contig
                       ------   Read
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMap">
            <summary>
            Class stores multiple mapping between reads and a contig.
                -------------------         Read Sequence
            ------------------------------  Contig Sequence [Full Overlap]
                          ----------------  Contig Sequence [Partial Overlap]
            The Class stores 
            Key: Sequence Id of Read 
            Value
                Key: Sequence of Contig
                Value: List of position of Overlaps of contig with read.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMap.#ctor">
            <summary>
            Initializes a new instance of the ReadContigMap class.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ReadContigMap.#ctor(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Initializes a new instance of the ReadContigMap class with specified reads.
            </summary>
            <param name="reads">List of reads.</param>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.ReadMap">
            <summary>
             Class storing information of a single map between read and contig.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ReadMap.StartPositionOfContig">
            <summary>
            Gets or sets start position of contig.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ReadMap.StartPositionOfRead">
            <summary>
            Gets or sets start position of read. 
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ReadMap.Length">
            <summary>
            Gets or sets length of map between read and contig.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ReadMap.ReadOverlap">
            <summary>
            Gets or sets overlap of read and contig.
            FullOverlap
            ------------- Contig
               ------     Read
            PartialOverlap
            -------------       Contig
                       ------   Read
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.ScaffoldPath">
            <summary>
            Stores information about the scaffold paths.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Assembly.Padena.Scaffold.ScaffoldPath.BuildSequenceFromPath(Bio.Algorithms.Assembly.Padena.Scaffold.ContigOverlapGraph.ContigGraph,System.Int32)">
            <summary>
            Converts the scaffold path into its sequence.
            </summary>
            <param name="graph">De Bruijn graph.</param>
            <param name="kmerLength">Kmer Length.</param>
            <returns>Scaffold Sequence.</returns>
        </member>
        <member name="T:Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair">
            <summary>
            Class stores information about mate pairs and 
            their start positions with respect to contig.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair.forwardReadStartPosition">
            <summary>
            Stores information about start position of forward read in contig.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair.reverseReadStartPosition">
            <summary>
            Stores information about start position of reverse read in contig.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair.reverseReadReverseComplementStartPosition">
            <summary>
             Stores information about start position of reverse read in 
             reverse complementary sequence of contig.
             The distance estimated for both cases will be used in trace path, 
             based on edge orientation contig overlap graph.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair.distanceBetweenContigs">
            <summary>
            Stores distance between contigs using forward and 
            reverse complementary sequence of reverse contig.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair.standardDeviationBetweenContigs">
            <summary>
            Stores standard deviation between contigs using forward and 
            reverse complementary sequence of reverse contig.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair.ForwardReadStartPosition">
            <summary>
            Gets value of start position of forward read in contig.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair.ReverseReadStartPosition">
            <summary>
            Gets value of start position of reverse read in contig.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair.ReverseReadReverseComplementStartPosition">
            <summary>
            Gets value of start position of reverse read in 
            reverse complementary sequence of contig.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair.PairedRead">
            <summary>
            Gets or sets Paired reads.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair.DistanceBetweenContigs">
            <summary>
            Gets distance between contigs, calculated using paired read information.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair.StandardDeviation">
            <summary>
            Gets standard Deviation between contigs, calculated using paired read information.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Assembly.Padena.Scaffold.ValidMatePair.Weight">
            <summary>
            Gets or sets Weight of relationship between two contigs.
            </summary>
        </member>
        <member name="T:Bio.BigArray`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Bio.BigArray`1.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the BigArray.
            </summary>
            <param name="length">Size of the BigArray to create.</param>
        </member>
        <member name="M:Bio.BigArray`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
                first occurrence within the entire BigArray.
            </summary>
            <param name="item">The object to locate in the BigArray. The value
                can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire BigArray,
                if found; otherwise, –1.</returns>
        </member>
        <member name="M:Bio.BigArray`1.IndexOf(`0,System.Int64)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
                first occurrence within the range of elements in the BigArray
                that extends from the specified index to the last element.
            </summary>
            <param name="item">The object to locate in the BigArray. The value
                can be null for reference types.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) 
            is valid in an empty BigArray.</param>
            <returns> The zero-based index of the first occurrence of item within the range of
                elements in the BigArray that extends from index to the last element, 
                if found; otherwise, –1.</returns>
        </member>
        <member name="M:Bio.BigArray`1.IndexOf(`0,System.Int64,System.Int64)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
                first occurrence within the range of elements in the BigArray
                that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">The object to locate in the BigArray. The value
                can be null for reference types.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty
                BigArray.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the first occurrence of item within the range of
                elements in the BigArray that starts at index and
                contains count number of elements, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Bio.BigArray`1.Clear">
            <summary>
            Sets all elements in the BigArray to zero, to false, or to null,
                depending on the element type.
            </summary>
        </member>
        <member name="M:Bio.BigArray`1.Clear(System.Int64,System.Int64)">
            <summary>
             Sets a range of elements in the BigArray to zero, to false, or to null,
                depending on the element type.
            </summary>
            <param name="startIndex">The starting index of the range of elements to clear.</param>
            <param name="count">The number of elements to clear.</param>
        </member>
        <member name="M:Bio.BigArray`1.Resize(System.Int64)">
            <summary>
            Changes the size of the BigArray to the specified new size.
            </summary>
            <param name="newSize">The size of the new BigArray.</param>
        </member>
        <member name="M:Bio.BigArray`1.CopyTo(System.Int64,`0[],System.Int64)">
            <summary>
            Copies a range of elements from the BigArray to a compatible one-dimensional array.
            </summary>
            <param name="index">The zero-based index in the source BigArray at
                which copying begins.</param>
            <param name="destinationArray">The one-dimensional array that is the destination of the elements
                copied from BigArray.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:Bio.BigArray`1.CopyTo(System.Int64,`0[],System.Int32,System.Int64)">
            <summary>
            Copies a range of elements from the BigArray to a compatible one-dimensional array, 
            starting at the specified index of the destination array.
            </summary>
            <param name="index">The zero-based index in the source BigArray at
                which copying begins.</param>
            <param name="destinationArray">The one-dimensional array that is the destination of the elements
                copied from BigArray.</param>
            <param name="destinationIndex">The zero-based index in destinationArray at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:Bio.BigArray`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the BigArray.
            </summary>
        </member>
        <member name="M:Bio.BigArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the BigArray.
            </summary>
        </member>
        <member name="M:Bio.BigArray`1.Allocate(System.Int64)">
            <summary>
            Allocate the memory for the BigArray.
            </summary>
            <param name="length">Length of the BigArray.</param>
        </member>
        <member name="P:Bio.BigArray`1.Length">
            <summary>
            Total number of elements contained within this instance.
            </summary>
        </member>
        <member name="P:Bio.BigArray`1.BlockSize">
            <summary>
            Maximum elements can be stored in an internal block.
            </summary>
        </member>
        <member name="P:Bio.BigArray`1.Item(System.Int64)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"> The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Bio.BigList`1">
            <summary>
            Represents a strongly typed list of objects.
            Uses BigArray to store objects.
            </summary>
            <typeparam name="T">Type of elements to store.</typeparam>
        </member>
        <member name="F:Bio.BigList`1.DefaultCapacity">
            <summary>
            Default capacity, used while adding first element 
            when capacity is not specified.
            </summary>
        </member>
        <member name="F:Bio.BigList`1._emptyArray">
            <summary>
            Empty array.
            </summary>
        </member>
        <member name="F:Bio.BigList`1._items">
            <summary>
            BigArray instance to store elements.
            </summary>
        </member>
        <member name="F:Bio.BigList`1._size">
            <summary>
            Holds number of elements present in the BigList.
            </summary>
        </member>
        <member name="M:Bio.BigList`1.#ctor">
            <summary>
            Initializes a new instance of the BigList.
            </summary>
        </member>
        <member name="M:Bio.BigList`1.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the BigList with specified capacity.
            </summary>
            <param name="capacity">Initial capacity.</param>
        </member>
        <member name="M:Bio.BigList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the BigList with elements from the specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the new BigList.</param>
        </member>
        <member name="M:Bio.BigList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int64)">
            <summary>
            Initialize a new big list with a collection and known size.
            </summary>
            <param name="collection">Items to add</param>
            <param name="collectionCount">Size of list</param>
        </member>
        <member name="M:Bio.BigList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
                first occurrence within the entire BigList.
            </summary>
            <param name="item">The object to locate in the BigList. The value
                can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire BigList,
                if found; otherwise, –1.</returns>
        </member>
        <member name="M:Bio.BigList`1.IndexOf(`0,System.Int64)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
                first occurrence within the range of elements in the BigList
                that extends from the specified index to the last element.
            </summary>
            <param name="item">The object to locate in the BigList. The value
                can be null for reference types.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) 
            is valid in an empty BigList.</param>
            <returns> The zero-based index of the first occurrence of item within the range of
                elements in the BigList that extends from index to the last element, 
                if found; otherwise, –1.</returns>
        </member>
        <member name="M:Bio.BigList`1.IndexOf(`0,System.Int64,System.Int64)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
                first occurrence within the range of elements in the BigList
                that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">The object to locate in the BigList. The value
                can be null for reference types.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty
                BigList.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the first occurrence of item within the range of
                elements in the BigList that starts at index and
                contains count number of elements, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Bio.BigList`1.Insert(System.Int64,`0)">
            <summary>
             Inserts an element into the BigList at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="M:Bio.BigList`1.RemoveAt(System.Int64)">
            <summary>
             Removes the element at the specified index of the BigList.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Bio.BigList`1.Add(`0)">
            <summary>
            Adds an object to the end of the BigList.
            </summary>
            <param name="item">The object to be added to the end of the BigList.</param>
        </member>
        <member name="M:Bio.BigList`1.Clear">
            <summary>
             Removes all elements from the BigList.
            </summary>
        </member>
        <member name="M:Bio.BigList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the BigList.
            </summary>
            <param name="item">The object to locate in the BigList.</param>
            <returns>true if item is found in the BigList, else false.</returns>
        </member>
        <member name="M:Bio.BigList`1.CopyTo(System.Int64,`0[],System.Int64)">
            <summary>
            Copies a range of elements from the BigList to a compatible one-dimensional array.
            </summary>
            <param name="index">The zero-based index in the source BigList at
                which copying begins.</param>
            <param name="destinationArray">The one-dimensional array that is the destination of the elements
                copied from BigList.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:Bio.BigList`1.CopyTo(System.Int64,`0[],System.Int32,System.Int64)">
            <summary>
            Copies a range of elements from the BigList to a compatible one-dimensional array, 
            starting at the specified index of the destination array.
            </summary>
            <param name="index">The zero-based index in the source BigList at
                which copying begins.</param>
            <param name="destinationArray">The one-dimensional array that is the destination of the elements
                copied from BigList.</param>
            <param name="destinationIndex">The zero-based index in destinationArray at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:Bio.BigList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the BigList.
            </summary>
            <param name="item">The object to remove from the BigList.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also
                returns false if item was not found in the BigList.</returns>
        </member>
        <member name="M:Bio.BigList`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the BigList,
             if that number is less than a threshold value.
            </summary>
        </member>
        <member name="M:Bio.BigList`1.TrimToSize(System.Int64)">
            <summary>
            Trims the list and removes all elements above newSize
            </summary>
            <param name="newSize">size of new array</param>
        </member>
        <member name="M:Bio.BigList`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the BigList.
            </summary>
            <param name="action">The delegate to perform on each element of the BigList.</param>
        </member>
        <member name="M:Bio.BigList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the BigList.
            </summary>
        </member>
        <member name="M:Bio.BigList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the BigList.
            </summary>
        </member>
        <member name="P:Bio.BigList`1.Capacity">
            <summary>
            Gets or sets the capacity.
            </summary>
        </member>
        <member name="P:Bio.BigList`1.Count">
            <summary>
            Gets or sets the number of elements present in the BigList.
            </summary>
        </member>
        <member name="P:Bio.BigList`1.Item(System.Int64)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Bio.CloneLibrary">
            <summary>
            Class created for reading data from resource file having library information.
            Singleton design pattern is used to create only one instance of class. 
            </summary>
        </member>
        <member name="F:Bio.CloneLibrary.instance">
            <summary>
            Private Instance.
            </summary>
        </member>
        <member name="F:Bio.CloneLibrary.Guard">
            <summary>
            Object to use for lock.
            </summary>
        </member>
        <member name="F:Bio.CloneLibrary.libraries">
            <summary>
            List of Information about Clone libraries
            Duplicate libraries not allowed.
            </summary>
        </member>
        <member name="M:Bio.CloneLibrary.#ctor">
            <summary>
            Prevents a default instance of the CloneLibrary class from being created.
            Initializes a instance of the CloneLibrary class.
            </summary>
        </member>
        <member name="M:Bio.CloneLibrary.GetLibraryInformation(System.String)">
            <summary>
            Returns information about Library.
            </summary>
            <param name="libraryName"> Name of Library.</param>
            <returns>Struct containing Information about Library.</returns>
        </member>
        <member name="M:Bio.CloneLibrary.AddLibrary(Bio.CloneLibraryInformation)">
            <summary>
            Add Library to existing list of libraries.
            </summary>
            <param name="library">Library information.</param>
        </member>
        <member name="M:Bio.CloneLibrary.AddLibrary(System.String,System.Single,System.Single)">
            <summary>
            Add Library to existing list of libraries.
            </summary>
            <param name="libraryName">Name of Library.</param>
            <param name="mean">Mean Length Of Insert.</param>
            <param name="standardDeviation">Standard Deviation Of Insert.</param>
        </member>
        <member name="M:Bio.CloneLibrary.ReadLibrary">
            <summary>
            Read Libraries from file.
            </summary>
        </member>
        <member name="M:Bio.CloneLibrary.Parse(System.String)">
            <summary>
            Parse Library and convert parsed data into structure.
            </summary>
            <param name="library">Name of Library.</param>
        </member>
        <member name="P:Bio.CloneLibrary.Instance">
            <summary>
            Gets an instance of this class.
            Property to make sure only one Instance of this class is created.
            </summary>
        </member>
        <member name="P:Bio.CloneLibrary.GetLibraries">
            <summary>
            Gets the information about libraries.
            </summary>
        </member>
        <member name="T:Bio.CloneLibraryInformation">
            <summary>
            Stores Information of Library.
            </summary>
        </member>
        <member name="M:Bio.CloneLibraryInformation.op_Equality(Bio.CloneLibraryInformation,Bio.CloneLibraryInformation)">
            <summary>
            Overrides == Operator.
            </summary>
            <param name="obj1">First Input Object.</param>
            <param name="obj2">Second Input Object.</param>
            <returns>Result of reference comparison.</returns>
        </member>
        <member name="M:Bio.CloneLibraryInformation.op_Inequality(Bio.CloneLibraryInformation,Bio.CloneLibraryInformation)">
            <summary>
            Overrides != Operator.
            </summary>
            <param name="obj1">First Input Object.</param>
            <param name="obj2">Second Input Object.</param>
            <returns>Result of reference comparison.</returns>
        </member>
        <member name="M:Bio.CloneLibraryInformation.Equals(System.Object)">
            <summary>
            Override Equals method.
            </summary>
            <param name="obj">Input Object.</param>
            <returns>Result of comparison.</returns>
        </member>
        <member name="M:Bio.CloneLibraryInformation.GetHashCode">
            <summary>
            Returns the Hash code.
            </summary>
            <returns>Returns Hash code.</returns>
        </member>
        <member name="P:Bio.CloneLibraryInformation.LibraryName">
            <summary>
            Gets or sets name of library.
            </summary>
        </member>
        <member name="P:Bio.CloneLibraryInformation.MeanLengthOfInsert">
            <summary>
            Gets or sets mean length of Insert.
            </summary>
        </member>
        <member name="P:Bio.CloneLibraryInformation.StandardDeviationOfInsert">
            <summary>
            Gets or sets standard deviation of length of inserts.
            </summary>
        </member>
        <member name="T:Bio.DerivedSequence">
            <summary>
            This is a temporary implementation of DerivedSequence to support reversing and complementing a sequence.
            </summary>
        </member>
        <member name="T:Bio.ISequence">
            <summary>
            Implementations of ISequence make up the one of the core sets
            of data structures in Bio. It is these sequences that store
            data relevant to DNA, RNA, and Amino Acid structures. Several
            algorithms for alignment, assembly, and analysis take these items
            as their basic data inputs and outputs.
            </summary>
        </member>
        <member name="M:Bio.ISequence.GetReversedSequence">
            <summary>
            Return a sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="M:Bio.ISequence.GetComplementedSequence">
            <summary>
            Return a sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="M:Bio.ISequence.GetReverseComplementedSequence">
            <summary>
            Return a sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="M:Bio.ISequence.GetSubSequence(System.Int64,System.Int64)">
            <summary>
            Return a sequence representing a range (subsequence) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The virtual sequence.</returns>
        </member>
        <member name="M:Bio.ISequence.IndexOfNonGap">
            <summary>
            Gets the index of first non gap symbol.
            </summary>
            <returns>If found returns an zero based index of the first non gap symbol, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.ISequence.IndexOfNonGap(System.Int64)">
            <summary>
            Returns the position of the first item beyond startPos that does not 
            have a Gap symbol.
            </summary>
            <param name="startPos">Index value above which to search for non-Gap symbol.</param>
            <returns>If found returns an zero based index of the first non gap symbol, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.ISequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non gap symbol.
            </summary>
            <returns>If found returns an zero based index of the last non gap symbol, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.ISequence.LastIndexOfNonGap(System.Int64)">
            <summary>
            Gets the index of last non gap symbol before the specified end position.
            </summary>
            <param name="endPos">Index value below which to search for non-Gap symbol.</param>
            <returns>If found returns an zero based index of the last non gap symbol, otherwise returns -1.</returns>
        </member>
        <member name="P:Bio.ISequence.ID">
            <summary>
            Gets or sets an identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:Bio.ISequence.Alphabet">
            <summary>
            Gets alphabet to which this sequence should conform.
            </summary>
        </member>
        <member name="P:Bio.ISequence.Count">
            <summary>
            Gets the number of sequence items contained in the Sequence.
            </summary>
        </member>
        <member name="P:Bio.ISequence.Item(System.Int64)">
            <summary>
            Allows the sequence to function like an array, getting and setting
            the sequence item at the particular index specified. Note that the
            index value starts its count at 0.
            </summary>
            <param name="index">The index value.</param>
            <returns>A byte which represents the symbol.</returns>
        </member>
        <member name="P:Bio.ISequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            
            To fetch the data you would use:
            
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="M:Bio.DerivedSequence.#ctor(Bio.ISequence,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DerivedSequence class.
            </summary>
            <param name="sequence">Base sequence to use.</param>
            <param name="reverseSequence">Flag to indicate if the derived sequence should be reversed.</param>
            <param name="complementSequence">Flag to indicate if the derived sequence should be complemented.</param>
        </member>
        <member name="M:Bio.DerivedSequence.GetReversedSequence">
            <summary>
            Return a new sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="M:Bio.DerivedSequence.GetComplementedSequence">
            <summary>
            Return a new sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="M:Bio.DerivedSequence.GetReverseComplementedSequence">
            <summary>
            Return a new sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="M:Bio.DerivedSequence.GetSubSequence(System.Int64,System.Int64)">
            <summary>
            Return a new sequence representing a range (subsequence) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The sub-sequence.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.IndexOfNonGap">
            <summary>
            Gets the index of first non-gap symbol.
            </summary>
            <returns>If found returns a zero based index of the first non-gap symbol, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.IndexOfNonGap(System.Int64)">
            <summary>
            Returns the position of the first symbol beyond startPos that does not 
            have a Gap symbol.
            </summary>
            <param name="startPos">Index value beyond which the non-gap symbol is searched for.</param>
            <returns>If found returns a zero based index of the first non-gap symbol, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non-gap symbol.
            </summary>
            <returns>If found returns a zero based index of the last non-gap symbol, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.LastIndexOfNonGap(System.Int64)">
            <summary>
            Returns the index of last non-gap symbol before the specified end position.
            </summary>
            <param name="endPos">Index value up to which the non-Gap symbol is searched for.</param>
            <returns>If found returns a zero based index of the last non-gap symbol, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.ToString">
            <summary>
            Returns a string representation of the sequence data. This representation
            will come from the symbols in the alphabet defined for the sequence.
            
            Thus a Sequence whose Alphabet is Alphabets.DNA may return a value like
            'GATTCCA'
            </summary>
        </member>
        <member name="M:Bio.DerivedSequence.ConvertToString(System.Int64,System.Int64)">
            <summary>
            Converts part of the sequence to a string.
            </summary>
            <param name="startIndex">Start position of the sequence.</param>
            <param name="length">Number of symbols to return.</param>
            <returns>Part of the sequence in string format.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.CopyTo(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Copies all items from the sequence to a pre allocated array.
            </summary>
            <param name="byteArray">Array to fill the items to.</param>
            <param name="start">Index at which the filling starts.</param>
            <param name="count">Total numbers of elements to be copied.</param>
        </member>
        <member name="M:Bio.DerivedSequence.GetEnumerator">
            <summary>
            Gets an enumerator to the bytes present in this sequence.
            </summary>
            <returns>An IEnumerator of bytes.</returns>
        </member>
        <member name="M:Bio.DerivedSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to the bytes present in this sequence.
            </summary>
            <returns>An IEnumerator of bytes.</returns>
        </member>
        <member name="P:Bio.DerivedSequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            
            To fetch the data you would use:
            
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.ID">
            <summary>
            Gets or sets an identifier for this instance of sequence class.
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.Count">
            <summary>
            Gets the number of bytes contained in the Sequence.
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.Alphabet">
            <summary>
            Gets the alphabet to which symbols in this sequence belongs to.
            </summary>
        </member>
        <member name="P:Bio.DerivedSequence.Item(System.Int64)">
            <summary>
            Returns the byte found at the specified index if within bounds. Note 
            that the index value starts at 0.
            </summary>
            <param name="index">Index at which the symbol is required.</param>
            <returns></returns>
        </member>
        <member name="T:Bio.DifferenceNode">
            <summary>
            Node that tracks difference between the two sequences.
            </summary>
        </member>
        <member name="F:Bio.DifferenceNode.sequence1Start">
            <summary>
            Start position of difference in first sequence 
            </summary>
        </member>
        <member name="F:Bio.DifferenceNode.sequence1End">
            <summary>
            End position of difference in first sequence 
            </summary>
        </member>
        <member name="F:Bio.DifferenceNode.sequence2Start">
            <summary>
            Start position of difference in second sequence 
            </summary>
        </member>
        <member name="F:Bio.DifferenceNode.sequence2End">
            <summary>
            End position of difference in second sequence 
            </summary>
        </member>
        <member name="M:Bio.DifferenceNode.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DifferenceNode class.
            </summary>
            <param name="startIndex1">Start index in first sequence</param>
            <param name="startIndex2">Start index in second sequence</param>
            <param name="endIndex1">End index in first sequence</param>
            <param name="endIndex2">End index in second sequence</param>
        </member>
        <member name="M:Bio.DifferenceNode.CompareDifferenceNode(Bio.WordMatch,Bio.WordMatch)">
            <summary>
            Comparison of two word match list nodes
            based on the first sequence start indices
            </summary>
            <param name="n1">First match list node</param>
            <param name="n2">Second match list node</param>
            <returns>Integer value indicating zero if equal.</returns>
        </member>
        <member name="M:Bio.DifferenceNode.BuildDiffList(System.Collections.Generic.List{Bio.WordMatch},Bio.ISequence,Bio.ISequence)">
            <summary>
            Builds difference list from match list
            </summary>
            <param name="matchList">List of matching segments</param>
            <param name="sequence1">First sequence</param>
            <param name="sequence2">Second sequence</param>
            <returns>List of difference nodes</returns>
        </member>
        <member name="M:Bio.DifferenceNode.OutputDiffList(System.Collections.Generic.List{Bio.DifferenceNode},Bio.ISequence,Bio.ISequence)">
            <summary>
            Constructs output from input difference list
            </summary>
            <param name="diffList">Difference list</param>
            <param name="sequence1">First Sequence</param>
            <param name="sequence2">Second Sequence</param>
            <returns>List of features</returns>
        </member>
        <member name="M:Bio.DifferenceNode.ComputeFeatures(System.Int32,System.Int32,System.Int32,System.Int32,Bio.ISequence,Bio.ISequence,System.Int32,System.Int32)">
            <summary>
            Computes features for current difference
            </summary>
            <param name="sequence1Start">Start index of difference in first sequence</param>
            <param name="sequence2Start">Start index of difference in second sequence</param>
            <param name="sequence1End">End index of difference in first sequence</param>
            <param name="sequence2End">End index of difference in second sequence</param>
            <param name="sequence1">First sequence</param>
            <param name="sequence2">Second sequence</param>
            <param name="sequence1Index">First sequence index</param>
            <param name="sequence2Index">Second sequence index</param>
            <returns>List of features</returns>
        </member>
        <member name="M:Bio.DifferenceNode.ToString">
            <summary>
            Constructs a user-friendly string representation.
            Used for debug purpose.
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="P:Bio.DifferenceNode.Sequence1Start">
            <summary>
            Gets start index of difference in first sequence
            </summary>
        </member>
        <member name="P:Bio.DifferenceNode.Sequence2Start">
            <summary>
            Gets start index of difference in second sequence
            </summary>
        </member>
        <member name="P:Bio.DifferenceNode.Sequence1End">
            <summary>
            Gets end index of difference in first sequence
            </summary>
        </member>
        <member name="P:Bio.DifferenceNode.Sequence2End">
            <summary>
            Gets end index of difference in second sequence
            </summary>
        </member>
        <member name="T:Bio.DifferenceNode.CompareFeature">
            <summary>
            Structure that maintains node structure for feature list.
            </summary>
        </member>
        <member name="F:Bio.DifferenceNode.CompareFeature.start">
            <summary>
            Difference start position
            </summary>
        </member>
        <member name="F:Bio.DifferenceNode.CompareFeature.end">
            <summary>
            Difference end position
            </summary>
        </member>
        <member name="F:Bio.DifferenceNode.CompareFeature.featureType">
            <summary>
            Type of feature
            </summary>
        </member>
        <member name="F:Bio.DifferenceNode.CompareFeature.feature">
            <summary>
            Feature Description
            </summary>
        </member>
        <member name="M:Bio.DifferenceNode.CompareFeature.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the CompareFeature class.
            </summary>
            <param name="startPosition">Difference start position</param>
            <param name="endPosition">Difference end position</param>
            <param name="featureType">Type of feature</param>
            <param name="feature">Feature details</param>
        </member>
        <member name="P:Bio.DifferenceNode.CompareFeature.Start">
            <summary>
            Gets value of start index 
            </summary>
        </member>
        <member name="P:Bio.DifferenceNode.CompareFeature.End">
            <summary>
            Gets value of end index 
            </summary>
        </member>
        <member name="P:Bio.DifferenceNode.CompareFeature.FeatureType">
            <summary>
            Gets value of feature type
            </summary>
        </member>
        <member name="P:Bio.DifferenceNode.CompareFeature.Feature">
            <summary>
            Gets feature description
            </summary>
        </member>
        <member name="T:Bio.Distributions.BooleanStatistics">
            <summary>
            Implementation of SufficientStatistics class for Boolean values and
            Missing values which cannot be classified in either of two states. 
            </summary>
        </member>
        <member name="T:Bio.Distributions.SufficientStatistics">
            <summary>
            Act as a base class for classes which contains  distributional statistics.  
            </summary>
        </member>
        <member name="M:Bio.Distributions.SufficientStatistics.IsMissing">
            <summary>
            Determines the value of object which cannot be classified into any statistical distribution bins. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.Distributions.SufficientStatistics.AsStatisticsList">
            <summary>
            Converts current object to StatisticsList.
            </summary>
            <returns>StatisticsList object.</returns>
        </member>
        <member name="M:Bio.Distributions.SufficientStatistics.AsGaussianStatistics">
            <summary>
            Converts current object to GaussianStatistics.
            </summary>
            <returns>GaussianStatistics object.</returns>
        </member>
        <member name="M:Bio.Distributions.SufficientStatistics.AsContinuousStatistics">
            <summary>
            Converts current object to ContinuousStatistics.
            </summary>
            <returns>ContinuousStatistics object.</returns>
        </member>
        <member name="M:Bio.Distributions.SufficientStatistics.AsDiscreteStatistics">
            <summary>
            Converts current object to DiscreteStatistics.
            </summary>
            <returns>DiscreteStatistics object.</returns>
        </member>
        <member name="M:Bio.Distributions.SufficientStatistics.AsBooleanStatistics">
            <summary>
            Converts current object to BooleanStatistics.
            </summary>
            <returns>BooleanStatistics object.</returns>
        </member>
        <member name="M:Bio.Distributions.SufficientStatistics.Equals(Bio.Distributions.SufficientStatistics)">
            <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
            <param name="stats">The Object to compare with the current Object</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Bio.Distributions.SufficientStatistics.TryParse(System.String,Bio.Distributions.SufficientStatistics@)">
            <summary>
            Try converting the given string into SufficientStatistics object.
            </summary>
            <param name="val">string to be converted.</param>
            <param name="result">SufficentStatistics object which corresponding to the given string.</param>
            <returns>Whether string was successfully converted.</returns>
        </member>
        <member name="M:Bio.Distributions.SufficientStatistics.Parse(System.String)">
            <summary>
            Convert given string into SufficientStatistics object.
            If string is not in correct format, throws an argument exception.
            </summary>
            <param name="val">string to be converted.</param>
            <returns>SufficentStatistics object which corresponding to the given string.</returns>
        </member>
        <member name="M:Bio.Distributions.SufficientStatistics.CompareTo(Bio.Distributions.SufficientStatistics)">
            <summary>
             Compares the current object with another object of the same type.
            </summary>
            <param name="other"> An object to compare with this object.</param>
            <returns> A value that indicates the relative order of the objects being compared.
            The return value has the following meanings: Value Meaning Less than zero
            This object is less than the other parameter.Zero This object is equal to
            other. Greater than zero This object is greater than other.</returns>
        </member>
        <member name="M:Bio.Distributions.SufficientStatistics.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Bio.Distributions.SufficientStatistics.Equals(System.Object)">
            <summary>
            Determines whether the specified SObject is equal to the current Object.
            </summary>
            <param name="obj">The Object to compare with the current Object</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="F:Bio.Distributions.BooleanStatistics.Missing">
            <summary>
            Use integer mapping for consistent array indexing conventions.
            Missing value which cannot be classified in either of two states. 
            </summary>
        </member>
        <member name="F:Bio.Distributions.BooleanStatistics.False">
            <summary>
            False: Boolean state.
            </summary>
        </member>
        <member name="F:Bio.Distributions.BooleanStatistics.True">
            <summary>
            True: Boolean state.
            </summary>
        </member>
        <member name="F:Bio.Distributions.BooleanStatistics._value">
            <summary>
            Boolean value at current state.
            </summary>
        </member>
        <member name="F:Bio.Distributions.BooleanStatistics._isMissing">
            <summary>
            Whether boolean value is missing.
            </summary>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.#ctor">
            <summary>
            Instantiate a new instance of BooleanStatistics class as missing value.
            </summary>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.#ctor(System.Boolean)">
            <summary>
            Instantiate a new instance of BooleanStatistics class.
            </summary>
            <param name="classification">State of object. (True or False)</param>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.#ctor(Bio.Distributions.Classification)">
            <summary>
            Instantiate a new instance of BooleanStatistics class.
            </summary>
            <param name="classification">State of object. (True or False or Missing)</param>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.GetInstance(System.Boolean)">
            <summary>
            Instantiate a new instance of BooleanStatistics class.
            </summary>
            <param name="classification">The classification flag.</param>
            <returns></returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.ConvertToBooleanStatistics(System.Collections.Generic.Dictionary{System.String,Bio.Distributions.SufficientStatistics})">
            <summary>
            Convert Sufficient statistics to boolean statistics.
            </summary>
            <param name="dictionary">Dictionary containing key and state statistics.</param>
            <returns>Dictionary containing key and BooleanStatistics.</returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.ToString">
            <summary>
            Returns a System.String that represents the current Object.
            </summary>
            <returns>A string that represents the current Object.</returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.op_Implicit(Bio.Distributions.BooleanStatistics)~System.Boolean">
            <summary>
            Converts boolean statistics to boolean value.
            </summary>
            <param name="stats">Boolean statistics to be converted.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.op_Implicit(System.Boolean)~Bio.Distributions.BooleanStatistics">
            <summary>
            Converts boolean value to boolean statistics.
            </summary>
            <param name="classification">Boolean value to be converted.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.op_Explicit(Bio.Distributions.BooleanStatistics)~System.Int32">
            <summary>
            Converts boolean statistics to integer.
            </summary>
            <param name="stats">Boolean statistics to be converted.</param>
            <returns>Integer value representing boolean value.</returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.op_Explicit(Bio.Distributions.DiscreteStatistics)~Bio.Distributions.BooleanStatistics">
            <summary>
            Converts Discrete statistics to boolean statistics.
            </summary>
            <param name="stats">Object of discrete statistics to be converted.</param>
            <returns>Boolean statistics representing DiscreteStatistics</returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.op_Implicit(Bio.Distributions.BooleanStatistics)~Bio.Distributions.DiscreteStatistics">
            <summary>
            Converts BooleanStatistics to DiscreteStatistics.
            </summary>
            <param name="stats">Object of BooleanStatistics to be converted.</param>
            <returns>DiscreteStatistics object.</returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.op_Implicit(Bio.Distributions.MissingStatistics)~Bio.Distributions.BooleanStatistics">
            <summary>
            Converts MissingStatistics to boolean statistics.
            </summary>
            <param name="missing">Object of MissingStatistics to be converted.</param>
            <returns>BooleanStatistics object.</returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.Equals(System.Object)">
            <summary>
            Compares a given object with the current object.
            </summary>
            <param name="obj">Object to be compared.</param>
            <returns>True if both the objects are equal.</returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.Equals(Bio.Distributions.SufficientStatistics)">
            <summary>
            Compares a given SufficientStatistics object with the current object.
            </summary>
            <param name="stats">SufficientStatistics object to be compared</param>
            <returns>True if both the objects are equal.</returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.IsMissing">
            <summary>
            Determines the value of object which cannot be classified into any statistical distribution bins.
            </summary>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.TryParse(System.String,Bio.Distributions.SufficientStatistics@)">
            <summary>
            Try converting the given string into SufficientStatistics object.
            </summary>
            <param name="val">string to be converted.</param>
            <param name="result">SufficentStatistics object which corresponding to the given string.</param>
            <returns>Whether string was successfully converted.</returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.AsStatisticsList">
            <summary>
            Converts current object to StatisticsList.
            </summary>
            <returns>StatisticsList object.</returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.AsGaussianStatistics">
            <summary>
            Converts current object to GaussianStatistics.
            </summary>
            <returns>GaussianStatistics object.</returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.AsContinuousStatistics">
            <summary>
            Converts current object to ContinuousStatistics.
            </summary>
            <returns>ContinuousStatistics object.</returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.AsDiscreteStatistics">
            <summary>
            Converts current object to DiscreteStatistics.
            </summary>
            <returns>DiscreteStatistics object.</returns>
        </member>
        <member name="M:Bio.Distributions.BooleanStatistics.AsBooleanStatistics">
            <summary>
            Converts current object to BooleanStatistics.
            </summary>
            <returns>BooleanStatistics object.</returns>
        </member>
        <member name="P:Bio.Distributions.BooleanStatistics.GetMissingInstance">
            <summary>
            Gets a new instance of BooleanStatistics as missing value.
            </summary>
            <returns>Instance of boolean class and value as missing.</returns>
        </member>
        <member name="T:Bio.Distributions.Classification">
            <summary>
            Enumeration representing binary distribution.
            </summary>
        </member>
        <member name="F:Bio.Distributions.Classification.Missing">
            <summary>
            Missing values which cannot be classified in either of two states.
            </summary>
        </member>
        <member name="F:Bio.Distributions.Classification.False">
            <summary>
            False state.
            </summary>
        </member>
        <member name="F:Bio.Distributions.Classification.True">
            <summary>
            True State.
            </summary>
        </member>
        <member name="T:Bio.Distributions.ContinuousStatistics">
            <summary>
            Continuous Statistics class.
            </summary>
        </member>
        <member name="F:Bio.Distributions.ContinuousStatistics._value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="F:Bio.Distributions.ContinuousStatistics._isMissing">
            <summary>
            IsMissing.
            </summary>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.#ctor">
            <summary>
            Continuous Statistics.
            </summary>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.#ctor(System.Double)">
            <summary>
            Continuous Statistics.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.GetInstance(System.Double)">
            <summary>
            Get Instance.
            </summary>
            <param name="value">The value.</param>
            <returns>Continuous Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.TryParse(System.String,Bio.Distributions.SufficientStatistics@)">
            <summary>
            Try Parse.
            </summary>
            <param name="val">Value String.</param>
            <param name="result">Sufficient Statistics.</param>
            <returns>Return true in parsed properly.</returns>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.IsMissing">
            <summary>
            Is Missing.
            </summary>
            <returns>True if missing.</returns>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.op_Implicit(System.Double)~Bio.Distributions.ContinuousStatistics">
            <summary>
            Converts double to Continuous Statistics.
            </summary>
            <param name="value">The Value</param>
            <returns>Continuous Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.op_Implicit(Bio.Distributions.ContinuousStatistics)~System.Double">
            <summary>
            Converts ContinuousStatistics to double.
            </summary>
            <param name="stats">Continuous Statistics.</param>
            <returns>Double.</returns>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.op_Implicit(Bio.Distributions.MissingStatistics)~Bio.Distributions.ContinuousStatistics">
            <summary>
            Converts MissingStatistics to ContinuousStatistics.
            </summary>
            <param name="missing">Missing Statistics.</param>
            <returns>ContinuousStatistics.</returns>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.op_Implicit(Bio.Distributions.DiscreteStatistics)~Bio.Distributions.ContinuousStatistics">
            <summary>
            Converts DiscreteStatistics to ContinuousStatistics.
            </summary>
            <param name="discreteStats">Discrete Statistics.</param>
            <returns>ContinuousStatistics.</returns>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.op_Explicit(Bio.Distributions.ContinuousStatistics)~Bio.Distributions.DiscreteStatistics">
            <summary>
            Converts ContinuousStatistics to DiscreteStatistics.
            </summary>
            <param name="continuousStats">Continuous Statistics.</param>
            <returns>DiscreteStatistics.</returns>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.Equals(System.Object)">
            <summary>
            Compares a given object with the current object.
            </summary>
            <param name="obj">The object.</param>
            <returns>True if both the objects are equal.</returns>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.Equals(Bio.Distributions.SufficientStatistics)">
            <summary>
            Compares a given SufficientStatistics object with the current object.
            </summary>
            <param name="stats">SufficientStatistics object to be compared.</param>
            <returns>True if both the objects are equal.</returns>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.GetHashCode">
            <summary>
            Get Hash Code.
            </summary>
            <returns>Returns the Hash code.</returns>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.ToString">
            <summary>
            converts to string.
            </summary>
            <returns>Returns value in string format.</returns>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.AsStatisticsList">
            <summary>
            Converts current object As Statistics List.
            </summary>
            <returns>Statistics List.</returns>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.AsGaussianStatistics">
            <summary>
            Converts current object As Gaussian Statistics.
            </summary>
            <returns>Gaussian Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.AsContinuousStatistics">
            <summary>
            Converts current object As Continuous Statistics.
            </summary>
            <returns>Continuous Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.AsDiscreteStatistics">
            <summary>
            Converts current object As Discrete Statistics.
            </summary>
            <returns>Discrete Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.ContinuousStatistics.AsBooleanStatistics">
            <summary>
            Converts current object As Boolean Statistics.
            </summary>
            <returns>Boolean Statistics.</returns>
        </member>
        <member name="P:Bio.Distributions.ContinuousStatistics.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:Bio.Distributions.ContinuousStatistics.GetMissingInstance">
            <summary>
            GetMissing Instance.
            </summary>
            <returns>Continuous Statistics.</returns>
        </member>
        <member name="T:Bio.Distributions.Converters.CharToSufficientStatisticsConverter">
            <summary>
            Converts character to sufficient statistics.
            </summary>
        </member>
        <member name="T:Bio.Util.ValueConverter`2">
            <summary>
            A pair of functions used by ConvertView to transform a matrix's non-missing values from one type to another. The two functions are
            perfect inverses of each other.
            </summary>
            <typeparam name="TInput">The type to convert from</typeparam>
            <typeparam name="TOutput">The type to convert to</typeparam>
            
        </member>
        <member name="T:Bio.Util.ValueConverter">
            <summary>
            A set of predefined converter pairs for use with ConvertValueView.
            </summary>
        </member>
        <member name="M:Bio.Util.ValueConverter.GetCharToGeneric``1">
            <summary>
            Tries to convert a character into any other type.
            </summary>
            <typeparam name="T">The other type</typeparam>
            <returns>The converter</returns>
        </member>
        <member name="F:Bio.Util.ValueConverter.CharToInt">
            <summary>
            Converts the characters '0'...'9' to the integers 0 ... 9
            </summary>
        </member>
        <member name="F:Bio.Util.ValueConverter.IntToChar">
            <summary>
            Converts the integers 0...9 to the characters '0' ... '9'
            </summary>
        </member>
        <member name="F:Bio.Util.ValueConverter.CharToString">
            <summary>
            Converts a character into a string.
            </summary>
        </member>
        <member name="F:Bio.Util.ValueConverter.StringToChar">
            <summary>
            Converts a length-one string into a character.
            </summary>
        </member>
        <member name="F:Bio.Util.ValueConverter.CharToDouble">
            <summary>
            Converts the characters '0' ... '9' to the doubles 0.0 ... 9.0.
            </summary>
        </member>
        <member name="F:Bio.Util.ValueConverter.IntToDouble">
            <summary>
            Converts an integer to a double
            </summary>
        </member>
        <member name="F:Bio.Util.ValueConverter.Int01ToDouble">
            <summary>
            Converts an int 0 and int 1 to a double
            </summary>
        </member>
        <member name="F:Bio.Util.ValueConverter.DoubleToChar">
            <summary>
            Converts the doubles 0.0 ... 9.0 to the characters '0' ... '9'.
            </summary>
        </member>
        <member name="F:Bio.Util.ValueConverter.DoubleToInt">
            <summary>
            Converts a double to an int.
            </summary>
        </member>
        <member name="F:Bio.Util.ValueConverter.DoubleToInt01">
            <summary>
            Converts a double to an int 0 or int 1.
            </summary>
        </member>
        <member name="F:Bio.Util.ValueConverter.Char01ToMinusOneOne">
            <summary>
            Converts the character '0' to the double -1.0 and the character '1' to the double 1.0.
            </summary>
        </member>
        <member name="F:Bio.Util.ValueConverter.MinusOneOneToChar01">
            <summary>
            Converts the double -1.0 to the character '0' and the double 1.0 to the character '1'.
            </summary>
        </member>
        <member name="F:Bio.Util.ValueConverter.Char01ToBool">
            <summary>
            Converts the character '0' to boolean false and the character '1' to boolean true.
            </summary>
        </member>
        <member name="F:Bio.Util.ValueConverter.BoolToChar01">
            <summary>
             Converts boolean false to the character '0' and boolean true to character '1'
            </summary>
        </member>
        <member name="F:Bio.Util.ValueConverter.CharACTGToDouble0123Converter">
            <summary>
            Converts the characters 'A', 'C', 'T', 'G' to doubles 0.0, 1.0, 3.0, 2.0.
            Lower case is accepted, the inverse always produces uppercase.
            </summary>
        </member>
        <member name="M:Bio.Util.ValueConverter`2.#ctor(System.Func{`0,`1},System.Func{`1,`0})">
            <summary>
            Initializes a new instance of the ValueConverter class.
            </summary>
            <param name="convertForward">A function used to a matrix's non-missing values from one type to another.</param>
            <param name="convertBackward">The perfect inverse of ConvertForward</param>
        </member>
        <member name="P:Bio.Util.ValueConverter`2.ConvertForward">
            <summary>
            A function used to a matrix's non-missing values from one type to another.
            </summary>
        </member>
        <member name="P:Bio.Util.ValueConverter`2.ConvertBackward">
            <summary>
            The perfect inverse of ConvertForward
            </summary>
        </member>
        <member name="P:Bio.Util.ValueConverter`2.Inverted">
            <summary>
            The ValueConverter that reverses ConvertForward and ConvertBackward
            </summary>
        </member>
        <member name="M:Bio.Distributions.Converters.CharToSufficientStatisticsConverter.#ctor">
            <summary>
            Create instance of CharToSufficientStatisticsConverter class.
            </summary>
        </member>
        <member name="T:Bio.Distributions.Converters.IntToSufficientStatisticsConverter">
            <summary>
            Converts Integer to SufficientStatistics.
            </summary>
        </member>
        <member name="M:Bio.Distributions.Converters.IntToSufficientStatisticsConverter.#ctor">
            <summary>
            Instantiate a new instance of IntToSufficientStatistics class.
            </summary>
        </member>
        <member name="T:Bio.Distributions.Converters.StringToDoubleConverter">
            <summary>
            Class which converts from string to double
            </summary>
        </member>
        <member name="M:Bio.Distributions.Converters.StringToDoubleConverter.#ctor">
            <summary>
            Create instance of StringToDoubleConverter class. 
            </summary>
        </member>
        <member name="T:Bio.Distributions.Converters.ValueConverters">
            <summary>
            Static class which contains converters. 
            </summary>
        </member>
        <member name="F:Bio.Distributions.Converters.ValueConverters.StringToDoubleConverter">
            <summary>
            Converts from string to double;
            </summary>
        </member>
        <member name="F:Bio.Distributions.Converters.ValueConverters.IntToSufficientStatistics">
            <summary>
            Converts from int to Sufficient Statistics.
            </summary>
        </member>
        <member name="F:Bio.Distributions.Converters.ValueConverters.SufficientStatisticsToInt">
            <summary>
            Converts from Sufficient statistics to integer.
            </summary>
        </member>
        <member name="F:Bio.Distributions.Converters.ValueConverters.CharToSufficientStatistics">
            <summary>
            Convert from character to sufficient statistics.
            </summary>
        </member>
        <member name="F:Bio.Distributions.Converters.ValueConverters.SufficientStatisticsToChar">
            <summary>
            Convert from Sufficient statistics to character.
            </summary>
        </member>
        <member name="T:Bio.Distributions.DiscreteStatistics">
            <summary>
            Discrete Statistics.This can not take a value between two values unlike Continuous Statistics.
            </summary>
        </member>
        <member name="F:Bio.Distributions.DiscreteStatistics._value">
            <summary>
            The Value.
            </summary>
        </member>
        <member name="F:Bio.Distributions.DiscreteStatistics._isMissing">
            <summary>
            Is missing flag.
            </summary>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.#ctor">
            <summary>
            Discrete Statistics constructor.
            </summary>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.#ctor(System.Int32)">
            <summary>
            Discrete Statistics constructor.
            </summary>
            <param name="discreteClassification">The Discrete Classification.</param>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.GetInstance(System.Int32)">
            <summary>
            Get Instance.
            </summary>
            <param name="discreteteClassification">Discrete Classification.</param>
            <returns>Discrete Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.TryParse(System.String,Bio.Distributions.SufficientStatistics@)">
            <summary>
            Try to Parse the value.
            </summary>
            <param name="val">The value.</param>
            <param name="result">Sufficient Statistics result.</param>
            <returns>Returns true if parsed properly.</returns>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.IsMissing">
            <summary>
            Checks the IsMissing flag and returns it.
            </summary>
            <returns>Returns the IsMissing flag.</returns>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.op_Implicit(System.Int32)~Bio.Distributions.DiscreteStatistics">
            <summary>
            Int to Discrete Statistics converter.
            </summary>
            <param name="classification">The classification.</param>
            <returns>Returns the converted type.</returns>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.op_Implicit(Bio.Distributions.DiscreteStatistics)~System.Int32">
            <summary>
            Discrete Statistics to Int converter.
            </summary>
            <param name="stats">Discrete Statistics.</param>
            <returns>Returns the converted type.</returns>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.op_Implicit(Bio.Distributions.MissingStatistics)~Bio.Distributions.DiscreteStatistics">
            <summary>
            Missing Statistics to Discrete Statistics converter.
            </summary>
            <param name="missing">Missing Statistics.</param>
            <returns>Returns the converted type.</returns>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.Equals(System.Object)">
            <summary>
            Compares object with Sufficient Statistics.
            </summary>
            <param name="obj">The object.</param>
            <returns>Returns true if fount equals.</returns>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.Equals(Bio.Distributions.SufficientStatistics)">
            <summary>
            Compares Sufficient Statistics with Discrete Statistics and Boolean Statistics.
            </summary>
            <param name="stats">Sufficient Statistics.</param>
            <returns>Returns true if equal.</returns>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.GetHashCode">
            <summary>
            Get Hash Code.
            </summary>
            <returns>Returns the Hash code.</returns>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>Returns to string.</returns>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.AsStatisticsList">
            <summary>
            Converts current object As Statistics List.
            </summary>
            <returns>Statistics List.</returns>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.AsGaussianStatistics">
            <summary>
            Converts current object As Gaussian Statistics.
            </summary>
            <returns>Gaussian Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.AsContinuousStatistics">
            <summary>
            Converts current object As Continuous Statistics.
            </summary>
            <returns>Continuous Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.AsDiscreteStatistics">
            <summary>
            Converts current object As Discrete Statistics.
            </summary>
            <returns>Discrete Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.DiscreteStatistics.AsBooleanStatistics">
            <summary>
            Converts current object As Boolean Statistics.
            </summary>
            <returns>Boolean Statistics.</returns>
        </member>
        <member name="P:Bio.Distributions.DiscreteStatistics.Value">
            <summary>
            The Value.
            </summary>
        </member>
        <member name="P:Bio.Distributions.DiscreteStatistics.GetMissingInstance">
            <summary>
            Get Missing Instance.
            </summary>
            <returns>Discrete Statistics.</returns>
        </member>
        <member name="T:Bio.Distributions.GaussianStatistics">
            <summary>
            Gaussian Statistics. It assumes that the observations are closely clustered 
            around the mean, μ, and this amount is decaying quickly as we go farther away from the mean.
            </summary>
        </member>
        <member name="F:Bio.Distributions.GaussianStatistics._mean">
            <summary>
            The mean Value.
            </summary>
        </member>
        <member name="F:Bio.Distributions.GaussianStatistics._variance">
            <summary>
            The Variance.
            </summary>
        </member>
        <member name="F:Bio.Distributions.GaussianStatistics._sampleSize">
            <summary>
            Sample size.
            </summary>
        </member>
        <member name="F:Bio.Distributions.GaussianStatistics._isMissing">
            <summary>
            IsMissing flag.
            </summary>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.#ctor">
            <summary>
            Constructor Gaussian Statistics.
            </summary>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Constructor Gaussian Statistics.
            </summary>
            <param name="mean">The Mean.</param>
            <param name="var">The Variance.</param>
            <param name="sampleSize">The Sample size.</param>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.GetInstance(System.Double,System.Double,System.Int32)">
            <summary>
            Gets new Instance.
            </summary>
            <param name="mean">The mean.</param>
            <param name="variance">The Variance.</param>
            <param name="sampleSize">Sample size.</param>
            <returns>Gaussian Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.GetInstance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Get's the sufficient statistics of the population using <b>population</b> variance (as opposed to the unbiased sample variance).
            </summary>
            <param name="observations">Collection of observations.</param>
            <returns>Gaussian Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.TryParse(System.String,Bio.Distributions.SufficientStatistics@)">
            <summary>
            Try Parse the value.
            </summary>
            <param name="val">The Value.</param>
            <param name="result">Sufficient Statistics result.</param>
            <returns>Returns true if parsed properly.</returns>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>Returns to string.</returns>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.IsMissing">
            <summary>
            Checks the IsMissing flag and returns it.
            </summary>
            <returns>Returns the IsMissing flag.</returns>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.Equals(System.Object)">
            <summary>
            Compares object with Sufficient Statistics.
            </summary>
            <param name="obj">The Object.</param>
            <returns>Returns true if fount equals.</returns>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.Equals(Bio.Distributions.SufficientStatistics)">
            <summary>
            Compares Sufficient Statistics.
            </summary>
            <param name="stats">Sufficient Statistics.</param>
            <returns>Returns true if equal.</returns>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.GetHashCode">
            <summary>
            Get Hash Code.
            </summary>
            <returns>Returns the Hash code.</returns>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.op_Implicit(Bio.Distributions.MissingStatistics)~Bio.Distributions.GaussianStatistics">
            <summary>
            Missing Statistics to Gaussian Statistics converter.
            </summary>
            <param name="missing">Missing Statistics</param>
            <returns>Returns the converted type.</returns>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.AsStatisticsList">
            <summary>
            Converts current object As Statistics List.
            </summary>
            <returns>Statistics List.</returns>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.AsGaussianStatistics">
            <summary>
            Converts current object As Gaussian Statistics.
            </summary>
            <returns>Gaussian Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.AsContinuousStatistics">
            <summary>
            Converts current object As Continuous Statistics.
            </summary>
            <returns>Continuous Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.AsDiscreteStatistics">
            <summary>
            Converts current object As Discrete Statistics.
            </summary>
            <returns>Discrete Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.AsBooleanStatistics">
            <summary>
            Converts current object As Boolean Statistics.
            </summary>
            <returns>Boolean Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.GaussianStatistics.Add(Bio.Distributions.GaussianStatistics,Bio.Distributions.GaussianStatistics)">
            <summary>
            Add two Gaussian Statistics.
            </summary>
            <param name="x">GaussianStatistics x.</param>
            <param name="y">GaussianStatistics y.</param>
            <returns>Returns added result of two Gaussian Statistics.</returns>
        </member>
        <member name="P:Bio.Distributions.GaussianStatistics.GetMissingInstance">
            <summary>
            Get Missing Instance.
            </summary>
            <returns>Gaussian Statistics.</returns>
        </member>
        <member name="P:Bio.Distributions.GaussianStatistics.Mean">
            <summary>
            The Mean value.
            </summary>
        </member>
        <member name="P:Bio.Distributions.GaussianStatistics.Variance">
            <summary>
            The Variance.
            </summary>
        </member>
        <member name="P:Bio.Distributions.GaussianStatistics.SampleSize">
            <summary>
            The sample Size.
            </summary>
        </member>
        <member name="P:Bio.Distributions.GaussianStatistics.SumOfSquares">
            <summary>
            Sum Of Squares.
            </summary>
        </member>
        <member name="T:Bio.Distributions.MissingStatistics">
            <summary>
            Missing Statistics class.
            </summary>
        </member>
        <member name="F:Bio.Distributions.MissingStatistics.MissingChar">
            <summary>
            Missing Character.
            </summary>
        </member>
        <member name="M:Bio.Distributions.MissingStatistics.#ctor">
            <summary>
            Missing Statistics constructor.
            </summary>
        </member>
        <member name="F:Bio.Distributions.MissingStatistics._singleton">
            <summary>
            Lazy Missing Statistics singleton.
            </summary>
        </member>
        <member name="M:Bio.Distributions.MissingStatistics.TryParse(System.String,Bio.Distributions.SufficientStatistics@)">
            <summary>
            Try Parse the value.
            </summary>
            <param name="val">The Value.</param>
            <param name="result">Sufficient Statistics result.</param>
            <returns>Returns true if parsed properly.</returns>
        </member>
        <member name="M:Bio.Distributions.MissingStatistics.IsMissing">
            <summary>
            Checks the IsMissing flag and returns it.
            </summary>
            <returns>Returns the IsMissing flag.</returns>
        </member>
        <member name="M:Bio.Distributions.MissingStatistics.Equals(Bio.Distributions.SufficientStatistics)">
            <summary>
            Compares object with Is Missing.
            </summary>
            <param name="stats">Sufficient Statistics.</param>
            <returns>Returns true if fount equals.</returns>
        </member>
        <member name="M:Bio.Distributions.MissingStatistics.Equals(System.Object)">
            <summary>
            Compares object with Sufficient Statistics.
            </summary>
            <param name="obj">The Object.</param>
            <returns>Returns true if fount equals.</returns>
        </member>
        <member name="M:Bio.Distributions.MissingStatistics.GetHashCode">
            <summary>
            Get Hash code.
            </summary>
            <returns>Returns Hash code.</returns>
        </member>
        <member name="M:Bio.Distributions.MissingStatistics.ToString">
            <summary>
            Get Hash Code.
            </summary>
            <returns>Returns the Hash code.</returns>
        </member>
        <member name="M:Bio.Distributions.MissingStatistics.AsStatisticsList">
            <summary>
            Converts current object As Statistics List.
            </summary>
            <returns>Statistics List.</returns>
        </member>
        <member name="M:Bio.Distributions.MissingStatistics.AsGaussianStatistics">
            <summary>
            Converts current object As Gaussian Statistics.
            </summary>
            <returns>Gaussian Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.MissingStatistics.AsContinuousStatistics">
            <summary>
            Converts current object As Continuous Statistics.
            </summary>
            <returns>Continuous Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.MissingStatistics.AsDiscreteStatistics">
            <summary>
            Converts current object As Discrete Statistics.
            </summary>
            <returns>Discrete Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.MissingStatistics.AsBooleanStatistics">
            <summary>
            Converts current object As Boolean Statistics.
            </summary>
            <returns>Boolean Statistics.</returns>
        </member>
        <member name="P:Bio.Distributions.MissingStatistics.GetInstance">
            <summary>
            Get Instance.
            </summary>
            <returns>Missing Statistics.</returns>
        </member>
        <member name="T:Bio.Distributions.MixtureSemantics">
            <summary>
             none (the old Mixture==false), if a position contains {ab}, consider it missing with regards to a and b, but say it doesn't have c.
             pure (the old Mixture==true), if a position contains {ab} say that it has neither.
             any  (a new possibility), if a position contains {ab}, say that it has both.
            </summary>
        </member>
        <member name="F:Bio.Distributions.MixtureSemantics.none">
            <summary>
            (the old Mixture==false),   
            </summary>
        </member>
        <member name="F:Bio.Distributions.MixtureSemantics.pure">
            <summary>
            (the old Mixture==true), if a position contains {ab} say that it has neither.
            </summary>
        </member>
        <member name="F:Bio.Distributions.MixtureSemantics.any">
            <summary>
            any  (a new possibility), if a position contains {ab}, say that it has both.
            </summary>
        </member>
        <member name="T:Bio.Distributions.StatisticsList">
            <summary>
            Statistics List.
            </summary>
        </member>
        <member name="F:Bio.Distributions.StatisticsList.Separator">
            <summary>
            The separator.
            </summary>
        </member>
        <member name="F:Bio.Distributions.StatisticsList.stats">
            <summary>
            List of SufficientStatistics.
            </summary>
        </member>
        <member name="F:Bio.Distributions.StatisticsList.isMissing">
            <summary>
            IsMissing Flag.
            </summary>
        </member>
        <member name="F:Bio.Distributions.StatisticsList.hashCode">
            <summary>
            Hash Code.
            </summary>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.#ctor">
            <summary>
            Statistics List constructor.
            </summary>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.#ctor(System.Collections.Generic.IEnumerable{Bio.Distributions.SufficientStatistics})">
            <summary>
            Statistics List constructor.
            </summary>
            <param name="stats">Collection of Sufficient Statistics.</param>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.GetInstance(Bio.Distributions.SufficientStatistics[])">
            <summary>
            Get Instance.
            </summary>
            <param name="stats">Variable number of Sufficient Statistics input.</param>
            <returns></returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.GetInstance(System.Collections.Generic.IEnumerable{Bio.Distributions.SufficientStatistics})">
            <summary>
            Get Instance.
            </summary>
            <param name="stats">Collection of Sufficient Statistics.</param>
            <returns>Statistics List.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.TryParse(System.String,Bio.Distributions.SufficientStatistics@)">
            <summary>
            Try Parse the value.
            </summary>
            <param name="val">The Value.</param>
            <param name="result">Sufficient Statistics result.</param>
            <returns>Returns true if parsed properly.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.Add(Bio.Distributions.SufficientStatistics)">
            <summary>
            Add Sufficient Statistics.
            </summary>
            <param name="statsToAdd">Stats To Add.</param>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.Add(Bio.Distributions.SufficientStatistics,Bio.Distributions.SufficientStatistics)">
            <summary>
            Add two Sufficient Statistics.
            </summary>
            <param name="stats1">Sufficient Statistics 1.</param>
            <param name="stats2">Sufficient Statistics 2.</param>
            <returns>Returns the Addition of all.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.IsMissing">
            <summary>
            Checks the IsMissing flag and returns it.
            </summary>
            <returns>Returns the IsMissing flag.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.op_Implicit(Bio.Distributions.MissingStatistics)~Bio.Distributions.StatisticsList">
            <summary>
            Missing Statistics to Statistics List converter.
            </summary>
            <param name="missing">Missing Statistics.</param>
            <returns>Returns the converted type.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.Equals(System.Object)">
            <summary>
            Compares object with Sufficient Statistics.
            </summary>
            <param name="obj">The Object.</param>
            <returns>Returns true if fount equals.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.Equals(Bio.Distributions.SufficientStatistics)">
            <summary>
            Compares Sufficient Statistics.
            </summary>
            <param name="stats">Sufficient Statistics.</param>
            <returns>Returns true if equal.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.GetHashCode">
            <summary>
            Gets the Hash code.
            </summary>
            <returns>Returns the Hash code.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>Returns string.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.AsStatisticsList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.AsGaussianStatistics">
            <summary>
            Converts current object As Statistics List.
            </summary>
            <returns>Statistics List.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.AsContinuousStatistics">
            <summary>
            Converts current object As Continuous Statistics.
            </summary>
            <returns>Continuous Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.AsDiscreteStatistics">
            <summary>
            Converts current object As Discrete Statistics.
            </summary>
            <returns>Discrete Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.AsBooleanStatistics">
            <summary>
            Converts current object As Boolean Statistics.
            </summary>
            <returns>Boolean Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.GetEnumerator">
            <summary>
            Gets Enumerator for Sufficient Statistics.
            </summary>
            <returns>Returns Enumerator of Sufficient Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets Enumerator.
            </summary>
            <returns>Returns Enumerator.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.Clone">
            <summary>
            Gives the clone of Statistics List. 
            </summary>
            <returns>Returns clone of Statistics List.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.Remove(System.Int32)">
            <summary>
            Remove value from Sufficient Statistics.
            </summary>
            <param name="i">The index from SufficientStatistics to be removed.</param>
            <returns>Returns Sufficient Statistics.</returns>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.ResetIsMissing">
            <summary>
            Reset Is Missing.
            </summary>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove Range.
            </summary>
            <param name="startPos">Starting position.</param>
            <param name="count">The no of Count to be removed.</param>
        </member>
        <member name="M:Bio.Distributions.StatisticsList.SubSequence(System.Int32,System.Int32)">
            <summary>
            The Sub Sequence.
            </summary>
            <param name="start">Starting position.</param>
            <param name="count">The Count.</param>
            <returns>Sufficient Statistics.</returns>
        </member>
        <member name="P:Bio.Distributions.StatisticsList.Item(System.Int32)">
            <summary>
            Sufficient Statistics indexer.
            </summary>
            <param name="idx">Index id.</param>
            <returns>Gets or sets the index based on index id.</returns>
        </member>
        <member name="P:Bio.Distributions.StatisticsList.Count">
            <summary>
            Stats count.
            </summary>
        </member>
        <member name="P:Bio.Distributions.StatisticsList.Last">
            <summary>
            Sufficient Statistics end.
            </summary>
        </member>
        <member name="P:Bio.Distributions.StatisticsList.GetMissingInstance">
            <summary>
            Get Missing Instance.
            </summary>
            <returns>Statistics List.</returns>
        </member>
        <member name="T:Bio.Distributions.WriteType">
            <summary>
            Enumeration depicting the values stored in matrix.
            </summary>
        </member>
        <member name="F:Bio.Distributions.WriteType.Binary">
            <summary>
            Binary state of output variable.
            </summary>
        </member>
        <member name="F:Bio.Distributions.WriteType.MultiState">
            <summary>
            Multistate (Discrete) state of output variable.
            </summary>
        </member>
        <member name="T:Bio.Extensions.AlphabetExtensions">
            <summary>
            Alphabet extensions used to supplement the IAlphabet interface without
            requiring an implementation by the class.
            </summary>
        </member>
        <member name="M:Bio.Extensions.AlphabetExtensions.CheckIsTermination(Bio.IAlphabet,System.Byte)">
            <summary>
            This returns true/false if the given symbol value is considered a termination
            value in the alphabet.
            </summary>
            <param name="alphabet">Alphabet to test</param>
            <param name="value">Value to check</param>
            <returns>True if value is a termination symbol, false if terminations are not supported or value is not.</returns>
        </member>
        <member name="M:Bio.Extensions.AlphabetExtensions.CheckIsTermination(Bio.IAlphabet,System.Char)">
            <summary>
            This returns true/false if the given symbol value is considered a termination
            value in the alphabet.
            </summary>
            <param name="alphabet">Alphabet to test</param>
            <param name="value">Value to check</param>
            <returns>True if value is a termination symbol, false if terminations are not supported or value is not.</returns>
        </member>
        <member name="M:Bio.Extensions.AlphabetExtensions.CheckIsGap(Bio.IAlphabet,System.Char)">
            <summary>
            Checks if the provided item is a gap character or not
            </summary>
            <param name="alphabet">Alphabet to test against.</param>
            <param name="item">Item to be checked</param>
            <returns>True if the specified item is a gap</returns>
        </member>
        <member name="M:Bio.Extensions.AlphabetExtensions.CheckIsAmbiguous(Bio.IAlphabet,System.Char)">
            <summary>
            Checks if the provided item is an ambiguous character or not
            </summary>
            <param name="alphabet">Alphabet to test against.</param>
            <param name="item">Item to be checked</param>
            <returns>True if the specified item is a ambiguous</returns>
        </member>
        <member name="M:Bio.Extensions.AlphabetExtensions.GetFriendlyName(Bio.IAlphabet,System.Char)">
            <summary>
            Gets the friendly name of a given symbol.
            </summary>
            <param name="alphabet"> </param>
            <param name="item">Symbol to find friendly name.</param>
            <returns>Friendly name of the given symbol.</returns>
        </member>
        <member name="T:Bio.Core.Extensions.ArrayExtensions">
            <summary>
            Extension methods for arrays
            </summary>
        </member>
        <member name="M:Bio.Core.Extensions.ArrayExtensions.GetLongLength(System.Array)">
            <summary>
            This method provides access to the LongLength property in a 
            portable fashion by looking it up for the platform using reflection.
            The PropertyInfo is cached off for performance.
            </summary>
            <param name="data">Array</param>
            <returns>64-bit length</returns>
        </member>
        <member name="M:Bio.Core.Extensions.ArrayExtensions.LongCopy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>
            This method performs a 64-bit array copy if the platform supports it.
            </summary>
            <param name="source">Source array</param>
            <param name="startSource">Starting position</param>
            <param name="dest">Destination array</param>
            <param name="startDest">Starting position</param>
            <param name="count">Count</param>
        </member>
        <member name="M:Bio.Core.Extensions.ArrayExtensions.ConvertAll``2(``0[],System.Func{``0,``1})">
            <summary>
            Runs each item through a conversion and returns the produced array.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TOutput"></typeparam>
            <param name="input"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Core.Extensions.ArrayExtensions.Initialize">
            <summary>
            Method to locate our cached reflection data.
            </summary>
        </member>
        <member name="M:Bio.Core.Extensions.ArrayExtensions.GetRange``1(``0[],System.Int32,System.Int32)">
            <summary>
            Returns a new array with the specified range of values.
            </summary>
            <typeparam name="T">Array type.</typeparam>
            <param name="data">Source data.</param>
            <param name="startIndex">Index to begind sub array at.</param>
            <param name="length">Length of sub array.</param>
            <returns></returns>
        </member>
        <member name="T:Bio.AsciiEncoding">
            <summary>
            Simple ASCII encoder
            </summary>
        </member>
        <member name="T:Bio.Util.DictionaryExtensions">
            <summary>
            Extension methods for IDictionary{TKey,TValue}
            </summary>
        </member>
        <member name="M:Bio.Util.DictionaryExtensions.Invert``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            With throw exception if not 1-1 mapping.
            </summary>
        </member>
        <member name="M:Bio.Util.DictionaryExtensions.AsRestrictedAccessDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Creates a shallow ReadOnly dictionary wrapper around the given dictionary.
            </summary>
        </member>
        <member name="M:Bio.Util.DictionaryExtensions.AsRestrictedAccessDictionary``2(System.Collections.Generic.IDictionary{``0,``1},Bio.Util.AccessFlags)">
            <summary>
            Creates a shallow restricted access dictionary wrapper around the given dictionary. Only access specified by the flags is allowed.
            </summary>
        </member>
        <member name="M:Bio.Util.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Boolean)">
            <summary>
            Returns the value associated with key in the dictionary. If not present, adds the default value to the dictionary and returns that
            value.
            </summary>
        </member>
        <member name="M:Bio.Util.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets a value from a dictionary. If they value is not there, adds the default value to the dictionary and returns that.
            Not thread safe because it can add items to the dictionary.
            </summary>
            <typeparam name="TKey">The type of the dictionary's key</typeparam>
            <typeparam name="TValue">The type of the dictionary's value</typeparam>
            <param name="dictionary">The dictionary</param>
            <param name="key">The key of the value to retrieve.</param>
            <returns>A value for this key.</returns>
        </member>
        <member name="M:Bio.Util.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value associated with key in the dictionary. If not present, adds the default value to the dictionary and returns that
            value.
            </summary>
        </member>
        <member name="M:Bio.Util.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1},System.Boolean)">
            <summary>
            Returns the value associated with key in the dictionary. If not present, adds the default value to the dictionary and returns that
            value.
            </summary>
        </member>
        <member name="M:Bio.Util.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Boolean)">
            <summary>
            Returns the value associated with key in the dictionary. If not present, adds the default value to the dictionary and returns that
            value.
            </summary>
        </member>
        <member name="T:Bio.Util.HashSetExtensions">
            <summary>
            Extension methods related to HashSet
            </summary>
        </member>
        <member name="M:Bio.Util.HashSetExtensions.AddNewOrOldRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of values to a hashset. It is OK if the values are already of the hashset.
            </summary>
            <typeparam name="T">The type of the hashset's elements</typeparam>
            <param name="hashSet">The hashset to add values to</param>
            <param name="sequence">A sequence of values to add to the hashset.</param>
        </member>
        <member name="T:Bio.Util.IEnumerableExtensions">
            <summary>
            Extensions to IEnumerable{T}
            </summary>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
            <summary>
            Returns the element at a specified index in a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="collection"> An System.Collections.Generic.IEnumerable to return an element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <returns>The element at the specified position in the source sequence.</returns>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Shuffles the elements of a sequence.
            </summary>
            <typeparam name="T">the type of the elements in the sequence</typeparam>
            <param name="sequence">The sequence of elements to shuffle</param>
            <param name="random">a random number instance</param>
            <returns>a list of shuffled items</returns>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.StringJoin(System.Collections.IEnumerable)">
            <summary>
            Creates a string from a sequence of elements. No delimiter is used.
            </summary>
            <param name="sequence">the sequence</param>
            <returns>a string</returns>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.StringJoin(System.Collections.IEnumerable,System.String)">
            <summary>
            Creates a delimited string from a sequence of elements.
            </summary>
            <param name="sequence">the sequence</param>
            <param name="separator">the delimiter</param>
            <returns>a string</returns>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.StringJoin(System.Collections.IEnumerable,System.String,System.Int32,System.String)">
            <summary>
            Creates a delimited string from a sequence of elements. At most maxLength elements will be used and "..." shows that more elements were in the list.
            </summary>
            <param name="sequence">a sequence</param>
            <param name="separator">the delimiter</param>
            <param name="maxLength">the maximum number of elements in the string.  It must be at least 2 or an exception is thrown.</param>
            <param name="etcString">the string to use of more than maxLength elements are found</param>
            <returns>a string</returns>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a HashSet from a sequence. If the sequence is already a HashSet, a new HashSet is still created.
            </summary>
            <typeparam name="T">the type of elements of the sequence</typeparam>
            <param name="sequence">the input sequence</param>
            <returns>a HashSet</returns>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a Queue from a sequence. If the sequence is already a Queue, a new Queue is still created.
            </summary>
            <typeparam name="T">the type of elements of the sequence</typeparam>
            <param name="sequence">the input sequence</param>
            <returns>a Queue</returns>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a HashSet from a sequence. If the sequence is already a HashSet, a new HashSet is still created.
            </summary>
            <typeparam name="T">the type of elements of the sequence</typeparam>
            <param name="sequence">the input sequence</param>
            <param name="comparer">The IEqualityComparer used by the HashSet</param>
            <returns>a HashSet</returns>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Creates a dictionary from a sequence of KeyValuePairs. If the sequence is already a Dictionary, a new Dictionary is still created.
            </summary>
            <typeparam name="T1">the type of Key</typeparam>
            <typeparam name="T2">the type of Value</typeparam>
            <param name="pairSequence">the input pair sequence</param>
            <returns>a Dictionary</returns>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Calls an action on each element of a sequence. The action takes one argument: an element. It has no return value.
            </summary>
            <typeparam name="T">the type of the elements</typeparam>
            <param name="sequence">the input sequence</param>
            <param name="action">An Action, that is, a delegate that takes one input and has no output.</param>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Calls an action on each element of a sequence. The action takes two arguments: an element and the index of the element.
            It has no return value.
            </summary>
            <typeparam name="T">the type of the elements</typeparam>
            <param name="sequence">the input sequence</param>
            <param name="action">An action that takes an element and an index and returns nothing.</param>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.SubSequence``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Take the items from a sequence starting with item # start (index 0) and contining for count items.
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="sequence">The input sequence</param>
            <param name="start">The index of the first item to take</param>
            <param name="count">The number of items to take</param>
            <returns>The count items starting with the one with index start.</returns>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.Single``1(System.Collections.Generic.IList{``0})">
            <summary>
            Same semantics as Enumerable.Single(IEnumerable), but optimized for ILists. Throws an exception if list does not contain exactly 1 element. Otherwise returns that element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.First``1(System.Collections.Generic.IList{``0})">
            <summary>
            Same semantics as Enumerable.First(), but optimized for ILists. Throws an exception if the list is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            Same semantics as Enumerable.Last(), but optimized for ILists. Throws an exception if the list is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Yield an Enumeration of the list with the item appended to the end
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Yield a concatenation of the two Enumerable lists
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="enumerables"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Util.IEnumerableExtensions.AsSingletonEnumerable``1(``0)">
            <summary>
            Yield this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Bio.Extensions.ListExtensions">
            <summary>
            Extension methods on List(T)
            </summary>
        </member>
        <member name="M:Bio.Extensions.ListExtensions.ConvertAll``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Runs each item through a conversion and returns the produced list.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TOutput"></typeparam>
            <param name="input"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Extensions.ListExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a set of items to a list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="newItems"></param>
        </member>
        <member name="M:Bio.Extensions.ListExtensions.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>
            Convert a List into a ReadOnly list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Bio.Util.PrimitiveExtensions">
            <summary>
            PrimitiveExtensions
            </summary>
        </member>
        <member name="M:Bio.Util.PrimitiveExtensions.Enforce(System.Boolean)">
            <summary>
            Enforce
            </summary>
            <param name="value">value</param>
            <returns>bool</returns>
        </member>
        <member name="M:Bio.Util.PrimitiveExtensions.Enforce(System.Boolean,System.String)">
            <summary>
            Enforce
            </summary>
            <param name="value">value</param>
            <param name="errorMsg">errorMsg</param>
            <returns>bool</returns>
        </member>
        <member name="M:Bio.Util.PrimitiveExtensions.Enforce(System.Boolean,System.String,System.Object[])">
            <summary>
            Enforce
            </summary>
            <param name="condition">condition</param>
            <param name="messageToFormat">messageToFormat</param>
            <param name="formatValues">formatValues</param>
            <returns>bool</returns>
        </member>
        <member name="M:Bio.Util.PrimitiveExtensions.Enforce``1(System.Boolean)">
            <summary>
            Confirms that a condition is true. Raise an exception of type T if it is not.
            </summary>
            <param name="condition">The condition to check</param>
            <typeparam name="T">The type of exception that will be raised.</typeparam>
        </member>
        <member name="M:Bio.Util.PrimitiveExtensions.Enforce``1(System.Boolean,System.String)">
            <summary>
            Confirms that a condition is true. Raise an exception of type T if it is not.
            </summary>
            <remarks>
            Warning: The message with be evaluated even if the condition is true, so don't make it's calculation slow.
                      Avoid this with the "messageFunction" version.
            </remarks>
            <param name="condition">The condition to check</param>
            <param name="message">A message for the exception</param>
            <typeparam name="T">The type of exception that will be raised.</typeparam>
        </member>
        <member name="M:Bio.Util.PrimitiveExtensions.Enforce``1(System.Boolean,System.String,System.Object[])">
            <summary>
            Confirms that a condition is true. Raise an exception if it is not.
            </summary>
            <remarks>
            Warning: The message with be evaluated even if the condition is true, so don't make it's calculation slow.
                      Avoid this with the "messageFunction" version.
            </remarks>
            <param name="condition">The condition to check</param>
            <param name="messageToFormat">A message for the exception</param>
            <param name="formatValues">Values for the exception's message.</param>
            <typeparam name="T">The type of exception that will be raised.</typeparam>
        </member>
        <member name="T:Bio.Extensions.ReflectionExtensions">
            <summary>
            Reflection extensions.
            </summary>
        </member>
        <member name="M:Bio.Extensions.ReflectionExtensions.GetInterfaces(System.Type)">
            <summary>
            Method to retrieve all the interfaces of the given Type and it's base classes.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Bio.Extensions.SequenceExtensions">
            <summary>
            Additional methods added to ISequence interface
            </summary>
        </member>
        <member name="F:Bio.Extensions.SequenceExtensions.ReverseIdSuffix">
            <summary>
            Suffix added to indicate a reversed sequence
            </summary>
        </member>
        <member name="F:Bio.Extensions.SequenceExtensions.ReversedSequenceMetadataKey">
            <summary>
            Tag for a reversed sequence (metadata)
            </summary>
        </member>
        <member name="M:Bio.Extensions.SequenceExtensions.ConvertToString(Bio.ISequence,System.Int64,System.Int64)">
            <summary>
            Converts the sequence to a string.
            </summary>
            <param name="sequence"></param>
            <param name="startIndex">Start position of the sequence.</param>
            <param name="length">Number of symbols to return.</param>
            <returns>Part of the sequence in string format.</returns>
        </member>
        <member name="M:Bio.Extensions.SequenceExtensions.MarkAsReverseComplement(Bio.ISequence)">
            <summary>
            This adds a key to the Metadata to indicate this is a reversed sequence
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Extensions.SequenceExtensions.IsMarkedAsReverseComplement(Bio.ISequence)">
            <summary>
            This checks for a sequence marker to determine if the given ISequence was generated from
            a reverse complement.
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="T:Bio.Extensions.StreamExtensions">
            <summary>
            Extensions for the Stream
            </summary>
        </member>
        <member name="M:Bio.Extensions.StreamExtensions.OpenRead(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Opens the given stream for reading with a StreamReader.
            </summary>
            <param name="stream">Stream</param>
            <param name="encoding">Encoding, defaults to UTF8</param>
            <param name="detectEncodingFromByteOrderMarks"></param>
            <param name="bufferSize">Buffer size, defaults to 1k</param>
            <param name="leaveOpen">True to keep underlying stream open on disposal.</param>
            <returns>StreamReader</returns>
        </member>
        <member name="M:Bio.Extensions.StreamExtensions.OpenWrite(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            Opens the given stream for writing with a StreamWriter.
            </summary>
            <param name="stream">Stream</param>
            <param name="encoding">Encoding, defaults to UTF8</param>
            <param name="bufferSize">Buffer size, defaults to 1k</param>
            <param name="leaveOpen">True to keep underlying stream open on disposal.</param>
            <returns>StreamWriter</returns>
        </member>
        <member name="T:Bio.Extensions.StringExtensions">
            <summary>
            StringExtensions
            </summary>
        </member>
        <member name="M:Bio.Extensions.StringExtensions.ToMixedInvariant(System.String)">
            <summary>
            ToMixedInvariant
            </summary>
            <param name="text">text</param>
            <returns>string</returns>
        </member>
        <member name="M:Bio.Extensions.StringExtensions.ToByteArray(System.String)">
            <summary>
            Converts an inbound string to a byte array
            </summary>
            <returns>Byte array</returns>
        </member>
        <member name="M:Bio.Extensions.StringExtensions.Contains(System.String,System.Char)">
            <summary>
            Implement the Contains(ch) method for PCL.
            </summary>
            <param name="text"></param>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Extensions.StringExtensions.Reverse(System.String)">
            <summary>
            Reverse
            </summary>
            <param name="text">text</param>
            <returns>string</returns>
        </member>
        <member name="M:Bio.Extensions.StringExtensions.ProtectedSplit(System.String,System.Char,System.Char,System.Boolean,System.Char[])">
            <summary>
            Splits a string, but allows you to protect using, for example, balanced parentheses.
            </summary>
            <param name="text">String to split</param>
            <param name="openParenCharacter">The open paren character</param>
            <param name="closeParenCharacter">The close paren character</param>
            <param name="removeEmptyItems">If true, the empty string will never by emitted.</param>
            <param name="splitCharacters">List of characters on which to split</param>
            <returns>Strings between split characters that are not wrapped in protecting parens.</returns>
        </member>
        <member name="T:Bio.FastQFormatType">
            <summary>
            A FastQFormatType specifies the format of quality scores.
            </summary>
        </member>
        <member name="F:Bio.FastQFormatType.Illumina_v1_8">
            <summary>
            Illumina 1.8 FastQFormatType.
            This type uses Phred quality scores ranges from 0 to 93 and are encoded using ASCII 33 to 126.
            Encoding base value is 33.
            </summary>
        </member>
        <member name="F:Bio.FastQFormatType.Illumina_v1_5">
            <summary>
            Illumina 1.5 FastQFormatType.
            This type uses Phred quality scores ranges from 2 to 62 and are encoded using ASCII 66 to 126.
            Encoding base value is 64.
            </summary>
        </member>
        <member name="F:Bio.FastQFormatType.Illumina_v1_3">
            <summary>
            Illumina 1.3 FastQFormatType.
            This type uses Phred quality scores ranges from 0 to 62 and are encoded using ASCII 64 to 126.
             Encoding base value is 64.
            </summary>
        </member>
        <member name="F:Bio.FastQFormatType.Solexa_Illumina_v1_0">
            <summary>
            Solexa/Illumina 1.0 FastQFormatType.
            This type uses Solexa / Illumina quality scores ranges from -5 to 62 and are encoded using ASCII 59 to 126.
             Encoding base value is 64.
            </summary>
        </member>
        <member name="F:Bio.FastQFormatType.Sanger">
            <summary>
            Sanger FastQFormatType.
            This type uses Phred quality scores ranges from 0 to 93 and are encoded using ASCII 33 to 126 
             Encoding base value is 33
            </summary>
        </member>
        <member name="T:Bio.IConsensusResolver">
            <summary>
            Framework to compute the consensus for a list of symbols
            <para>
            For example, one can construct consensus for 
            a set of aligned sequences in the following way: 
            Sequence 1: A G T C G A
            Sequence 2: A G G C - A
            Sequence 3: A G G T G -
            Consensus : A G G C G A
            </para>
            <para>
            In the example here, we might choose the character that 
            occurs maximum number of times for consensus
            This means that consensus for characters at position 1: {A, A, A} is A,
            while consensus for characters at position 3: {T, G, G} is G, and so on.
            </para>
            This interface provides the framework for consensus generation. 
            Implement this interface to provide different implementations 
            for building consensus.
            </summary>
        </member>
        <member name="M:Bio.IConsensusResolver.GetConsensus(System.Byte[])">
            <summary>
            Find consensus symbol for a list of symbols.
            </summary>
            <param name="items">List of input symbols.</param>
            <returns>Consensus Symbol.</returns>
        </member>
        <member name="P:Bio.IConsensusResolver.SequenceAlphabet">
            <summary>
            Gets or sets sequence alphabet.
            </summary>
        </member>
        <member name="T:Bio.IndexedItem`1">
            <summary>
            IndexedItem holds an item and its index.
            Index is a zero based position of item.
            This class is used in Sparse Sequence to get the known sequence items with their positions.
            
            This class implements IComparable interface and all comparisons are based on index 
            and not on item.
            </summary>
            <typeparam name="T">The type of item in IndexedItem.</typeparam>
        </member>
        <member name="M:Bio.IndexedItem`1.#ctor(System.Int64,`0)">
            <summary>
            Creates a new IndexedItem from the specified index and item.
            </summary>
            <param name="index">Index of the item specified.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:Bio.IndexedItem`1.op_LessThan(Bio.IndexedItem{`0},Bio.IndexedItem{`0})">
            <summary>
            Compares the index of leftHandSideObject and rightHandSideObject, if index of leftHandSideObject is less than 
            the index of rightHandSideObject then returns true, else returns false.
            
            Note that this method will compare only index and will not compare Item property.
            </summary>
            <param name="leftHandSideObject">An instance of IndexedItem as first operand.</param>
            <param name="rightHandSideObject">An instance of IndexedItem as second operand.</param>
            <returns>Returns true if index of leftHandSideObject is less than the index of rightHandSideObject,
            else returns false.</returns>
        </member>
        <member name="M:Bio.IndexedItem`1.op_LessThanOrEqual(Bio.IndexedItem{`0},Bio.IndexedItem{`0})">
            <summary>
            Compares the index of leftHandSideObject and rightHandSideObject, if index of leftHandSideObject is 
            less than or equal to the index of rightHandSideObject then returns true else returns false.
            
            Note that this method will compare only index and will not compare Item property.
            </summary>
            <param name="leftHandSideObject">An instance of IndexedItem as first operand.</param>
            <param name="rightHandSideObject">An instance of IndexedItem as second operand.</param>
            <returns>Returns true if index of leftHandSideObject is less than or equal to the index of rightHandSideObject,
            else returns false.</returns>
        </member>
        <member name="M:Bio.IndexedItem`1.op_GreaterThan(Bio.IndexedItem{`0},Bio.IndexedItem{`0})">
            <summary>
            Compares the index of leftHandSideObject and rightHandSideObject, if index of leftHandSideObject is greater than 
            the index of rightHandSideObject then returns true else returns false.
            
            Note that this method will compare only index and will not compare Item property.
            </summary>
            <param name="leftHandSideObject">An instance of IndexedItem as first operand.</param>
            <param name="rightHandSideObject">An instance of IndexedItem as second operand.</param>
            <returns>Returns true if index of leftHandSideObject is greater than the index of rightHandSideObject,
            else returns false.</returns>
        </member>
        <member name="M:Bio.IndexedItem`1.op_GreaterThanOrEqual(Bio.IndexedItem{`0},Bio.IndexedItem{`0})">
            <summary>
            Compares the index of leftHandSideObject and rightHandSideObject, if index of leftHandSideObject is greater than
            or equal to the index of rightHandSideObject then returns true else returns false.
            
            Note that this method will compare only index and will not compare Item property.
            </summary>
            <param name="leftHandSideObject">An instance of IndexedItem as first operand.</param>
            <param name="rightHandSideObject">An instance of IndexedItem as second operand.</param>
            <returns>Returns true if index of leftHandSideObject is greater than or equal to the index of rightHandSideObject,
            else returns false.</returns>
        </member>
        <member name="M:Bio.IndexedItem`1.op_Equality(Bio.IndexedItem{`0},Bio.IndexedItem{`0})">
            <summary>
            Compares the index of leftHandSideObject and rightHandSideObject, if index of leftHandSideObject is
            equal to the index of rightHandSideObject then returns true else returns false.
            
            Note that this method will compare only index and will not compare Item property.
            </summary>
            <param name="leftHandSideObject">An instance of IndexedItem as first operand.</param>
            <param name="rightHandSideObject">An instance of IndexedItem as second operand.</param>
            <returns>Returns true if index of leftHandSideObject is equal to the index of rightHandSideObject,
            else returns false.</returns>
        </member>
        <member name="M:Bio.IndexedItem`1.op_Inequality(Bio.IndexedItem{`0},Bio.IndexedItem{`0})">
            <summary>
            Compares the index of leftHandSideObject and rightHandSideObject, if index of leftHandSideObject is
            not equal to the index of rightHandSideObject then returns true else returns false.
            
            Note that this method will compare only index and will not compare Item property.
            </summary>
            <param name="leftHandSideObject">An instance of IndexedItem as first operand.</param>
            <param name="rightHandSideObject">An instance of IndexedItem as second operand.</param>
            <returns>Returns true if index of leftHandSideObject is not equal to the index of rightHandSideObject,
            else returns false.</returns>
        </member>
        <member name="M:Bio.IndexedItem`1.CompareTo(Bio.IndexedItem{`0})">
            <summary>
            Compares Index property of this instance with the Index property of specified IndexedItem 
            and returns an indication of their relative values.
            </summary>
            <param name="other">IndexedItem to compare.</param>
            <returns>
            A signed number indicating the relative values of index property of this instance and the 
            index property of other.
            Return value Description:
                  Less than zero index of this instance is less than the index of other.
                  Zero index of this instance is equal to the index of other.
                  Greater than zero index of this instance is greater than the index of other 
                    or other is null.
            </returns>
        </member>
        <member name="M:Bio.IndexedItem`1.Equals(Bio.IndexedItem{`0})">
            <summary>
            Returns a value indicating whether this instance is equal to a specified IndexedItem.
            
            Note that this method compares both Index and Item. If both Index and Item of this instance and 
            other are equal then it returns true, else returns false.
            </summary>
            <param name="other">IndexedItem instance to compare.</param>
            <returns>Returns true if other has the same index and item values as of this instance;
            otherwise, false.</returns>
        </member>
        <member name="M:Bio.IndexedItem`1.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified IndexedItem.
            
            Note that this method compares both index and item. If both Index and Item of this instance and 
            obj are equal then it returns true else returns false.
            </summary>
            <param name="obj">IndexedItem instance to compare.</param>
            <returns>Returns true if obj has the same index and item values as of this instance;
            otherwise, false.</returns>
        </member>
        <member name="M:Bio.IndexedItem`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Bio.IndexedItem`1.CompareTo(System.Object)">
            <summary>
            Compares Index property of this instance with the Index property of specified IndexedItem 
            and returns an indication of their relative values.
            
            Parameter obj must be of IndexedItem, else an ArgumentException will occur.
            </summary>
            <param name="obj">IndexedItem instance to compare.</param>
            <returns>
            A signed number indicating the relative values of index property of this instance and the 
            index property of specified IndexedItem.
            Return Value Description:
                  Less than zero index of this instance is less than the index of specified IndexedItem.
                  Zero index of this instance is equal to the index of specified IndexedItem.
                  Greater than zero index of this instance is greater than the index of specified IndexedItem 
                    or specified IndexedItem is null.
            </returns>
        </member>
        <member name="P:Bio.IndexedItem`1.Index">
            <summary>
            Gets or sets the index.
            Specifies the zero based position of the item.
            </summary>
        </member>
        <member name="P:Bio.IndexedItem`1.Item">
            <summary>
            Gets or sets the item.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.Ab1DirectoryEntry">
            <summary>
            A directory entry is a section of bytes that identify an element of metadata within an abi file.  The structure of this entry is defined
            in: http://www6.appliedbiosystems.com/support/software_community/ABIF_File_Format.pdf
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Ab1DirectoryEntry.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Ab1DirectoryEntry.#ctor(System.Byte[])">
            <summary>
            Reads an entry from the buffer.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1DirectoryEntry.Buffer">
            <summary>
            Raw data associated with this entry.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1DirectoryEntry.DataOffset">
            <summary>
            Number of bytes in the file this entry is offset.  This is only valid for
            items of size greater than 4 bytes.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1DirectoryEntry.DataSize">
            <summary>
            Size in bytes of the entry.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1DirectoryEntry.ElementCount">
            <summary>
            The number of elements in the directory entry.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1DirectoryEntry.ElementSize">
            <summary>
            The size of each element.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1DirectoryEntry.ElementTypeCode">
            <summary>
            Identifies the type of element.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1DirectoryEntry.Reserved">
            <summary>
            Data handle - this is not used and is reserved.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1DirectoryEntry.TagName">
            <summary>
            Name of the element.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1DirectoryEntry.TagNumber">
            <summary>
            An arbitrary number associated with the directory entry.  It is customary for this
            value to be less than 1000.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.Ab1Header">
            <summary>
            The header contains information about the abi file.  This should always have the same format regardless of file version and so should
            be read first and then an appropriate parser chosen based on the file version.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Ab1Header.#ctor(System.IO.BinaryReader)">
            <summary>
            Creates a new header and loads it from the specified stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Ab1Header.ReadDirectories(System.IO.BinaryReader)">
            <summary>
            Reads all directories entries based on the intiial directory entry header <see cref="P:Bio.IO.AppliedBiosystems.Ab1Header.DirectoryEntryDefinition"/>.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Ab1Header.ValidateHeader(System.IO.BinaryReader)">
            <summary>
            Validates the header matches this parser. 
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Ab1Header.ReadDirectoryStructure(System.Byte[])">
            <summary>
            Reads the definition directory entry.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Ab1Header.ValidateFileVersion(System.Byte[])">
            <summary>
            Validate the file version.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Ab1Header.ValidateFileSignature(System.Byte[])">
            <summary>
            Validates the file signature.  Ensures this is an abi file.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1Header.FileSignature">
            <summary>
            Identifies the file as an abi file.  These are the first four bytes and should be ABIF.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1Header.Version">
            <summary>
            Version of the abi file.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1Header.MajorVersion">
            <summary>
            Major version pulled from the <see cref="P:Bio.IO.AppliedBiosystems.Ab1Header.Version"/> property.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1Header.DirectoryEntryDefinition">
            <summary>
            The first directory entry found after the header.  This defines the following content of the file.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1Header.DirectoryEntries">
            <summary>
            Contains a list of all entries found within the file.  This does not include the initial header directory.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.Ab1Parser">
            <summary>
                Parses an applied biosystems data file format as defined in:
                http://www6.appliedbiosystems.com/support/software_community/ABIF_File_Format.pdf
            </summary>
        </member>
        <member name="T:Bio.IO.ISequenceParser">
            <summary>
            Base ISequenceParser
            </summary>
        </member>
        <member name="T:Bio.IO.IParserWithAlphabet`1">
            <summary>
            Extends IParser to include an alphabet
            </summary>
        </member>
        <member name="T:Bio.IO.IParser`1">
            <summary>
            Typed interface for parsers which return some data structure.
            </summary>
            <typeparam name="T">Returning type</typeparam>
        </member>
        <member name="T:Bio.IO.IParser">
            <summary>
            Common interface for all parsers.
            Used in Framework abstraction layer and auto registration mechanism.
            </summary>
        </member>
        <member name="P:Bio.IO.IParser.Name">
            <summary>
            Gets the name of the parser being implemented. 
            This is intended to give the developer name of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.IParser.Description">
            <summary>
            Gets the description of the parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.IParser.SupportedFileTypes">
            <summary>
            Gets the file extensions that the parser supports.
            If multiple extensions are supported then this property 
            will return a string containing all extensions with a ',' delimited.
            </summary>
        </member>
        <member name="M:Bio.IO.IParser`1.Parse(System.IO.Stream)">
            <summary>
            Parses a list of biological sequence texts from a given stream.
            </summary>
            <param name="stream">The stream to pull the data from</param>
            <returns>The collection of parsed objects.</returns>
        </member>
        <member name="M:Bio.IO.IParser`1.ParseOne(System.IO.Stream)">
            <summary>
            Parse a single entity from the given stream.
            </summary>
            <param name="stream">The stream to pull data from</param>
            <returns>Parse entity object</returns>
        </member>
        <member name="P:Bio.IO.IParserWithAlphabet`1.Alphabet">
            <summary>
            Gets or sets the alphabet to use for parsed data objects.  If this is not set, the alphabet will
            be determined based on the file being parsed.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Ab1Parser.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Ab1Parser.Parse(System.IO.Stream)">
            <summary>
                Parser the file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Ab1Parser.ParseOne(System.IO.Stream)">
            <summary>
            Parse a single sequence from the stream.
            </summary>
            <param name="stream">Stream</param>
            <returns>Sequence</returns>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Ab1Parser.Parse(System.IO.BinaryReader)">
            <summary>
                Parsers the files binary content into a abi parser context using the DNA alphabet.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Ab1Parser.Parse(System.IO.BinaryReader,Bio.IAlphabet)">
            <summary>
                Parsers the files binary content into a abi parser context using
                the specified alphabet.
            </summary>
            <param name="reader"></param>
            <param name="alphabet"></param>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1Parser.Name">
            <summary>
                Name.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1Parser.Description">
            <summary>
                Description.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1Parser.SupportedFileTypes">
            <summary>
                Supported file types.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Ab1Parser.Alphabet">
            <summary>
                Alphabet
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataParsers.DataParserFactory">
            <summary>
            Creates abi parsers based on file format version.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.DataParserFactory.GetParser(System.Int32)">
            <summary>
            Returns a parser for the specific version.
            </summary>
            <param name="majorVersion"></param>
            <returns></returns>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor">
            <summary>
            Parsing visitor for constructing the <see cref="P:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor.Context"/> during a abi parse operation.  Each visit method handles a different known
            item within the abi file format.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor.Visit(Bio.IO.AppliedBiosystems.DataTypes.ByteDataItem)">
            <summary>
            Visit byte item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor.Visit(Bio.IO.AppliedBiosystems.DataTypes.CharDataItem)">
            <summary>
            Visit char item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor.Visit(Bio.IO.AppliedBiosystems.DataTypes.WordDataItem)">
            <summary>
            Visit word item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor.Visit(Bio.IO.AppliedBiosystems.DataTypes.ShortDataItem)">
            <summary>
            Visit short item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor.Visit(Bio.IO.AppliedBiosystems.DataTypes.LongDataItem)">
            <summary>
            Visit long item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor.Visit(Bio.IO.AppliedBiosystems.DataTypes.FloatDataItem)">
            <summary>
            Visit float item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor.Visit(Bio.IO.AppliedBiosystems.DataTypes.DoubleDataItem)">
            <summary>
            Visit double item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor.Visit(Bio.IO.AppliedBiosystems.DataTypes.DateDataItem)">
            <summary>
            Visit date item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor.Visit(Bio.IO.AppliedBiosystems.DataTypes.TimeDataItem)">
            <summary>
            Visit time item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor.Visit(Bio.IO.AppliedBiosystems.DataTypes.PStringDataItem)">
            <summary>
            Visit pstring item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor.Visit(Bio.IO.AppliedBiosystems.DataTypes.ThumbDataItem)">
            <summary>
            Visit thumb item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor.Visit(Bio.IO.AppliedBiosystems.DataTypes.BoolDataItem)">
            <summary>
            Visit bool item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor.Visit(Bio.IO.AppliedBiosystems.DataTypes.UserDataItem)">
            <summary>
            Visit user item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor.Visit(Bio.IO.AppliedBiosystems.DataTypes.CStringDataItem)">
            <summary>
            Visit cstring item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor.Context">
            <summary>
            Parser context.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataParsers.IParserContext">
            <summary>
            Context for managing file import.  After import this contains all data associated in the file.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataParsers.IParserContext.Reader">
            <summary>
            File reader.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataParsers.IParserContext.Header">
            <summary>
            Header identifying the abi file version.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataParsers.IParserContext.Alphabet">
            <summary>
            Alphabet to use when creating sequences
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataParsers.IParserContext.DataItems">
            <summary>
            Data found within the abi file.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataParsers.IVersionedDataParser">
            <summary>
            Handle's parsing of a abi parser context based on a specific file version.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.IVersionedDataParser.ParseData(Bio.IO.AppliedBiosystems.DataParsers.IParserContext)">
            <summary>
            Parser data.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataParsers.ParserContext">
            <summary>
            Simple parser context.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.ParserContext.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataParsers.ParserContext.Reader">
            <summary>
            File reader.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataParsers.ParserContext.Header">
            <summary>
            Header identifying the abi file version.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataParsers.ParserContext.Alphabet">
            <summary>
            Alphabet to use when creating sequences
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataParsers.ParserContext.DataItems">
            <summary>
            Data found within the abi file.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataParsers.ParserHelper">
            <summary>
            Provides helper methods for converting raw data to .Net data types.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.ParserHelper.ToArray``1(System.String,System.Func{System.String,``0})">
            <summary>
            All ab1 arrays are space seperate strings.  Helper function to convert to a property array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="parse"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.ParserHelper.SegmentArray``1(``0[],System.Int32,System.Boolean)">
            <summary>
            Segments the array and enumerates those segments.
            </summary>
            <param name="values"></param>
            <param name="count"></param>
            <param name="flip">If true flips the order of the segments</param>
            <exception cref="T:System.ArgumentException">Thrown if the number of values is not divisible by the segment count.</exception>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.ParserHelper.ConvertSegmentsToArray``2(``0[][],System.Func{``0[],``1})">
            <summary>
            Converts the array of segments into a array of values.
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="segments"></param>
            <param name="convert"></param>
            <returns></returns>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser">
            <summary>
            Parses a major version 1 ab1 data file directory entries.  
            http://www6.appliedbiosystems.com/support/software_community/ABIF_File_Format.pdf
            Note that all numeric values are stored with the higher order byte at the beginning of the entry.
            </summary>
        </member>
        <member name="F:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.MajorVersion">
            <summary>
            Version this parser works with.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.Visit(Bio.IO.AppliedBiosystems.DataTypes.ByteDataItem)">
            <summary>
            Visit byte item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.Visit(Bio.IO.AppliedBiosystems.DataTypes.CharDataItem)">
            <summary>
            Visit char item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.Visit(Bio.IO.AppliedBiosystems.DataTypes.WordDataItem)">
            <summary>
            Visit word item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.Visit(Bio.IO.AppliedBiosystems.DataTypes.ShortDataItem)">
            <summary>
            Visit short item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.Visit(Bio.IO.AppliedBiosystems.DataTypes.LongDataItem)">
            <summary>
            Visit long item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.Visit(Bio.IO.AppliedBiosystems.DataTypes.FloatDataItem)">
            <summary>
            Visit float item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.Visit(Bio.IO.AppliedBiosystems.DataTypes.DoubleDataItem)">
            <summary>
            Visit double item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.Visit(Bio.IO.AppliedBiosystems.DataTypes.DateDataItem)">
            <summary>
            Visit date item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.Visit(Bio.IO.AppliedBiosystems.DataTypes.TimeDataItem)">
            <summary>
            Visit time item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.Visit(Bio.IO.AppliedBiosystems.DataTypes.PStringDataItem)">
            <summary>
            Visit pstring item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.Visit(Bio.IO.AppliedBiosystems.DataTypes.ThumbDataItem)">
            <summary>
            Not supported
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.Visit(Bio.IO.AppliedBiosystems.DataTypes.BoolDataItem)">
            <summary>
            Visit bool item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.Visit(Bio.IO.AppliedBiosystems.DataTypes.UserDataItem)">
            <summary>
            Note Supported
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.Visit(Bio.IO.AppliedBiosystems.DataTypes.CStringDataItem)">
            <summary>
            Visit cstring item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.ParseData(Bio.IO.AppliedBiosystems.DataParsers.IParserContext)">
            <summary>
            Parser data.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.GetItemValue(Bio.IO.AppliedBiosystems.DataTypes.IAb1DataItem)">
            <summary>
            Returns the item value.  
            </summary>
            <param name="item"></param>
            <exception cref="T:Bio.IO.AppliedBiosystems.Exceptions.InvalidItemSizeException">Thrown if the item size does not match the expected size.</exception>"
            <returns></returns>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.GetRemoteItemValue(Bio.IO.AppliedBiosystems.DataTypes.IAb1DataItem)">
            <summary>
            Returns the bytes containing the item value based on the data offset pointer and data size.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.GetLocalItemValue(Bio.IO.AppliedBiosystems.DataTypes.IAb1DataItem)">
            <summary>
            Returns the bytes containing the item value.  Note that the data offset field contains the bytes starting
            at the high-order byte of the 32 bit field.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataParsers.V1DataParser.Context">
            <summary>
            Parser context.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.BoolDataItem">
            <summary>
            Boolean data item.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.DataItem">
            <summary>
            Data within applied biosystems format is broken up into individual data items, this is a base class containing common properties.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.IAb1DataItem">
            <summary>
            Data item interface.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.IAb1DataItem.Accept(Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.IAb1DataItem.Create">
            <summary>
            Create an instance of the derived type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.IAb1DataItem.Name">
            <summary>
            The name of the data item.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.IAb1DataItem.Type">
            <summary>
            Element type definition.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.IAb1DataItem.Size">
            <summary>
            Size in bytes of the element.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.IAb1DataItem.Entry">
            <summary>
            Directory entry defining this element.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.DataItem.Accept(Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.DataItem.Create">
            <summary>
            Create an instance of the derived type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.DataItem.Name">
            <summary>
            The name of the data item.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.DataItem.Type">
            <summary>
            Element type definition.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.DataItem.Size">
            <summary>
            Size in bytes of the element.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.DataItem.Entry">
            <summary>
            Directory entry defining this element.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.BoolDataItem.Accept(Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.BoolDataItem.Create">
            <summary>
            Create an instance of the bool type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.BoolDataItem.Value">
            <summary>
            Data item value.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.BoolDataItem.Name">
            <summary>
            The name of the data item.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.BoolDataItem.Type">
            <summary>
            Element type definition.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.BoolDataItem.Size">
            <summary>
            Size in bytes of the element.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.ByteDataItem">
            <summary>
            Array of bytes data item.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.ByteDataItem.Accept(Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.ByteDataItem.Create">
            <summary>
            Create an instance of the byyte type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.ByteDataItem.Value">
            <summary>
            Byte value;
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.ByteDataItem.Name">
            <summary>
            The name of the data item.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.ByteDataItem.Type">
            <summary>
            Element type definition.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.ByteDataItem.Size">
            <summary>
            Size in bytes of the element.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.CharDataItem">
            <summary>
            Array of chars data item.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.CharDataItem.Accept(Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.CharDataItem.Create">
            <summary>
            Create an instance of the char type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.CharDataItem.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.CharDataItem.Name">
            <summary>
            The name of the data item.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.CharDataItem.Type">
            <summary>
            Element type definition.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.CharDataItem.Size">
            <summary>
            Size in bytes of the element.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.CStringDataItem">
            <summary>
            String data item.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.CStringDataItem.Accept(Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.CStringDataItem.Create">
            <summary>
            Create an instance of the cstring type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.CStringDataItem.Value">
            <summary>
            String value.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.CStringDataItem.Name">
            <summary>
            The name of the data item.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.CStringDataItem.Type">
            <summary>
            Element type definition.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.CStringDataItem.Size">
            <summary>
            Size in bytes of the element.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.DataItemFactory">
            <summary>
            Create data items basd on abi directory entry element type.
            </summary>
        </member>
        <member name="F:Bio.IO.AppliedBiosystems.DataTypes.DataItemFactory.SupportedItems">
            <summary>
            Supported data items.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.DataItemFactory.TryCreateDataItem(Bio.IO.AppliedBiosystems.Ab1DirectoryEntry)">
            <summary>
            Attempts to create a data item.
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.DateDataItem">
            <summary>
            Date data item.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.DateDataItem.Accept(Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.DateDataItem.Create">
            <summary>
            Create an instance of the date type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.DateDataItem.Value">
            <summary>
            Item value.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.DateDataItem.Name">
            <summary>
            The name of the data item.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.DateDataItem.Type">
            <summary>
            Element type definition.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.DateDataItem.Size">
            <summary>
            Size in bytes of the element.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.DoubleDataItem">
            <summary>
            Double data item.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.DoubleDataItem.Accept(Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.DoubleDataItem.Create">
            <summary>
            Create an instance of the double type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.DoubleDataItem.Value">
            <summary>
            Item value.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.DoubleDataItem.Name">
            <summary>
            The name of the data item.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.DoubleDataItem.Type">
            <summary>
            Element type definition.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.DoubleDataItem.Size">
            <summary>
            Size in bytes of the element.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.FloatDataItem">
            <summary>
            Float data item.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.FloatDataItem.Accept(Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.FloatDataItem.Create">
            <summary>
            Create an instance of the float type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.FloatDataItem.Value">
            <summary>
            Item value.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.FloatDataItem.Name">
            <summary>
            The name of the data item.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.FloatDataItem.Type">
            <summary>
            Element type definition.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.FloatDataItem.Size">
            <summary>
            Size in bytes of the element.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.LongDataItem">
            <summary>
            Long data item.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.LongDataItem.Accept(Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.LongDataItem.Create">
            <summary>
            Create an instance of the long type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.LongDataItem.Value">
            <summary>
            Item value.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.LongDataItem.Name">
            <summary>
            The name of the data item.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.LongDataItem.Type">
            <summary>
            Element type definition.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.LongDataItem.Size">
            <summary>
            Size in bytes of the element.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.PStringDataItem">
            <summary>
            String data item.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.PStringDataItem.Accept(Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.PStringDataItem.Create">
            <summary>
            Create an instance of the pstring type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.PStringDataItem.Value">
            <summary>
            Item value.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.PStringDataItem.Name">
            <summary>
            The name of the data item.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.PStringDataItem.Type">
            <summary>
            Element type definition.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.PStringDataItem.Size">
            <summary>
            Size in bytes of the element.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.ShortDataItem">
            <summary>
            Short data item.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.ShortDataItem.Accept(Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.ShortDataItem.Create">
            <summary>
            Create an instance of the short type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.ShortDataItem.Value">
            <summary>
            Item value.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.ShortDataItem.Name">
            <summary>
            The name of the data item.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.ShortDataItem.Type">
            <summary>
            Element type definition.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.ShortDataItem.Size">
            <summary>
            Size in bytes of the element.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.ThumbDataItem">
            <summary>
            Legacy data type.  Not imported.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.ThumbDataItem.Accept(Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.ThumbDataItem.Create">
            <summary>
            Create an instance of the thumb type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.ThumbDataItem.Value">
            <summary>
            Item Value.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.ThumbDataItem.Name">
            <summary>
            The name of the data item.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.ThumbDataItem.Type">
            <summary>
            Element type definition.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.ThumbDataItem.Size">
            <summary>
            Size in bytes of the element.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.TimeDataItem">
            <summary>
            Time data item.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.TimeDataItem.Accept(Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.TimeDataItem.Create">
            <summary>
            Create an instance of the time type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.TimeDataItem.Value">
            <summary>
            Item value.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.TimeDataItem.Name">
            <summary>
            The name of the data item.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.TimeDataItem.Type">
            <summary>
            Element type definition.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.TimeDataItem.Size">
            <summary>
            Size in bytes of the element.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.UserDataItem">
            <summary>
            This item contains custom users specific information, at the moment the parser ignores this.  Once a use cases arises that
            requires this functionality it may be implemented.  This is unlikely as this is a legacy data type.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.UserDataItem.Accept(Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.UserDataItem.Create">
            <summary>
            Create an instance of the user type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.UserDataItem.Value">
            <summary>
            Item value.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.UserDataItem.Name">
            <summary>
            The name of the data item.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.UserDataItem.Type">
            <summary>
            Element type definition.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.UserDataItem.Size">
            <summary>
            Size in bytes of the element.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.DataTypes.WordDataItem">
            <summary>
            Work data item.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.WordDataItem.Accept(Bio.IO.AppliedBiosystems.DataParsers.IAb1DataVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.DataTypes.WordDataItem.Create">
            <summary>
            Create an instance of the word type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.WordDataItem.Value">
            <summary>
            Item value.
            
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.WordDataItem.Name">
            <summary>
            The name of the data item.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.WordDataItem.Type">
            <summary>
            Element type definition.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.DataTypes.WordDataItem.Size">
            <summary>
            Size in bytes of the element.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.Exceptions.InvalidFileSignatureException">
            <summary>
            File signature is invalid.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Exceptions.InvalidFileSignatureException.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="signature"></param>
            <param name="expected"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Exceptions.InvalidFileSignatureException.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Exceptions.InvalidFileSignatureException.#ctor(System.String)">
            <summary>
            Constructor with message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Exceptions.InvalidFileSignatureException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor with message and inner exception.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.Exceptions.InvalidFileVersionException">
            <summary>
            File version is invalid.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Exceptions.InvalidFileVersionException.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Exceptions.InvalidFileVersionException.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Exceptions.InvalidFileVersionException.#ctor(System.String)">
            <summary>
            Constructor with message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Exceptions.InvalidFileVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor with message and inner exception.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.Exceptions.InvalidItemSizeException">
            <summary>
            Item size is invalid.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Exceptions.InvalidItemSizeException.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Create a new exception.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="name"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Exceptions.InvalidItemSizeException.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Exceptions.InvalidItemSizeException.#ctor(System.String)">
            <summary>
            Constructor with message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Exceptions.InvalidItemSizeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor with message and inner exception.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.Model.Ab1ColorData">
            <summary>
            Model for storing chromatogram data associated with calculated peak locations.  This is not the raw readings but the calculated readings.  
            There may be a desire for raw readings in order to perform custom peak calculations. 
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1ColorData.#ctor(System.Int16[],System.Int16[])">
            <summary>
            Create a new color data with the specified data and peak locations.
            </summary>
            <param name="peakLocations">Peak locations</param>
            <param name="data">Calculated reading</param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1ColorData.ToByteArray(Bio.IO.AppliedBiosystems.Model.Ab1ColorData)">
            <summary>
            Converts the color data to a byte array.  Does not include redundant information only the color data.
            </summary>
            <param name="data">Color Data</param>
            <returns>Readings</returns>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1ColorData.FromByteArray(System.Byte[])">
            <summary>
            Converts the byte array to an array of shorts
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1ColorData.ToString(System.Collections.Generic.List{System.Int16})">
            <summary>
            Helper method for converting a list of shorts to the same format found in the ab1 xml parser.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1ColorData.Trim(System.Int32,System.Int32)">
            <summary>
            Trims the color data, adjust peak locations and data based on the new residue range.
            </summary>
            <param name = "startIndex">Starting residue to include.</param>
            <param name = "length">Number of residues to trim to.</param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1ColorData.LoadResidueColorData(System.Int16[],System.Int16[])">
            <summary>
            Loads all residue color data.
            </summary>
            <param name="peakLocations"></param>
            <param name="data"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1ColorData.AddResidueColorData(System.Int32,System.Int32,System.Int32,System.Int16[])">
            <summary>
            Adds a new color data definition for a residue to <see cref="P:Bio.IO.AppliedBiosystems.Model.Ab1ColorData.DataByResidue"/>.
            </summary>
            <param name="peakIndex"></param>
            <param name="residueDataIndex"></param>
            <param name="residueEndIndex"></param>
            <param name="data"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1ColorData.LoadMaxValue">
            <summary>
            Calculates and stores the max peak value.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Model.Ab1ColorData.DataByResidue">
            <summary>
            Each residue contains a sec of data points and one peak, contains a list of all data for each residue.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Model.Ab1ColorData.Max">
            <summary>
            The maximum peak value found for all residues.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.Model.Ab1ContextToSequenceConverter">
            <summary>
            Converts a parser context into a sequence object type.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1ContextToSequenceConverter.Convert(Bio.IO.AppliedBiosystems.DataParsers.IParserContext)">
            <summary>
            Converts the parsed ab1 raw data file into a sequence, with the associated ab1 metadata setup.  I use
            this method because only a subset of the data is needed so there is no point in persisting a large amount
            of unused metadata.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1ContextToSequenceConverter.GetSequence(Bio.IO.AppliedBiosystems.DataParsers.IParserContext)">
            <summary>
            Retrieves the user defined sequence.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1ContextToSequenceConverter.GetNucleotideDataIndex(Bio.IO.AppliedBiosystems.DataParsers.IParserContext)">
            <summary>
            Returns the order of nucleotides based on the ab1 color wheel definition.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.Model.Ab1Metadata">
            <summary>
            Stores abi metadata associated with a sequence.
            </summary>
        </member>
        <member name="F:Bio.IO.AppliedBiosystems.Model.Ab1Metadata.MetadataKey">
            <summary>
            Metadata Key
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1Metadata.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1Metadata.TryGetAb1Data(Bio.ISequence)">
            <summary>
            Attempts to get ab1 metadata from the sequence.  Returns null if none is found.
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1Metadata.SetAb1Data(Bio.ISequence,Bio.IO.AppliedBiosystems.Model.Ab1Metadata)">
            <summary>
            Sets ab1 metadata on a sequence.
            </summary>
            <param name="sequence"></param>
            <param name="metadata"></param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1Metadata.AllColorData">
            <summary>
            Returns all color data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1Metadata.Trim(System.Int32,System.Int32)">
            <summary>
            Trims residue sepecific data for the new range.
            </summary>
            <param name = "startIndex">Starting residue to include.</param>
            <param name = "length">Number of residues to trim to.</param>
        </member>
        <member name="M:Bio.IO.AppliedBiosystems.Model.Ab1Metadata.SetColorData(System.Byte,Bio.IO.AppliedBiosystems.Model.Ab1ColorData)">
            <summary>
            Sets color data based on the specific sequence.
            </summary>
            <param name="item"></param>
            <param name="data"></param>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Model.Ab1Metadata.AdenineColorData">
            <summary>
            Contains color data associated with Adenine.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Model.Ab1Metadata.ThymineColorData">
            <summary>
            Contains color data associated with Thymine.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Model.Ab1Metadata.GuanineColorData">
            <summary>
            Contains color data associated with Guanine.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Model.Ab1Metadata.CytosineColorData">
            <summary>
            Contains color data associated with Cytosine.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Model.Ab1Metadata.ConfidenceData">
            <summary>
            Confidence data for reads, identifying how confident the chosen nucleotide is at any given point.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Model.Ab1Metadata.PeakLocations">
            <summary>
            Index of the color data for each chosen peak location.  This identifies the read that was used to pick the
            nucleotide at a given point.
            </summary>
        </member>
        <member name="T:Bio.IO.AppliedBiosystems.Model.Ab1ResidueColorData">
            <summary>
            Color data associated with a residue.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Model.Ab1ResidueColorData.PeakValue">
            <summary>
            The color value at the designated peak location.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Model.Ab1ResidueColorData.PeakIndex">
            <summary>
            Peak index relative to the residue color data.
            </summary>
        </member>
        <member name="P:Bio.IO.AppliedBiosystems.Model.Ab1ResidueColorData.Data">
            <summary>
            Individual color data reading relative to this residue.
            </summary>
        </member>
        <member name="T:AB_Root">
            <remarks/>
        </member>
        <member name="P:AB_Root.Items">
            <remarks/>
        </member>
        <member name="T:AB_RootData">
            <remarks/>
        </member>
        <member name="P:AB_RootData.Tag">
            <remarks/>
        </member>
        <member name="T:AB_RootDataTag">
            <remarks/>
        </member>
        <member name="P:AB_RootDataTag.Name">
            <remarks/>
        </member>
        <member name="P:AB_RootDataTag.ID">
            <remarks/>
        </member>
        <member name="P:AB_RootDataTag.Type">
            <remarks/>
        </member>
        <member name="P:AB_RootDataTag.Elements">
            <remarks/>
        </member>
        <member name="P:AB_RootDataTag.Size">
            <remarks/>
        </member>
        <member name="P:AB_RootDataTag.Value">
            <remarks/>
        </member>
        <member name="T:AB_RootHeader">
            <remarks/>
        </member>
        <member name="P:AB_RootHeader.Version">
            <remarks/>
        </member>
        <member name="P:AB_RootHeader.ByteOrder">
            <remarks/>
        </member>
        <member name="P:AB_RootHeader.OS_Reference_Number">
            <remarks/>
        </member>
        <member name="P:AB_RootHeader.Directory_Tag_Name">
            <remarks/>
        </member>
        <member name="P:AB_RootHeader.Directory_Tag_Number">
            <remarks/>
        </member>
        <member name="P:AB_RootHeader.Directory_Type">
            <remarks/>
        </member>
        <member name="P:AB_RootHeader.Directory_Elements">
            <remarks/>
        </member>
        <member name="P:AB_RootHeader.SwapSize">
            <remarks/>
        </member>
        <member name="P:AB_RootHeader.Access_Mode">
            <remarks/>
        </member>
        <member name="P:AB_RootHeader.Next_Free_Position">
            <remarks/>
        </member>
        <member name="P:AB_RootHeader.File_Extend">
            <remarks/>
        </member>
        <member name="P:AB_RootHeader.Dir_Extend">
            <remarks/>
        </member>
        <member name="P:AB_RootHeader.Next_File">
            <remarks/>
        </member>
        <member name="T:AB_RootProperties">
            <remarks/>
        </member>
        <member name="P:AB_RootProperties.Creator">
            <remarks/>
        </member>
        <member name="P:AB_RootProperties.Date_Created">
            <remarks/>
        </member>
        <member name="P:AB_RootProperties.Data_Source">
            <remarks/>
        </member>
        <member name="P:AB_RootProperties.Data_Source_Last_Modified">
            <remarks/>
        </member>
        <member name="T:Bio.IO.BAM.BAMFormatter">
            <summary>
            Writes a SequenceAlignmentMap to a particular location, usually a file. 
            The output is formatted according to the BAM file format. 
            Documentation for the latest BAM file format can be found at
            http://samtools.sourceforge.net/SAM1.pdf
            </summary>
        </member>
        <member name="T:Bio.IO.ISequenceAlignmentFormatter">
            <summary>
            Implementations of this interface write an ISequenceAlignment to a particular location, usually a
            file. The output is formatted according to the particular file format. A method is
            also provided for quickly accessing the content in string form for applications that do not
            need to first write to file.
            </summary>
        </member>
        <member name="T:Bio.IO.IFormatter`1">
            <summary>
            Generic formatter for specific types
            </summary>
            <typeparam name="T">Type to write</typeparam>
        </member>
        <member name="T:Bio.IO.IFormatter">
            <summary>
            Interface that defines the common properties for a formatter.
            All other formatters must extend this Interface.
            </summary>
        </member>
        <member name="P:Bio.IO.IFormatter.Name">
            <summary>
            Gets the name of the formatter being implemented.
            This is intended to give the developer name of the formatter.
            </summary>
        </member>
        <member name="P:Bio.IO.IFormatter.Description">
            <summary>
            Gets the description of the formatter being implemented.
            This is intended to give the developer some 
            information of the formatter.
            </summary>
        </member>
        <member name="P:Bio.IO.IFormatter.SupportedFileTypes">
            <summary>
            Gets the file extensions that the formatter will support.
            If multiple extensions are supported then this property 
            will return a string containing all extensions with a ',' delimited.
            </summary>
        </member>
        <member name="M:Bio.IO.IFormatter`1.Format(System.IO.Stream,`0)">
            <summary>
            Writes a single data entry.
            </summary>
            <param name="writer">Stream to write to.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:Bio.IO.IFormatter`1.Format(System.IO.Stream,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Writes a set of entries.
            </summary>
            <param name="writer">Stream to write to.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="F:Bio.IO.BAM.BAMFormatter.MaxBlockSize">
            <summary>
            Maximum Block size used while compressing the BAM file.
            64K = 65536 bytes.
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.BAMFormatter.DelimComma">
            <summary>
            Comma Delimiter.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.Format(System.IO.Stream,Bio.IO.BAM.BAMIndexStorage,Bio.Algorithms.Alignment.ISequenceAlignment)">
            <summary>
            Writes specified alignment object to a stream.
            The output is formatted according to the BAM specification.
            </summary>
            <param name="writer">Stream to write BAM data.</param>
            <param name="indexWriter">BAMIndexFile to write index data.</param>
            <param name="sequenceAlignment">SequenceAlignmentMap object.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.Format(System.IO.Stream,Bio.Algorithms.Alignment.ISequenceAlignment)">
            <summary>
            Writes specified alignment object to a stream.
            The output is formatted according to the BAM specification.
            Note that this method does not create index file.
            </summary>
            <param name="sequenceAlignment">SequenceAlignmentMap object.</param>
            <param name="writer">Stream to write BAM data.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.Format(System.IO.Stream,System.Collections.Generic.IEnumerable{Bio.Algorithms.Alignment.ISequenceAlignment})">
            <summary>
            Write a collection of ISequenceAlignments to a file.
            </summary>
            <param name="stream">The name of the file to write the formatted sequence alignments.</param>
            <param name="sequenceAlignments">The sequenceAlignments to write.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.CompressBAMFile(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compress the specified stream (reader) and writes to the specified stream (writer).
            </summary>
            <param name="reader">Stream to read from.</param>
            <param name="writer">Stream to write.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.WriteHeader(Bio.IO.SAM.SAMAlignmentHeader,System.IO.Stream)">
            <summary>
            Writes BAM header to the specified stream in BAM format.
            </summary>
            <param name="header">SAMAlignmentHeader object</param>
            <param name="writer">Stream to write.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.WriteAlignedSequence(Bio.IO.SAM.SAMAlignmentHeader,Bio.IO.SAM.SAMAlignedSequence,System.IO.Stream)">
            <summary>
            Writes SAMAlignedSequence to specified stream.
            </summary>
            <param name="header">Header from SAM object.</param>
            <param name="alignedSeq">SAMAlignedSequence object.</param>
            <param name="writer">Stream to write.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.CreateBAMIndexFile(System.IO.Stream,Bio.IO.BAM.BAMIndexStorage)">
            <summary>
            Creates BAMIndex object from the specified BAM file and writes to specified BAMIndex file.
            </summary>
            <param name="compressedBAMStream"></param>
            <param name="indexStorage"></param>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.WriteSequenceAlignment(Bio.Algorithms.Alignment.ISequenceAlignment,System.IO.Stream,Bio.IO.BAM.BAMIndexStorage)">
            <summary>
            Writes sequence alignment to specified stream.
            </summary>
            <param name="sequenceAlignment">Sequence alignment object</param>
            <param name="writer">Stream to write.</param>
            <param name="indexStorage">BAMIndex file.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.WriteUncompressed(Bio.IO.SAM.SequenceAlignmentMap,System.IO.Stream,System.Boolean)">
            <summary>
            Writes specified sequence alignment to stream.
            The output is formatted according to the BAM structure.
            </summary>
            <param name="sequenceAlignmentMap">SequenceAlignmentMap object.</param>
            <param name="writer">Stream to write.</param>
            <param name="createSortedFile">If this flag is true output file will be sorted.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.WriteUncompressedSortedBAM(Bio.IO.SAM.SequenceAlignmentMap,System.IO.Stream)">
            <summary>
            Writes specified sequence alignment to stream according to the specified sorted order.
            The output is formatted according to the BAM structure.
            </summary>
            <param name="sequenceAlignmentMap">SequenceAlignmentMap object.</param>
            <param name="writer">Stream to write.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.GetBGZFStructure(System.IO.Stream)">
            <summary>
            Gets BGZF structure from the GZipStream compression.
            </summary>
            <param name="compressedStream">BAM file which is compressed according to BGZF compression.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.GetEOFBlock">
            <summary>
            Gets empty block.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.WriteAlignedSequence(Bio.IO.SAM.SAMAlignedSequence,System.IO.Stream)">
            <summary>
            Writes SAMAlignedSequence to specified stream.
            </summary>
            <param name="alignedSeq">SAMAlignedSequence object.</param>
            <param name="writer">Stream to write.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.GetEncodedSequence(Bio.IO.SAM.SAMAlignedSequence)">
            <summary>
            Gets encoded sequence according to the BAM specification.
            </summary>
            <param name="alignedSeq"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.GetQualityValue(Bio.ISequence)">
            <summary>
            Gets quality values from specified sequence.
            </summary>
            <param name="sequence">Sequence object.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.GetEncodedCIGAR(System.String)">
            <summary>
            Gets encoded CIGAR value.
            </summary>
            <param name="cigar">CIGAR</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMFormatter.GetOptionalFieldIntValueSize(System.String)">
            <summary>
            Returns,
             1 if the int value can be held in an unsinged byte.
            -1 if the int value can be held in a singed byte.
             2 if the int value can be held in an unint16 (ushort).
            -2 if the int value can be held in an int16 (short).
             4 if the int value can be held in an uint32.
            -4 if the int value can be held in an int32.
             0 if the specified value can't parsed by an uint.
            </summary>
            <param name="value">String representing int value.</param>
        </member>
        <member name="P:Bio.IO.BAM.BAMFormatter.Name">
            <summary>
            Gets the name of the sequence alignment formatter being
            implemented. This is intended to give the developer some
            information of the formatter type.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMFormatter.Description">
            <summary>
            Gets the description of the sequence alignment formatter being
            implemented. This is intended to give the developer some 
            information of the formatter.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMFormatter.SupportedFileTypes">
            <summary>
            Gets the file extensions that the formatter implementation
            will support.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMFormatter.CreateSortedBAMFile">
            <summary>
            Gets or sets the value indicating that whether the output file to be sorted or not.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMFormatter.CreateIndexFile">
            <summary>
            Gets or sets the value indicating that whether to create index file or not.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMFormatter.SortType">
            <summary>
            Gets or sets type of sort needed.
            </summary>
        </member>
        <member name="T:Bio.IO.BAM.BAMIndex">
            <summary>
            Class to hold BAMIndex information.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMIndex.#ctor">
            <summary>
            Creates an instance of BAMIndex class.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMIndex.RefIndexes">
            <summary>
            Gets list of reference indices.
            </summary>
        </member>
        <member name="T:Bio.IO.BAM.BAMIndexStorage">
            <summary>
            Class to read or write BAMIndex data from a file or a stream.
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.BAMIndexStorage.MaxBins">
            <summary>
            The highest number of bins allowed, meta-data can be stored in the chunks position for a bin
            this large
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.BAMIndexStorage.MaxLinerindexArraySize">
            <summary>
            The number of 16kb (2^14) bins in the indexing scheme
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMIndexStorage.LargestBinPossibleForSequenceLength(System.Int32)">
            <summary>
            Not all sequences can get all possible bins, so this returns the largest sequence length possible
            </summary>
            <param name="sequenceLength"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.BAM.BAMIndexStorage.#ctor(System.IO.Stream)">
            <summary>
            Creates new instance of the class with specified stream.
            </summary>
            <param name="stream">Stream to use while reading or writing BAMIndex data.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMIndexStorage.Write(Bio.IO.BAM.BAMIndex)">
            <summary>
            Writes specified BAMIndex data.
            </summary>
            <param name="bamIndex">BAMIndex instance to write.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMIndexStorage.Read">
            <summary>
            Returns BAMIndex instance by parsing BAM index source.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMIndexStorage.Dispose">
            <summary>
            Disposes resources held by this object.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMIndexStorage.Dispose(System.Boolean)">
            <summary>
            Dispose the underlying stream.
            </summary>
            <param name="disposing">If disposing equals true, Requests that the system not call the finalizer for this instance.</param>
        </member>
        <member name="P:Bio.IO.BAM.BAMIndexStorage.Source">
            <summary>
            Gets the underlying stream.
            </summary>
        </member>
        <member name="T:Bio.IO.BAM.BAMParser">
            <summary>
            A BAMParser reads from a source of binary data that is formatted according to the BAM
            file specification, and converts the data to in-memory SequenceAlignmentMap object.
            Documentation for the latest BAM file format can be found at
            http://samtools.sourceforge.net/SAM1.pdf
            </summary>
        </member>
        <member name="T:Bio.IO.ISequenceAlignmentParser">
            <summary>
            Interface that defines a contract for parser to parse sequence alignment files. 
            For advanced users, the ability to select an encoding for the internal memory 
            representation is provided. Implementations also have a default encoding for 
            each alphabet that may be encountered.
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.BAMParser.BAMAlphabet">
            <summary>
            Symbols supported by BAM.
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.BAMParser.readStream">
            <summary>
            Holds the BAM file stream.
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.BAMParser.isCompressed">
            <summary>
            Flag to indicate whether the BAM file is compressed or not.
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.BAMParser.refSeqNames">
            <summary>
            Holds the names of the reference sequence.
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.BAMParser.refSeqLengths">
            <summary>
            Holds the length of the reference sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.BAMParser.deCompressedStream">
            <summary>
            A temporary file stream to hold uncompressed blocks.
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.BAMParser.currentCompressedBlockStartPos">
            <summary>
            Holds the current position of the compressed BAM file stream.
            Used while creating BAMIndex objects from a BAM file and while parsing a BAM file using a BAM index file.
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.BAMParser.bamIndex">
            <summary>
            Holds the bam index object created from a BAM file.
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.BAMParser.createBamIndex">
            <summary>
            Flag to indicate to whether to create BAMIndex while parsing BAM file or not.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.#ctor">
            <summary>
            The default constructor which chooses the default encoding based on the alphabet.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.IsCompressedBAMFile(System.Byte[])">
            <summary>
            Returns a boolean value indicating whether a BAM file is compressed or uncompressed.
            </summary>
            <param name="array">Byte array containing first 4 bytes of a BAM file</param>
            <returns>Returns true if the specified byte array indicates that the BAM file is compressed else returns false.</returns>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.IsUnCompressedBAMFile(System.Byte[])">
            <summary>
            Returns a boolean value indicating whether a BAM file is valid uncompressed BAM file or not.
            </summary>
            <param name="array">Byte array containing first 4 bytes of a BAM file</param>
            <returns>Returns true if the specified byte array indicates a valid uncompressed BAM file else returns false.</returns>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.GetOptionalValue(System.Char,System.Byte[],System.Int32@)">
            <summary>
            Gets optional value depending on the valuetype.
            </summary>
            <param name="valueType">Value Type.</param>
            <param name="array">Byte array to read from.</param>
            <param name="startIndex">Start index of value in the array.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.GetStringLength(System.Byte[],System.Int32)">
            <summary>
            Gets the length of the string in byte array.
            </summary>
            <param name="array">Byte array which contains string.</param>
            <param name="startIndex">Start index of array from which string is stored.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.GetSeqCharAsByte(System.Int32)">
            <summary>
            Gets equivalent sequence char for the specified encoded value.
            </summary>
            <param name="encodedValue">Encoded value.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decompresses specified compressed stream to out stream.
            </summary>
            <param name="compressedStream">Compressed stream to decompress.</param>
            <param name="outStream">Out stream.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.SortAndMergeChunks(System.Collections.Generic.IEnumerable{Bio.IO.BAM.Chunk})">
            <summary>
            Sorts and merges the overlapping chunks.
            </summary>
            <param name="chunks">Chunks to sort and merge.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.ParseOne(System.IO.Stream)">
            <summary>
            Returns a SequenceAlignmentMap object by parsing a BAM file.
            </summary>
            <param name="stream">Stream to read.</param>
            <returns>SequenceAlignmentMap object.</returns>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.Bio#IO#IParser{Bio#Algorithms#Alignment#ISequenceAlignment}#ParseOne(System.IO.Stream)">
            <summary>
            Returns a SequenceAlignmentMap object by parsing a BAM file.
            </summary>
            <param name="stream">Stream to read.</param>
            <returns>SequenceAlignmentMap object.</returns>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.Bio#IO#IParser{Bio#Algorithms#Alignment#ISequenceAlignment}#Parse(System.IO.Stream)">
            <summary>
            Returns an iterator over a set of SAMAlignedSequences retrieved from a parsed BAM file.
            </summary>
            <param name="stream">Stream to read</param>
            <returns>IEnumerable SAMAlignedSequence object.</returns>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.Parse(System.IO.Stream)">
            <summary>
            Returns an iterator over a set of SAMAlignedSequences retrieved from a parsed BAM file.
            </summary>
            <param name="stream">Stream to read</param>
            <returns>IEnumerable SAMAlignedSequence object.</returns>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.GetAlignmentMap(System.IO.Stream,Bio.IO.BAM.BAMIndexStorage,System.String,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Returns the create sequence alignment map.
            </summary>
            <param name="reader"></param>
            <param name="bamIndexStorage"></param>
            <param name="refSeqName"></param>
            <param name="refSeqIndex"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.GetAlignment(System.IO.Stream)">
            <summary>
            Returns SequenceAlignmentMap object by parsing specified BAM stream.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.GetIndexFromBAMStorage(System.IO.Stream)">
            <summary>
            Returns BAMIndex by parsing specified BAM stream.
            </summary>
            <param name="stream">Stream to read.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.GetHeader(System.IO.Stream)">
            <summary>
            Gets the SAMAlignmentHeader from the specified stream.
            Note that this method resets the specified stream to BOF before reading.
            </summary>
            <param name="bamStream">BAM file stream.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.GetAlignedSequence(System.Boolean)">
            <summary>
            Returns an aligned sequence by parses the BAM file.
            </summary>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence in the SAMAlignedSequence should be in 
            readonly mode or not. If this flag is set to true then the resulting sequence's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.Dispose">
            <summary>
            Implements the IDisposable interface
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.Dispose(System.Boolean)">
            <summary>
            Disposes this object.
            </summary>
            <param name="disposing">If true disposes resources held by this instance.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.ValidateReader">
            <summary>
            Validates the BAM stream.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.GetHeader">
            <summary>
            Parses the BAM file and returns the Header.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.ReduceChunks">
            <summary>
            Merges small chunks belongs to a bin which are in the same compressed block.
            This will reduce number of seek calls required.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.GetAlignedSequence(System.Int32,System.Int32)">
            <summary>
            Returns an aligned sequence by parses the BAM file.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.ReadUnCompressedData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads specified number of uncompressed bytes from BAM file to byte array
            </summary>
            <param name="array">Byte array to copy.</param>
            <param name="offset">Offset of Byte array from which the data has to be copied.</param>
            <param name="count">Number of bytes to copy.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.GetNextBlock">
            <summary>
            Gets next block by reading and decompressing the compressed block from compressed BAM file.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.GetTempStream(System.UInt32)">
            <summary>
            Gets the temp stream to store Decompressed blocks.
            If the specified capacity is with in the Maximum integer (32 bit int) limit then 
            a MemoryStream is created else a temp file is created to store Decompressed data.
            </summary>
            <param name="capacity">Required capacity.</param>
        </member>
        <member name="M:Bio.IO.BAM.BAMParser.IsEOF">
            <summary>
            Returns a boolean indicating whether the reader is reached end of file or not.
            </summary>
            <returns>Returns true if the end of the file has been reached.</returns>
        </member>
        <member name="P:Bio.IO.BAM.BAMParser.Name">
            <summary>
            Gets the name of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser type.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMParser.Description">
            <summary>
            Gets the description of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMParser.Alphabet">
            <summary>
            The alphabet to use for sequences in parsed SequenceAlignmentMap objects.
            Always returns singleton instance of SAMDnaAlphabet.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMParser.SupportedFileTypes">
            <summary>
            Gets the file extensions that the parser implementation
            will support.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMParser.RefSequences">
            <summary>
            Reference sequences, used to resolve "=" symbol in the sequence data.
            </summary>
        </member>
        <member name="T:Bio.IO.BAM.BAMReferenceIndexes">
            <summary>
            Class to hold BAM file index information related to a reference sequence.
            Holds bin and linear index information for a reference sequence.
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.BAMReferenceIndexes.LinearIndexMaker">
            <summary>
            An array holding the linear offsets to be output
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMReferenceIndexes.#ctor(System.Int32)">
            <summary>
            Creates new instance of BAMReferenceIndexes class. That will be populated with data to make an
            index
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMReferenceIndexes.#ctor">
            <summary>
            Create a new instance of the class that will be populated with data to make an instance.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMReferenceIndexes.AddReadToIndexInformation(Bio.IO.SAM.SAMAlignedSequence,Bio.IO.BAM.FileOffset)">
            <summary>
            Add a read being parsed to the index
            </summary>
            <param name="alignedSequence"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Bio.IO.BAM.BAMReferenceIndexes.Freeze">
            <summary>
            Finish creating the class.
            TODO: Separate out into factory method?
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMReferenceIndexes.Bins">
            <summary>
            Gets list of Bin index information.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMReferenceIndexes.LinearIndex">
            <summary>
            Gets list of Linear file offsets.
            An array holding the linear offsets to be output
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMReferenceIndexes.HasMetaData">
            <summary>
            Does this read have meta data associated with it? (number of mapped/unmapped reads?)
            Note that the meta-data is not standardized yet across implementations
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMReferenceIndexes.MappedReadsCount">
            <summary>
            Count of the number of mapped reads, may be inferred from index file.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMReferenceIndexes.UnMappedReadsCount">
            <summary>
            Count of the number of unmapped reads (Typically 
            those where a read does not align to a reference but its 
            mate does, though this is not guaranteed).
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMReferenceIndexes.FirstOffSetSeen">
            <summary>
            The location of the first offset in this file for a read from this index
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.BAMReferenceIndexes.LastOffSetSeen">
            <summary>
            The location of the last offset in this file for a read from this index.
            </summary>
        </member>
        <member name="T:Bio.IO.BAM.BAMReferenceIndexes.LinearIndexArrayMaker">
            <summary>
            Array which holds the linear index and associated offsets for each 
            of the bins possible for all 16 kb regions of this sequence.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.BAMReferenceIndexes.LinearIndexArrayMaker.UpdateLinearArrayIndex(Bio.IO.SAM.SAMAlignedSequence,Bio.IO.BAM.FileOffset)">
            <summary>
            Update the linear index array based on an aligned read and its current coordinates
            </summary>
            <param name="alignedSeq"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Bio.IO.BAM.BAMReferenceIndexes.LinearIndexArrayMaker.Freeze">
            <summary>
            Called after all the data has been added
            </summary>
        </member>
        <member name="T:Bio.IO.BAM.BAMSortByFields">
            <summary>
            Defines list of possible sort option for SequenceAlignmentMap
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.BAMSortByFields.ChromosomeCoordinates">
            <summary>
            Sort by Positions (Pos)
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.BAMSortByFields.ReadNames">
            <summary>
            Sort by Read name (QName)
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.BAMSortByFields.ChromosomeNameAndCoordinates">
            <summary>
            Sort by Chromosome name (RName) and Positions (Pos)
            </summary>
        </member>
        <member name="T:Bio.IO.BAM.Bin">
            <summary>
            Class to hold Bin information.
            An instance of this class can contain Bin number and list of chunks related to the bin number.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.Bin.#ctor">
            <summary>
            Creates an instance of Bin class.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.Bin.BinNumber">
            <summary>
            Gets or sets bin number.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.Bin.Chunks">
            <summary>
            Gets list of chunks.
            </summary>
        </member>
        <member name="T:Bio.IO.BAM.Chunk">
            <summary>
            Class to hold start and end offsets of a BAM file chunk related to a bin.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.Chunk.ChunkStart">
            <summary>
            Gets or sets start offset of this chunk.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.Chunk.ChunkEnd">
            <summary>
            Gets or sets end offset of this chunk.
            </summary>
        </member>
        <member name="T:Bio.IO.BAM.ChunkSorterForMerging">
            <summary>
            Singleton Class to Sort Chunks to help merging of chunks.
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.ChunkSorterForMerging.Instance">
            <summary>
            Static instance to maintain single instance.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.ChunkSorterForMerging.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.ChunkSorterForMerging.GetInstance">
            <summary>
            Gets the singleton instance of the ChunkSorterForMerging class.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.ChunkSorterForMerging.Compare(Bio.IO.BAM.Chunk,Bio.IO.BAM.Chunk)">
            <summary>
            Compares two Chunks in the following order.
              Compares X.ChunkStart with Y.ChunkStart if the result is non zero then returns the result.
              else compares Y.ChunnkEnd with X.ChunkEnd and returns the result.
            </summary>
            <param name="x">First chunk to compare.</param>
            <param name="y">Second chunk to compare.</param>
        </member>
        <member name="T:Bio.IO.BAM.FileOffset">
            <summary>
            Class to hold offset of a BAM file.
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.FileOffset.BothDataElements">
            <summary>
            The two types are stored  in one 64 bit field here.
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.FileOffset.#ctor(System.UInt64,System.UInt16)">
            <summary>
            Create a new file offset.
            </summary>
            <param name="compressedStreamPosition"></param>
            <param name="decompressedStreamPosition"></param>
        </member>
        <member name="M:Bio.IO.BAM.FileOffset.CompareTo(Bio.IO.BAM.FileOffset)">
            <summary>
            Compares two FileOffsets.
            </summary>
            <param name="other">Other file offset to compare.</param>
        </member>
        <member name="M:Bio.IO.BAM.FileOffset.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified FileOffset instance.
            </summary>
            <param name="obj">An FileOffset instance to compare to this instance.</param>
            <returns> true if obj has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:Bio.IO.BAM.FileOffset.Equals(Bio.IO.BAM.FileOffset)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified FileOffset instance.
            </summary>
            <param name="other">An FileOffset instance to compare to this instance.</param>
            <returns> true if other has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:Bio.IO.BAM.FileOffset.op_Equality(Bio.IO.BAM.FileOffset,Bio.IO.BAM.FileOffset)">
            <summary>
            Returns a value indicating whether x is equal to y.
            </summary>
            <param name="x">First operand.</param>
            <param name="y">second operand.</param>
        </member>
        <member name="M:Bio.IO.BAM.FileOffset.op_GreaterThan(Bio.IO.BAM.FileOffset,Bio.IO.BAM.FileOffset)">
            <summary>
            Returns a value indicating whether x is greater than y.
            </summary>
            <param name="x">First operand.</param>
            <param name="y">second operand.</param>
        </member>
        <member name="M:Bio.IO.BAM.FileOffset.op_GreaterThanOrEqual(Bio.IO.BAM.FileOffset,Bio.IO.BAM.FileOffset)">
            <summary>
            Returns a value indicating whether x is greater than or equal to y.
            </summary>
            <param name="x">First operand.</param>
            <param name="y">second operand.</param>
        </member>
        <member name="M:Bio.IO.BAM.FileOffset.op_LessThanOrEqual(Bio.IO.BAM.FileOffset,Bio.IO.BAM.FileOffset)">
            <summary>
            Returns a value indicating whether x is less than or equal to y.
            </summary>
            <param name="x">First operand.</param>
            <param name="y">second operand.</param>
        </member>
        <member name="M:Bio.IO.BAM.FileOffset.op_LessThan(Bio.IO.BAM.FileOffset,Bio.IO.BAM.FileOffset)">
            <summary>
            Returns a value indicating whether x is less than y.
            </summary>
            <param name="x">First operand.</param>
            <param name="y">second operand.</param>
        </member>
        <member name="M:Bio.IO.BAM.FileOffset.op_Inequality(Bio.IO.BAM.FileOffset,Bio.IO.BAM.FileOffset)">
            <summary>
            Returns a value indicating whether x is not equal to y.
            </summary>
            <param name="x">First operand.</param>
            <param name="y">second operand.</param>
        </member>
        <member name="M:Bio.IO.BAM.FileOffset.GetHashCode">
            <summary>
            Gets the Hashcode for this instance.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.FileOffset.CompressedBlockOffset">
            <summary>
            Gets or sets BGZF block start offset.
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.FileOffset.UncompressedBlockOffset">
            <summary>
            Gets or sets an offset of uncompressed block inside a BGZF block 
            from which aligned sequences starts or ends.
            </summary>
        </member>
        <member name="T:Bio.IO.BAM.RegexValidatedStringList">
            <summary>
            A list of strings where each item in the list has been validated to meet the conditions of a particular 
            regular expression, used to verify that any item retrieved from this list follows the condition given.
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.RegexValidatedStringList.items">
            <summary>
            Private list of validated items
            </summary>
        </member>
        <member name="F:Bio.IO.BAM.RegexValidatedStringList.regex">
            <summary>
            Regular expression used to validate items
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.RegexValidatedStringList.ValidateItem(System.String)">
            <summary>
            Validate that a string meets the criteria required to be added to the list
            </summary>
            <param name="toAdd"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.BAM.RegexValidatedStringList.throwErrorIfUnacceptableItem(System.String)">
            <summary>
            Internal method that throws an error if the item is unacceptable, this error should never be thrown and users of the
            class can avoid this by calling ValidateItem before attempting to add the string to the list.
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:Bio.IO.BAM.RegexValidatedStringList.#ctor(System.String)">
            <summary>
            Initialize a list with a regular expression that all items must conform to.
            </summary>
            <param name="validationRegEx"></param>
        </member>
        <member name="M:Bio.IO.BAM.RegexValidatedStringList.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Initialize a list with a regular expression that all items must conform to.
            </summary>
            <param name="validationRegEx"></param>
        </member>
        <member name="M:Bio.IO.BAM.RegexValidatedStringList.IndexOf(System.String)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.BAM.RegexValidatedStringList.Insert(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.BAM.RegexValidatedStringList.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Bio.IO.BAM.RegexValidatedStringList.Add(System.String)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.BAM.RegexValidatedStringList.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bio.IO.BAM.RegexValidatedStringList.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.BAM.RegexValidatedStringList.CopyTo(System.String[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Bio.IO.BAM.RegexValidatedStringList.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.BAM.RegexValidatedStringList.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.BAM.RegexValidatedStringList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.BAM.RegexValidatedStringList.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.BAM.RegexValidatedStringList.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Bio.IO.BAM.RegexValidatedStringList.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="T:Bio.IO.Bed.BedFormatter">
            <summary>
                Formats lists of ISequenceRange or SequenceRangeGroupings into a file
                formatted in the BED format.
                Info for the specification of this format can be found at:
                http://genome.ucsc.edu/FAQ/FAQformat
            </summary>
        </member>
        <member name="T:Bio.IO.ISequenceRangeFormatter">
            <summary>
                Writes out SequenceRange lists or groupings to a data stream.
            </summary>
        </member>
        <member name="M:Bio.IO.ISequenceRangeFormatter.Format(System.IO.Stream,System.Collections.Generic.IList{Bio.ISequenceRange})">
            <summary>
                Writes out a list of ISequenceRange objects to a specified
                stream.
            </summary>
        </member>
        <member name="M:Bio.IO.ISequenceRangeFormatter.Format(System.IO.Stream,Bio.SequenceRangeGrouping)">
            <summary>
                Writes out a grouping of ISequenceRange objects to a specified
                text writer.
            </summary>
        </member>
        <member name="M:Bio.IO.Bed.BedFormatter.Format(System.IO.Stream,System.Collections.Generic.IList{Bio.ISequenceRange})">
            <summary>
                Writes out a list of ISequenceRange objects to a specified
                stream. The stream is closed at the end.
            </summary>
            <param name="stream">The stream where the formatted data is to be written.</param>
            <param name="ranges">The range collection to be formatted.</param>
        </member>
        <member name="M:Bio.IO.Bed.BedFormatter.Format(System.IO.Stream,Bio.SequenceRangeGrouping)">
            <summary>
                Writes out a grouping of ISequenceRange objects to a specified
                stream.
            </summary>
            <param name="stream">The stream where the formatted data is to be written, it will be closed at the end.</param>
            <param name="rangeGroup">The range grouping to be formatted.</param>
        </member>
        <member name="P:Bio.IO.Bed.BedFormatter.Name">
            <summary>
                The name of this format: BED
            </summary>
        </member>
        <member name="P:Bio.IO.Bed.BedFormatter.Description">
            <summary>
                A short description of the format
            </summary>
        </member>
        <member name="P:Bio.IO.Bed.BedFormatter.SupportedFileTypes">
            <summary>
                Known file extensions for the BED format
            </summary>
        </member>
        <member name="T:Bio.IO.Bed.BedParser">
            <summary>
                Parses ISequenceRange objects that are formatted according to the BED
                format. This is a format of tab delimited text where the each line
                represents one range and each defines an ID, start and stop index.
                Info for the specification of this format can be found at:
                http://genome.ucsc.edu/FAQ/FAQformat
                In this format indices start their count from zero. The chromosome start
                index is inclusive and the chromosome end index is exclusive.
                There are three required fields in each line as described above. There
                are also 9 option fields. These are: name, score, strand, thickStartm
                thickEnd, itemRgb, blockCount, blockSizes, and blockStarts.
                This parser does not support the bigBED format.
            </summary>
        </member>
        <member name="T:Bio.IO.ISequenceRangeParser">
            <summary>
            The interface defining the methods for parsing ISequenceRange
            objects from files or readers.
            </summary>
        </member>
        <member name="M:Bio.IO.ISequenceRangeParser.ParseRange(System.IO.Stream)">
            <summary>
            Parse a set of ISequenceRange objects from a stream.
            </summary>
        </member>
        <member name="M:Bio.IO.ISequenceRangeParser.ParseRangeGrouping(System.IO.Stream)">
            <summary>
            Parse a set of ISequenceRange objects into a SequenceRange
            grouping from a stream.
            </summary>
        </member>
        <member name="M:Bio.IO.Bed.BedParser.ParseRange(System.IO.Stream)">
            <summary>
                Parse a set of ISequenceRange objects from a stream.
            </summary>
            <param name="stream">The stream from which the sequence range is to be parsed.</param>
            <returns>The list of sequence ranges.</returns>
        </member>
        <member name="M:Bio.IO.Bed.BedParser.ParseRangeGrouping(System.IO.Stream)">
            <summary>
                Parse a set of ISequenceRange objects into a SequenceRange
                grouping from a stream.
            </summary>
            <param name="stream">The stream from which the sequence range is to be parsed.</param>
            <returns>The sequence range groups.</returns>
        </member>
        <member name="P:Bio.IO.Bed.BedParser.Name">
            <summary>
                The name of this parser: BED
            </summary>
        </member>
        <member name="P:Bio.IO.Bed.BedParser.Description">
            <summary>
                A short description of the BED parser
            </summary>
        </member>
        <member name="P:Bio.IO.Bed.BedParser.SupportedFileTypes">
            <summary>
                Known file extensions for BED files
            </summary>
        </member>
        <member name="T:Bio.IO.ClustalW.ClustalWParser">
            <summary>
            A ClustalWParser reads from a source of text that is formatted according to the ClustalW flat
            file specification, and converts the data to in-memory ISequenceAlignment objects.
            </summary>
        </member>
        <member name="F:Bio.IO.ClustalW.ClustalWParser.skipBlankLines">
            <summary>
            Indicates that the parser should skip any blank line while reading the stream.
            </summary>
        </member>
        <member name="F:Bio.IO.ClustalW.ClustalWParser.line">
            <summary>
            Stores the last line read by the reader
            </summary>
        </member>
        <member name="M:Bio.IO.ClustalW.ClustalWParser.Parse(System.IO.Stream)">
            <summary>
            Parses a list of biological sequence alignment texts from a reader.
            </summary>
            <param name="stream">A stream for a biological sequence alignment text, it will be closed at the end.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:Bio.IO.ClustalW.ClustalWParser.ParseOne(System.IO.Stream)">
            <summary>
            Parses a single biological sequence alignment text from a stream.
            </summary>
            <param name="stream">A stream for a biological sequence alignment text.</param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:Bio.IO.ClustalW.ClustalWParser.ParseOne(System.IO.StreamReader)">
            <summary>
            Parses a single biological sequence alignment text from a stream.
            </summary>
            <param name="reader">Reader</param>
            <returns>Sequence</returns>
        </member>
        <member name="M:Bio.IO.ClustalW.ClustalWParser.ReadNextLine(System.IO.TextReader)">
            <summary>
            Reads next line considering
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.ClustalW.ClustalWParser.Name">
            <summary>
            Gets the name of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser type.
            </summary>
        </member>
        <member name="P:Bio.IO.ClustalW.ClustalWParser.Description">
            <summary>
            Gets the description of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.ClustalW.ClustalWParser.Alphabet">
            <summary>
            Gets or sets alphabet to use for sequences in parsed ISequenceAlignment objects.
            </summary>
        </member>
        <member name="P:Bio.IO.ClustalW.ClustalWParser.SupportedFileTypes">
            <summary>
            Gets the file extensions that the parser implementation
            will support.
            </summary>
        </member>
        <member name="T:Bio.IO.SequenceParserDecorator`2">
            <summary>
            Parser decorator to convert IParser to ISequenceParser, this can be used to take
            specializations of IParser(T) and turn them into ISequenceParser (e.g. FastQ).
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:Bio.IO.SequenceParserDecorator`2.#ctor(`0)">
            <summary>
            Constructor
            </summary>
            <param name="innerParser"></param>
        </member>
        <member name="M:Bio.IO.SequenceParserDecorator`2.Parse(System.IO.Stream)">
            <summary>
            Parses a list of biological sequence texts from a given stream.
            </summary>
            <param name="stream">The stream to pull the data from</param>
            <returns>The collection of parsed ISequence objects.</returns>
        </member>
        <member name="M:Bio.IO.SequenceParserDecorator`2.ParseOne(System.IO.Stream)">
            <summary>
            Parse a single sequence from the stream.
            </summary>
            <param name="stream">Stream</param>
            <returns>Sequence</returns>
        </member>
        <member name="P:Bio.IO.SequenceParserDecorator`2.Name">
            <summary>
            Gets the name of the parser being implemented. 
            This is intended to give the developer name of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceParserDecorator`2.Description">
            <summary>
            Gets the description of the parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceParserDecorator`2.SupportedFileTypes">
            <summary>
            Gets the file extensions that the parser supports.
            If multiple extensions are supported then this property 
            will return a string containing all extensions with a ',' delimited.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceParserDecorator`2.Alphabet">
            <summary>
            Gets or sets the alphabet to use for parsed ISequence objects.  If this is not set, the alphabet will
            be determined based on the file being parsed.
            </summary>
        </member>
        <member name="T:Bio.IQualitativeSequence">
            <summary>
            Sequence with qualitative data
            </summary>
        </member>
        <member name="M:Bio.IQualitativeSequence.GetEncodedQualityScore(System.Int64)">
            <summary>
            Gets the encoded quality score found at the specified index if within bounds. Note that the index value start at 0.
            </summary>
            <param name="index">Index at which the symbol is required.</param>
            <returns>Quality Score at the given index.</returns>
        </member>
        <member name="M:Bio.IQualitativeSequence.GetEncodedQualityScores">
            <summary>
            Gets the encoded quality scores.
            </summary>
        </member>
        <member name="P:Bio.IQualitativeSequence.FormatType">
            <summary>
            Gets the quality scores format type.
            Ex: Illumina/Solexa/Sanger.
            </summary>
        </member>
        <member name="T:Bio.Util.DeltaAlignmentCollection">
            <summary>
            This class provides indexer access to the DeltaAlignments stored in the specified delta alignment file. 
            This class uses a file to hold DeltaAlignment id's from the deltaAlignment file.
            As the id of delta alignment itself is the location in the file, using DeltaAlignmentParser 
            and FastASequencePositionParser this class gets the delta alignment on demand.
            </summary>
        </member>
        <member name="F:Bio.Util.DeltaAlignmentCollection.BytesPerRecord">
            <summary>
            Bytes required per delta alignment record.
            </summary>
        </member>
        <member name="F:Bio.Util.DeltaAlignmentCollection.fastASequencePositionParser">
            <summary>
            FastASequencePositionParser instance.
            </summary>
        </member>
        <member name="F:Bio.Util.DeltaAlignmentCollection.collectionFileReader">
            <summary>
            FileStream to read collectionFile.
            </summary>
        </member>
        <member name="F:Bio.Util.DeltaAlignmentCollection.readBuffer">
            <summary>
            Buffer to use while reading collectionFile.
            </summary>
        </member>
        <member name="F:Bio.Util.DeltaAlignmentCollection.disposeFastASequencePositionParser">
            <summary>
            Flag to indicate whether disposing this instance should dispose FastASequencePositionParser or not.
            </summary>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentCollection.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Initializes a new instance of the DeltaAlignmentCollection class.
            </summary>
            <param name="deltaAlignmentStream">Delta alignment stream.</param>
            <param name="readsStream">Query/Reads stream.</param>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentCollection.#ctor(System.IO.Stream,Bio.Util.FastASequencePositionParser)">
            <summary>
            Initializes a new instance of the DeltaAlignmentCollection class.
            </summary>
            <param name="deltaAlignmentStream">Delta alignment stream.</param>
            <param name="fastASequencePositionParser">Query/Reads filename.</param>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentCollection.GetDeltaAlignmentsByReads">
            <summary>
            Gets Delta alignments grouped by read sequence id.
            </summary>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentCollection.GetDeltaAlignmentFor(System.String)">
            <summary>
            Gets the list of delta alignments for the specified sequence id.
            </summary>
            <param name="sequenceId">Sequence id.</param>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentCollection.Dispose">
            <summary>
            Disposes the underlying streams used.
            </summary>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentCollection.Dispose(System.Boolean)">
            <summary>
            Disposes the underlying streams used.
            </summary>
            <param name="disposing">Flag to indicate whether it is called from dispose method or not.</param>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentCollection.LoadAllFromFile">
            <summary>
            Loads this collection with delta alignment from file.
            </summary>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentCollection.GetDeltaAlignmentIdFor(System.String,System.String@)">
            <summary>
            Gets the first delta alignment's id for the specified sequence id.
            </summary>
            <param name="sequenceId">Sequence id.</param>
            <param name="fullSequenceId">Full id of the sequence id.</param>
            <returns>Delta alignment id.</returns>
        </member>
        <member name="P:Bio.Util.DeltaAlignmentCollection.Count">
            <summary>
            Gets the no of delta alignment present in this collection.
            </summary>
        </member>
        <member name="P:Bio.Util.DeltaAlignmentCollection.QueryStream">
            <summary>
            Gets Query or read file name.
            </summary>
        </member>
        <member name="P:Bio.Util.DeltaAlignmentCollection.DeltaAlignmentStream">
            <summary>
            Gets Delta alignments file name.
            </summary>
        </member>
        <member name="P:Bio.Util.DeltaAlignmentCollection.DeltaAlignmentParser">
            <summary>
            Gets the DeltaAlignment parser.
            </summary>
        </member>
        <member name="P:Bio.Util.DeltaAlignmentCollection.Item(System.Int64)">
            <summary>
            Gets the Delta alignment present at the specified index.
            </summary>
            <param name="index">Index at which delta alignment is required.</param>
            <returns>Delta alignment.</returns>
        </member>
        <member name="T:Bio.Util.DeltaAlignmentParser">
            <summary>
            This parser reads from a source of text that contains DeltaAlignments
            and converts the data to in-memory DeltaAlignment objects.  
            </summary>
        </member>
        <member name="F:Bio.Util.DeltaAlignmentParser.deltaStream">
            <summary>
            Stream for Delta file.
            </summary>
        </member>
        <member name="F:Bio.Util.DeltaAlignmentParser.parsingReaders">
            <summary>
            List holding all the open parsing readers.
            </summary>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentParser.#ctor(System.IO.Stream,Bio.Util.FastASequencePositionParser)">
            <summary>
            Initializes a new instance of the DeltaAlignmentParser class by 
            loading the specified filename.
            </summary>
            <param name="stream">Name of the File.</param>
            <param name="queryParser">FastASequencePositionParser instance.</param>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentParser.GetPositions">
            <summary>
            Gets the position of DeltaAlignments in the specified file.
            </summary>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentParser.GetDeltaAlignmentAt(System.Int64)">
            <summary>
            Gets the DeltaAlignment at specified position of the file.
            </summary>
            <param name="position">Position at which delta alignment is required.</param>
            <returns>Delta alignment.</returns>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentParser.GetQuerySeqIdAt(System.Int64)">
            <summary>
            Gets the query sequence id in the DeltaAlignment at specified position.
            </summary>
            <param name="position">Position of the delta alignment.</param>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentParser.GetQuerySeqIds">
            <summary>
            Gets Delta alignment id and query sequence ids pairs.
            </summary>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentParser.Parse">
            <summary>
            Returns an IEnumerable of DeltaAlignment in the file being parsed.
            </summary>
            <returns>Returns DeltaAlignment collection.</returns>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentParser.ParseFrom(System.Int64)">
            <summary>
            Starts parsing of delta alignments from the specified position of the file.
            </summary>
            <param name="position">Position from which to start parsing.</param>
            <returns>IEnumerable of DeltaAlignments.</returns>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentParser.Dispose">
            <summary>
            Disposes the underlying stream.
            </summary>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentParser.Dispose(System.Boolean)">
            <summary>
            Dispose the stream.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentParser.ReadNextLine(System.IO.StreamReader)">
            <summary>
            Gets the next line skipping the blank lines.
            </summary>
            <param name="streamReader">Stream reader.</param>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentParser.ParseFrom(System.IO.StreamReader)">
            <summary>
            Starts parsing from the specified StreamReader.
            </summary>
            <param name="streamReader">Stream reader to parse.</param>
            <returns>IEnumerable of DeltaAlignments.</returns>
        </member>
        <member name="P:Bio.Util.DeltaAlignmentParser.QueryParser">
            <summary>
            Gets the query parser.
            </summary>
        </member>
        <member name="T:Bio.IO.FastA.FastAFormatter">
            <summary>
            Writes an ISequence the file specified while creating an instance of this class.
            The output is formatter according to the FastA format.
            </summary>
        </member>
        <member name="T:Bio.IO.ISequenceFormatter">
            <summary>
            Implementations of this interface write an ISequence to a particular location, usually a
            file. The output is formatted according to the particular file format.
            </summary>
        </member>
        <member name="F:Bio.IO.FastA.FastAFormatter.DefaultMaxSymbolsAllowedPerLine">
            <summary>
            Default Maximum symbols allowed per line. 
            As per FastA format, recommended value is 80.
            </summary>
        </member>
        <member name="F:Bio.IO.FastA.FastAFormatter.buffer">
            <summary>
            Buffer used while writing to stream.
            </summary>
        </member>
        <member name="M:Bio.IO.FastA.FastAFormatter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Bio.IO.FastA.FastAFormatter.Format(System.IO.Stream,System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Writes the Multiple sequence in FastA format to the file.
            Note that if the sequence contains more than the MaxSymbolsAllowedPerLine 
            value then it will split the symbols in the specified sequence in to multiple lines, 
            where each line will contain maximum of MaxSymbolsAllowedPerLine symbols.
            </summary>
            <param name="stream">Stream to write to, it will be closed at the end.</param>
            <param name="sequences">Sequences to write.</param>
        </member>
        <member name="M:Bio.IO.FastA.FastAFormatter.Format(System.IO.Stream,Bio.ISequence)">
            <summary>
            Writes the specified sequence in FastA format to the file.
            Note that if the sequence contains more than the MaxSymbolsAllowedPerLine 
            value then it will split the symbols in the specified sequence in to multiple lines, 
            where each line will contain maximum of MaxSymbolsAllowedPerLine symbols.
            </summary>
            <param name="stream">Stream to write to, it will be left open at the end.</param>
            <param name="data">Sequence to write.</param>
        </member>
        <member name="M:Bio.IO.FastA.FastAFormatter.Write(System.IO.TextWriter,Bio.ISequence)">
            <summary>
            Writes the specified sequence in FastA format to the file.
            Note that if the sequence contains more than the MaxSymbolsAllowedPerLine 
            value then it will split the symbols in the specified sequence in to multiple lines, 
            where each line will contain maximum of MaxSymbolsAllowedPerLine symbols.
            </summary>
            <param name="writer">Stream to write to, it will be left open at the end.</param>
            <param name="data">Sequence to write.</param>
        </member>
        <member name="P:Bio.IO.FastA.FastAFormatter.Name">
            <summary>
            Gets the name of this formatter.
            This is intended to give developers name of the formatter.
            </summary>
        </member>
        <member name="P:Bio.IO.FastA.FastAFormatter.Description">
            <summary>
            Gets the description of this formatter.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what this
             class achieves.
            </summary>
        </member>
        <member name="P:Bio.IO.FastA.FastAFormatter.SupportedFileTypes">
            <summary>
            Gets the file extension supported by this formatter.
            </summary>
        </member>
        <member name="P:Bio.IO.FastA.FastAFormatter.AutoFlush">
            <summary>
            Gets or sets a value indicating whether the FastAFormatter will flush its buffer 
            to the underlying stream after every call to Write(ISequence).
            </summary>
        </member>
        <member name="P:Bio.IO.FastA.FastAFormatter.MaxSymbolsAllowedPerLine">
            <summary>
            Gets or sets the maximum symbols allowed per line.
            Default value is 80.
            Note that the FastA format recommends that all lines 
            should be less than 80 symbol in length.
            </summary>
        </member>
        <member name="T:Bio.IO.FastA.FastAParser">
            <summary>
            A FastaParser reads from a source of text that is formatted according to the FASTA flat
            file specification and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered.
            Documentation for the latest FastA file format can be found at
            http://www.ncbi.nlm.nih.gov/blast/fasta.shtml .
            </summary>
        </member>
        <member name="M:Bio.IO.FastA.FastAParser.Parse(System.IO.Stream)">
            <summary>
            Returns an IEnumerable of sequences in the stream being parsed.
            </summary>
            <param name="stream">Stream to parse.</param>
            <returns>Returns ISequence arrays.</returns>
        </member>
        <member name="M:Bio.IO.FastA.FastAParser.ParseOne(System.IO.Stream)">
            <summary>
            Returns an IEnumerable of sequences in the stream being parsed.
            </summary>
            <param name="stream">Stream to parse.</param>
            <returns>Returns a Sequence.</returns>
        </member>
        <member name="M:Bio.IO.FastA.FastAParser.ParseOne(System.IO.TextReader,System.Byte[])">
            <summary>
            Returns an IEnumerable of sequences in the stream being parsed.
            </summary>
            <param name="reader">Stream to parse.</param>
            <param name="buffer">Buffer to use.</param>
            <returns>Returns a Sequence.</returns>
        </member>
        <member name="P:Bio.IO.FastA.FastAParser.Name">
            <summary>
            Gets the type of parser.
            This is intended to give developers name of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.FastA.FastAParser.Description">
            <summary>
            Gets the description of the parser.
            This is intended to give developers some information 
            of the parser class. This property returns a simple description of what this
             class achieves.
            </summary>
        </member>
        <member name="P:Bio.IO.FastA.FastAParser.SupportedFileTypes">
            <summary>
            Gets a comma separated values of the possible FastA
            file extensions.
            </summary>
        </member>
        <member name="P:Bio.IO.FastA.FastAParser.Alphabet">
            <summary>
            Gets or sets the alphabet to use for parsed ISequence objects.  If this is not set, the alphabet will
            be determined based on the file being parsed.
            </summary>
        </member>
        <member name="T:Bio.Util.FastASequencePositionParser">
            <summary>
            This class is similar to FastAParser except that this class appends the
            position of the sequence parsed to its id.
            </summary>
        </member>
        <member name="F:Bio.Util.FastASequencePositionParser.fastaParser">
            <summary>
            An instance of FastAParser.
            </summary>
        </member>
        <member name="F:Bio.Util.FastASequencePositionParser.stream">
            <summary>
            Stream to use in GetSequenceAt method.
            </summary>
        </member>
        <member name="F:Bio.Util.FastASequencePositionParser.sequenceCache">
            <summary>
            Sequence cache to hold sequences.
            </summary>
        </member>
        <member name="F:Bio.Util.FastASequencePositionParser.reverseReversePairedRead">
            <summary>
            Flag to indicate to get the forward strand sequence of a reverse paired read.
            </summary>
        </member>
        <member name="M:Bio.Util.FastASequencePositionParser.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the FastASequencePositionParser class by 
            loading the specified stream.
            </summary>
            <param name="stream">Stream to load</param>
            <param name="reverseReversePairedRead">Flag to indicate to get the forward strand sequence of a reverse paired read.</param>
        </member>
        <member name="M:Bio.Util.FastASequencePositionParser.Parse">
            <summary>
            Returns an IEnumerable of sequences in the file being parsed.
            </summary>
            <returns>Returns ISequence arrays.</returns>
        </member>
        <member name="M:Bio.Util.FastASequencePositionParser.CacheSequencesForRandomAccess">
            <summary>
            Loads sequences to cache.
            This method will ignore the call if sequences are already cached.
            </summary>
        </member>
        <member name="M:Bio.Util.FastASequencePositionParser.GetSequenceAt(System.Int64)">
            <summary>
            Gets the sequence at specified position.
            </summary>
            <param name="position">Start position of the sequence required in the file.</param>
            <returns>Sequence present at the specified position.</returns>
        </member>
        <member name="M:Bio.Util.FastASequencePositionParser.Dispose">
            <summary>
            Disposes the underlying stream.
            </summary>
        </member>
        <member name="M:Bio.Util.FastASequencePositionParser.Dispose(System.Boolean)">
            <summary>
            Disposes the underlying stream.
            </summary>
            <param name="disposing">Flag to indicate whether disposing or not.</param>
        </member>
        <member name="M:Bio.Util.FastASequencePositionParser.ParseFromFile">
            <summary>
            Parses sequences from the file.
            </summary>
        </member>
        <member name="M:Bio.Util.FastASequencePositionParser.GetNextSequenceStartPosition(System.IO.Stream)">
            <summary>
            Gets the next sequence start position in the file.
            </summary>
            <param name="stream">FastA file stream.</param>
            <returns>Position of the next sequence in the stream.</returns>
        </member>
        <member name="P:Bio.Util.FastASequencePositionParser.SequencesCached">
            <summary>
            Gets a value indicating whether the sequences are cached or not.
            </summary>
        </member>
        <member name="P:Bio.Util.FastASequencePositionParser.Stream">
            <summary>
            Stream for this parser.
            </summary>
        </member>
        <member name="P:Bio.Util.FastASequencePositionParser.Alphabet">
            <summary>
            Gets or sets the alphabet to use for parsed ISequence objects.  If this is not set, the alphabet will
            be determined based on the file being parsed.
            </summary>
        </member>
        <member name="T:Bio.Util.FastASequencePositionParser.SequenceCache">
            <summary>
            Class to hold sequences.
            </summary>
        </member>
        <member name="M:Bio.Util.FastASequencePositionParser.SequenceCache.Add(System.Int64,Bio.ISequence)">
            <summary>
            Adds the specified sequence with position.
            </summary>
            <param name="position">Position of the sequence in file.</param>
            <param name="sequence">Sequence to cache.</param>
        </member>
        <member name="M:Bio.Util.FastASequencePositionParser.SequenceCache.GetSequenceAt(System.Int64)">
            <summary>
            Gets the sequence for the specified position.
            </summary>
            <param name="position">Position.</param>
        </member>
        <member name="M:Bio.Util.FastASequencePositionParser.SequenceCache.GetAllSequences">
            <summary>
            Gets all sequences present in this instance.
            </summary>
        </member>
        <member name="P:Bio.Util.FastASequencePositionParser.SequenceCache.Count">
            <summary>
            Gets total sequences present in this instance.
            </summary>
        </member>
        <member name="T:Bio.Util.FastASequencePositionParser.SequenceCache.SequenceHolder">
            <summary>
            Class to hold sequence along with its position.
            </summary>
        </member>
        <member name="P:Bio.Util.FastASequencePositionParser.SequenceCache.SequenceHolder.Position">
            <summary>
            Position of the sequence in file.
            </summary>
        </member>
        <member name="P:Bio.Util.FastASequencePositionParser.SequenceCache.SequenceHolder.Next">
            <summary>
            Reference to next SequenceHolder
            </summary>
        </member>
        <member name="P:Bio.Util.FastASequencePositionParser.SequenceCache.SequenceHolder.Sequence">
            <summary>
            Sequence.
            </summary>
        </member>
        <member name="T:Bio.IO.FastQ.FastQFormatter">
            <summary>
            Writes a QualitativeSequence to a file. The output is formatted
            according to the FastQ file format.
            </summary>
        </member>
        <member name="M:Bio.IO.FastQ.FastQFormatter.#ctor">
            <summary>
            Initializes a new instance of the FastQFormatter class.
            </summary>
        </member>
        <member name="M:Bio.IO.FastQ.FastQFormatter.Bio#IO#IFormatter{Bio#ISequence}#Format(System.IO.Stream,Bio.ISequence)">
            <summary>
            Writes the specified QualitativeSequence in FastQ format to the file.
            </summary>
            <param name="stream">Stream</param>
            <param name="data">QualitativeSequence to write.</param>
        </member>
        <member name="M:Bio.IO.FastQ.FastQFormatter.Format(System.IO.Stream,System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Writes a set of entries.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="sequences">The data to write.</param>
        </member>
        <member name="M:Bio.IO.FastQ.FastQFormatter.Format(System.IO.Stream,Bio.IQualitativeSequence)">
            <summary>
            Writes the specified QualitativeSequence in FastQ format to the file.
            </summary>
            <param name="stream">Stream to write to</param>
            <param name="qualitativeSequence">QualitativeSequence to write.</param>
        </member>
        <member name="M:Bio.IO.FastQ.FastQFormatter.Format(System.IO.StreamWriter,Bio.IQualitativeSequence)">
            <summary>
            Write out a sequence to the given stream writer.
            </summary>
            <param name="writer"></param>
            <param name="qualitativeSequence"></param>
        </member>
        <member name="P:Bio.IO.FastQ.FastQFormatter.Name">
            <summary>
            Gets the name of this formatter.
            This is intended to give developers name of the formatter.
            </summary>
        </member>
        <member name="P:Bio.IO.FastQ.FastQFormatter.Description">
            <summary>
            Gets the description of this formatter.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what this
             class achieves.
            </summary>
        </member>
        <member name="P:Bio.IO.FastQ.FastQFormatter.SupportedFileTypes">
            <summary>
            Gets the file extension supported by this formatter.
            </summary>
        </member>
        <member name="P:Bio.IO.FastQ.FastQFormatter.FormatType">
            <summary>
            Gets or sets the format type to be used.
            The FastQFormatType to be used for formatting QualitativeSequence objects.
            Default value is Illumina_v1_8
            </summary>
        </member>
        <member name="P:Bio.IO.FastQ.FastQFormatter.AutoFlush">
            <summary>
            Gets or sets a value indicating whether the FastQFormatter will flush its buffer 
            to the underlying stream after every call to Write method.
            </summary>
        </member>
        <member name="T:Bio.IO.FastQ.FastQParser">
            <summary>
                A FastQParser reads from a source of text that is formatted according to the FASTQ
                file specification and converts the data to in-memory QualitativeSequence objects.
            </summary>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.#ctor">
            <summary>
                Initializes a new instance of the FastQParser class.
            </summary>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.Parse(System.IO.Stream)">
            <summary>
                Gets the IEnumerable of QualitativeSequences from the steam being parsed.
            </summary>
            <param name="stream">Stream to be parsed.</param>
            <returns>Returns the QualitativeSequences.</returns>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.ParseOne(System.IO.Stream)">
            <summary>
                Returns a single QualitativeSequence from the FASTQ data.
            </summary>
            <param name="stream">Reader to be parsed.</param>
            <returns>Returns a QualitativeSequence.</returns>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.ParseOne(System.IO.Stream,Bio.FastQFormatType)">
            <summary>
                Returns a single QualitativeSequence from the FASTQ data.
            </summary>
            <param name="stream">Reader to be parsed.</param>
            <param name="formatType">FASTQ format type.</param>
            <returns>Returns a QualitativeSequence.</returns>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.ParseOne(System.IO.StreamReader,Bio.FastQFormatType)">
            <summary>
                Returns a single QualitativeSequence from the FASTQ data.
            </summary>
            <param name="reader">Reader to be parsed.</param>
            <param name="formatType">FASTQ format type.</param>
            <returns>Returns a QualitativeSequence.</returns>
        </member>
        <member name="M:Bio.IO.FastQ.FastQParser.ReadNextLine(System.IO.TextReader,System.Boolean)">
            <summary>
                Gets the next available line from the specified stream reader.
            </summary>
            <param name="reader">Stream reader.</param>
            <param name="skipBlankLine">
                Flag to skip blank lines. If true this method returns
                first non blank line available from the current position, else returns next available line.
            </param>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.FastQ.FastQParser.FormatType">
            <summary>
                Gets or sets the format type to be used.
                The FastQFormatType to be used for parsed QualitativeSequence objects.
                Default value is Illumina_v1_8
            </summary>
        </member>
        <member name="P:Bio.IO.FastQ.FastQParser.Name">
            <summary>
                Gets the type of parser.
                This is intended to give developers name of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.FastQ.FastQParser.Description">
            <summary>
                Gets the description of the parser.
                This is intended to give developers some information
                of the parser class. This property returns a simple description of what this
                class achieves.
            </summary>
        </member>
        <member name="P:Bio.IO.FastQ.FastQParser.SupportedFileTypes">
            <summary>
                Gets a comma separated values of the possible FastQ
                file extensions.
            </summary>
        </member>
        <member name="P:Bio.IO.FastQ.FastQParser.Alphabet">
            <summary>
                Gets or sets the alphabet to use for parsed ISequence objects.  If this is not set, the alphabet will
                be determined based on the file being parsed.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Attenuator">
            <summary>
            Region of DNA at which regulation of termination of transcription occurs, 
            which controls the expression of some bacterial operons.
            Sequence segment located between the promoter and the first structural gene that 
            causes partial termination of transcription.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.FeatureItem">
            <summary>
            Feature of sequence present in the metadata can be stored in this class.
            All qualifiers of the feature will be stored as sub items.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.#ctor(System.String,Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new feature item with given key and location.
            </summary>
            <param name="key">The feature key.</param>
            <param name="location">An instance of ILocation.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.#ctor(System.String,System.String)">
            <summary>
            Creates feature item with given key and location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="key">The feature key.</param>
            <param name="location">Location string.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.#ctor(Bio.IO.GenBank.FeatureItem)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">FeatureItem instance to clone.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.GetSubFeatures(Bio.IO.GenBank.SequenceFeatures)">
            <summary>
            Gets the sub features depending on the location information.
            </summary>
            <param name="sequenceFeatures">SequenceFeatures instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.GetSubSequence(Bio.ISequence)">
            <summary>
            Returns a new sequence from the specified sequence which contains bases of this feature as specified by 
            the location property of this feature.
            </summary>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.GetSubSequence(Bio.ISequence,System.Collections.Generic.Dictionary{System.String,Bio.ISequence})">
            <summary>
            Returns a sequence which contains bases from the specified sequences as specified by this feature location.
            If the location contains accession then the sequence from the referredSequences which matches the 
            accession of the location will be considered.
            
            For example, 
            If a location is "join(100..200, J00089.1:10..50, J00090.2:30..40)"
            bases from 100 to 200 will be taken from the parent sequence and referredSequences will
            be searched for the J00089.1 and J00090.2 accession if found then those sequences will be considered 
            for constructing the output sequence.
            If the referred sequence is not found in the referredSequences then an exception will occur.
            </summary>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
            <param name="referredSequences">A dictionary containing Accession numbers as keys and Sequences as values, this will be used when
            the location or sub-locations contains accession.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.GetQualifier(System.String)">
            <summary>
            Returns list of qualifier values for the specified qualifier name.
            </summary>
            <param name="qualifierName">Qualifier name.</param>
            <returns>List of strings.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.GetSingleTextQualifier(System.String)">
            <summary>
            Returns qualifier value for the specified qualifier name.
            Note: This method should be used to get the text value of a 
            qualifier which appears only once in a feature.
            </summary>
            <param name="qualifierName">Qualifier name.</param>
            <returns>Qualifier value.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.SetSingleTextQualifier(System.String,System.String)">
            <summary>
            Sets the value for the specified qualifier name.
            Note: This method should be used to set the text value of a 
            qualifier which appears only once in a feature.
            </summary>
            <param name="qualifierName">Qualifier name.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.GetSingleBooleanQualifier(System.String)">
            <summary>
            Returns bool value indicating whether the specified qualifier is there in the feature or not.
            </summary>
            <param name="qualifierName">Qualifier name.</param>
            <returns>Returns true if the qualifier is found in the feature, otherwise false.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.SetSingleBooleanQualifier(System.String,System.Boolean)">
            <summary>
            Sets the value for the specified qualifier name.
            Note: This method should be used to add a qualifier which 
            appears only once in a feature and whose value is none.
            </summary>
            <param name="qualifierName">Qualifier name.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FeatureItem.Clone">
            <summary>
            Creates a new FeatureItem that is a copy of the current FeatureItem.
            </summary>
            <returns>A new FeatureItem that is a copy of this FeatureItem.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.FeatureItem.Label">
            <summary>
            A label used to permanently tag a feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FeatureItem.Key">
            <summary>
            Gets the key for this item.  These are not necessarily unique within a list,
            which is why this is a property of an object to be included in a list, rather than
            omitting this as a property and using a dictionary instead of a list.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FeatureItem.Location">
            <summary>
            Gets the location of this feature in the sequence.
            This may also refers to other genbank files.
            For example, 
            join(100..200,J00194.1:1..150)
            In this example location specifies joining of bases from 100 to 200 from the sequence
            in which this location data present and bases from 1 to 150 from the sequence who's 
            accession number is J00194.1.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FeatureItem.Qualifiers">
            <summary>
            Gets the dictionary of attributes.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Attenuator.#ctor(System.String)">
            <summary>
            Creates new Attenuator feature item from the specified location.
            </summary>
            <param name="location">Location of the Attenuator.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Attenuator.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Attenuator feature item from the specified location.
            </summary>
            <param name="location">Location of the Attenuator.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Attenuator.#ctor(Bio.IO.GenBank.Attenuator)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Attenuator instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Attenuator.Clone">
            <summary>
            Creates a new Attenuator that is a copy of the current Attenuator.
            </summary>
            <returns>A new Attenuator that is a copy of this Attenuator.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Attenuator.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioral 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.CaatSignal">
            <summary>
            CAAT box; part of a conserved sequence located about 75 bp up-stream of the start point
            of eukaryotic transcription units which may be involved in RNA polymerase binding.
            Consensus=GG(C or T)CAATCT.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.CaatSignal.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new CAATSignal feature item from the specified location.
            </summary>
            <param name="location">Location of the CAATSignal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.CaatSignal.#ctor(System.String)">
            <summary>
            Creates new CAATSignal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the CAATSignal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.CaatSignal.#ctor(Bio.IO.GenBank.CaatSignal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other CAATSignal instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.CaatSignal.Clone">
            <summary>
            Creates a new CAATSignal that is a copy of the current CAATSignal.
            </summary>
            <returns>A new CAATSignal that is a copy of this CAATSignal.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CaatSignal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.CitationReference">
            <summary>
             Citations for all articles containing data reported in this sequence.
             
            Citations in PubMed that do not fall within Medline's scope will have only
            a PUBMED identifier. Similarly, citations that *are* in Medline's scope but
            which have not yet been assigned Medline UIs will have only a PUBMED identifier.
            If a citation is present in both the PubMed and Medline databases, both a
            MEDLINE and a PUBMED line will be present.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.CitationReference.Clone">
            <summary>
            Creates a new CitationReference that is a copy of the current CitationReference.
            </summary>
            <returns>A new CitationReference that is a copy of this CitationReference.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.Number">
            <summary>
            Reference number.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.Location">
            <summary>
            The range of bases in the sequence entry reported in this citation.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.Authors">
            <summary>
            Lists the authors in the order in which they appear in the cited article
            Last names are separated from initials by a comma (no space); there is no comma 
            before the final `and'. The list of authors ends with a period. 
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.Consortiums">
            <summary>
            Lists the collective names of consortiums associated with the citation 
            (eg, International Human Genome Sequencing Consortium), rather than individual author names. 
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.Title">
            <summary>
            Full title of citation. 
            Present in all but unpublished citations.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.Journal">
            <summary>
            Lists the journal name, volume, year, and page numbers of the citation
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.Medline">
            <summary>
            The National Library of Medicine's Medline unique identifier for a citation (if known).
            Medline UIs are 8 digit numbers.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.PubMed">
            <summary>
            The PubMed unique identifier for a citation (if known). 
            PUBMED ids are numeric, and are record identifiers for article abstracts in the PubMed database.
            
            http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=PubMed
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CitationReference.Remarks">
            <summary>
            The REMARK line is a textual comment that specifies the relevance
            of the citation to the entry.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.CodingSequence">
            <summary>
            Coding sequence (CDS); sequence of nucleotides that corresponds with the sequence of amino acids 
            in a protein (location includes stop codon); feature includes amino acid conceptual translation.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.CodingSequence.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new CodingSequence feature item from the specified location.
            </summary>
            <param name="location">Location of the CodingSequence.</param>
        </member>
        <member name="M:Bio.IO.GenBank.CodingSequence.#ctor(System.String)">
            <summary>
            Creates new CodingSequence feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the CodingSequence.</param>
        </member>
        <member name="M:Bio.IO.GenBank.CodingSequence.#ctor(Bio.IO.GenBank.CodingSequence)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other CodingSequence instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.CodingSequence.GetTranslation">
            <summary>
            Returns protein sequence from the translation.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.CodingSequence.Clone">
            <summary>
            Creates a new CodingSequence that is a copy of the current CodingSequence.
            </summary>
            <returns>A new CodingSequence that is a copy of this CodingSequence.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Codon">
            <summary>
            Specifies a codon which is different from any found in the reference genetic code.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.CodonStart">
            <summary>
            Indicates the offset at which the first complete codon of a coding feature can be found, 
            relative to the first base of that feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.EnzymeCommissionNumber">
            <summary>
            Enzyme Commission number for enzyme product of sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Exception">
            <summary>
            Indicates that the coding region cannot be translated using standard biological rules.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Number">
            <summary>
            A number to indicate the order of genetic elements (e.g., exons or introns) in the 5' to 3' direction.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.ProteinId">
            <summary>
            Protein identifier, issued by International collaborators. this qualifier consists of a stable ID 
            portion (3+5 format with 3 position letters and 5 numbers) plus a version number after the decimal point.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.RibosomalSlippage">
            <summary>
            During protein translation, certain sequences can program ribosomes to change to an alternative 
            reading frame by a mechanism known as ribosomal slippage.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.Translation">
            <summary>
            Automatically generated one-letter abbreviated amino acid sequence derived from either 
            the universal genetic code or the table as specified in Transl_table qualifier and as 
            determined by exceptions in the Transl_except and Codon qualifiers.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.TranslationalExcept">
            <summary>
            Translational exception: single codon the translation of which does not conform 
            to genetic code defined by Organism and Codon qualifier.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.TranslationTable">
            <summary>
            Definition of genetic code table used if other than universal genetic code table.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CodingSequence.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.CrossReferenceLink">
            <summary>
            CrossReferenceLink provides cross-references to resources that support the existence 
            a sequence record, such as the Project Database and the NCBI 
            Trace Assembly Archive.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.CrossReferenceLink.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.CrossReferenceLink.#ctor(Bio.IO.GenBank.CrossReferenceLink)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">CrossReferenceLink instance to clone.</param>
        </member>
        <member name="M:Bio.IO.GenBank.CrossReferenceLink.Clone">
            <summary>
            Creates a new CrossReferenceLink that is a copy of the current CrossReferenceLink.
            </summary>
            <returns>A new CrossReferenceLink that is a copy of this CrossReferenceLink.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.CrossReferenceLink.Type">
            <summary>
            A CrossReferenceType specifies whether the DBLink is 
            referring to project or a Trace Assembly Archive.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.CrossReferenceLink.Numbers">
            <summary>
            Project numbers.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.CrossReferenceType">
            <summary>
            A CrossReferenceType specifies whether the DBLink is 
            referring to project or a Trace Assembly Archive.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.CrossReferenceType.None">
            <summary>
            None - CrossReferenceType is unspecified.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.CrossReferenceType.Project">
            <summary>
            Project.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.CrossReferenceType.TraceAssemblyArchive">
            <summary>
            Trace Assembly Archive. 
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.CrossReferenceType.BioProject">
            <summary>
            BioProject Type.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.DisplacementLoop">
            <summary>
            Displacement Loop (D-Loop): A region within mitochondrial DNA in which a short stretch of RNA is paired with one strand
            of DNA, displacing the original partner DNA strand in this region; also used to describe the
            displacement of a region of one strand of duplex DNA by a single stranded invader in the 
            reaction catalyzed by RecA protein.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.DisplacementLoop.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new DisplacementLoop feature item from the specified location.
            </summary>
            <param name="location">Location of the DisplacementLoop.</param>
        </member>
        <member name="M:Bio.IO.GenBank.DisplacementLoop.#ctor(System.String)">
            <summary>
            Creates new DisplacementLoop feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the DisplacementLoop.</param>
        </member>
        <member name="M:Bio.IO.GenBank.DisplacementLoop.#ctor(Bio.IO.GenBank.DisplacementLoop)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other DisplacementLoop instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.DisplacementLoop.Clone">
            <summary>
            Creates a new DisplacementLoop that is a copy of the current DisplacementLoop.
            </summary>
            <returns>A new DisplacementLoop that is a copy of this DisplacementLoop.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.DisplacementLoop.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Enhancer">
            <summary>
            A cis-acting sequence that increases the utilization of (some) eukaryotic promoters,
            and can function in either orientation and in any location (upstream or downstream) 
            relative to the promoter.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Enhancer.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Enhancer feature item from the specified location.
            </summary>
            <param name="location">Location of the Enhancer.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Enhancer.#ctor(System.String)">
            <summary>
            Creates new Enhancer feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Enhancer.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Enhancer.#ctor(Bio.IO.GenBank.Enhancer)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Enhancer instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Enhancer.Clone">
            <summary>
            Creates a new Enhancer that is a copy of the current Enhancer.
            </summary>
            <returns>A new Enhancer that is a copy of this Enhancer.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.BoundMoiety">
            <summary>
            Name of the molecule/complex that may bind to the given feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Enhancer.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Exon">
            <summary>
            Exon is a region of genome that codes for portion of spliced mRNA, rRNA and tRNA; may contain 5'UTR,
            all CDSs and 3' UTR.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Exon.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Exon feature item from the specified location.
            </summary>
            <param name="location">Location of the Exon.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Exon.#ctor(System.String)">
            <summary>
            Creates new Exon feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Exon.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Exon.#ctor(Bio.IO.GenBank.Exon)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Exon instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Exon.Clone">
            <summary>
            Creates a new Exon that is a copy of the current Exon.
            </summary>
            <returns>A new Exon that is a copy of this Exon.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.EnzymeCommissionNumber">
            <summary>
            Enzyme Commission number for enzyme product of sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Number">
            <summary>
            A number to indicate the order of genetic elements (e.g., exons or introns) in the 5' to 3' direction.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Exon.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.FivePrimeUtr">
            <summary>
            Region at the 5' end of a mature transcript (preceding the initiation codon) that is not translated into a protein.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.FivePrimeUtr.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new FivePrimeUTR feature item from the specified location.
            </summary>
            <param name="location">Location of the FivePrimeUTR.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FivePrimeUtr.#ctor(System.String)">
            <summary>
            Creates new FivePrimeUTR feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the FivePrimeUTR.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FivePrimeUtr.#ctor(Bio.IO.GenBank.FivePrimeUtr)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other FivePrimeUTR instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.FivePrimeUtr.Clone">
            <summary>
            Creates a new FivePrimeUTR that is a copy of the current FivePrimeUTR.
            </summary>
            <returns>A new FivePrimeUTR that is a copy of this FivePrimeUTR.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.FivePrimeUtr.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.GcSingal">
            <summary>
            GC box; a conserved GC-rich region located upstream of the start point of eukaryotic transcription 
            units which may occur in multiple copies or in either orientation.
            Consensus=GGGCGG.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GcSingal.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new GCSingal feature item from the specified location.
            </summary>
            <param name="location">Location of the GCSingal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GcSingal.#ctor(System.String)">
            <summary>
            Creates new GCSingal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the GCSingal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GcSingal.#ctor(Bio.IO.GenBank.GcSingal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other GCSingal instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GcSingal.Clone">
            <summary>
            Creates a new GCSingal that is a copy of the current GCSingal.
            </summary>
            <returns>A new GCSingal that is a copy of this GCSingal.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.GcSingal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GcSingal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GcSingal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GcSingal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GcSingal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GcSingal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GcSingal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GcSingal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GcSingal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GcSingal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GcSingal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.GenBankAccession">
            <summary>
            Accession is identifier assigned to each GenBank sequence record.
            It contains primary accession number and may contain secondary accession numbers.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankAccession.#ctor">
            <summary>
            Default Constructor.
            Creates a new GenBankAccession instance.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankAccession.#ctor(Bio.IO.GenBank.GenBankAccession)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">GenBankAccession instance to clone.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankAccession.Contains(System.String)">
            <summary>
            Validates whether the specified accession number is present in 
            this Accession as primary or secondary accession number.
            </summary>
            <param name="accession">Accession number.</param>
            <returns>If found returns true else returns false.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankAccession.Clone">
            <summary>
            Creates a new GenBankAccession that is a copy of the current GenBankAccession.
            </summary>
            <returns>A new GenBankAccession that is a copy of this GenBankAccession.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankAccession.Primary">
            <summary>
            Primary accession number.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankAccession.Secondary">
            <summary>
            List of secondary accession numbers.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.GenBankFormatter">
            <summary>
            Writes an ISequence to a particular location, usually a file. The output is formatted
            according to the GenBank file format. A method is also provided for quickly accessing
            the content in string form for applications that do not need to first write to file.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankFormatter.Format(System.IO.Stream,Bio.ISequence)">
            <summary>
            Writes an ISequence to the specified stream.
            </summary>
            <param name="stream">Stream to write to</param>
            <param name="data">The sequence to format.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankFormatter.Format(System.IO.Stream,System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Write a collection of ISequences to a stream.
            </summary>
            <remarks>
            This method is overridden to format file-scope metadata that applies to all
            metadata that applies to all of the sequences in the file.
            </remarks>
            <param name="stream">Stream to write to</param>
            <param name="sequences">The sequences to write</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankFormatter.Format(Bio.ISequence,System.IO.TextWriter)">
            <summary>
            Writes an ISequence to a GenBank file in the location specified by the writer.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="txtWriter">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankFormatter.WriteGenBankSection(System.String,System.String,System.String,System.IO.TextWriter)">
            Writes a header and data string as a GenBank header section, indenting the data of
            each line to the length of the given indent string.
        </member>
        <member name="P:Bio.IO.GenBank.GenBankFormatter.LocationBuilder">
            <summary>
            Location builder is used to build location string from the location object present in the feature items.
            By default an instance of LocationBuilder class is used to get the location string.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankFormatter.SupportedFileTypes">
            <summary>
            Gives the supported file types.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankFormatter.Name">
            <summary>
            Gets the type of Formatter i.e GenBank.
            This is intended to give developers some information 
            of the formatter class.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankFormatter.Description">
            <summary>
            Gets the description of GenBank formatter.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            GenBankFormatter class achieves.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.GenBankLocusInfo">
            <summary>
            Locus provides a short mnemonic name for the sequence entry in gen bank 
            database, chosen to suggest the sequence's definition.
            
            It also contains information like Sequence type, Strand type division code etc.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankLocusInfo.Clone">
            <summary>
            Creates a new GenBankLocusInfo that is a copy of the current GenBankLocusInfo.
            </summary>
            <returns>A new GenBankLocusInfo that is a copy of this GenBankLocusInfo.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankLocusInfo.Name">
            <summary>
            Mnemonic name for the sequence entry.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankLocusInfo.SequenceLength">
            <summary>
            Specifies the length of the sequence present.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankLocusInfo.SequenceType">
            <summary>
            Sequence type specifies whether the sequence is a base pair (bp) or an amino acid (aa).
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankLocusInfo.Strand">
            <summary>
            A StrandType specifies whether sequence occurs as a single stranded,
            double stranded or mixed stranded. 
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankLocusInfo.MoleculeType">
            <summary>
            Specifies type of the biological sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankLocusInfo.StrandTopology">
            <summary>
            A StrandTopology specifies whether the strand is linear or circular.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankLocusInfo.DivisionCode">
            <summary>
            A DivisionCode specifies which family a sequence belongs to.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankLocusInfo.Date">
            <summary>
            Contains the date the entry was entered or underwent any substantial revisions,
            such as the addition of newly published data.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.GenBankLocusTokenParser">
            <summary>
            Not all 3rd party programs respect the GenBank locus format.  Due to this we cannot expect each item to lie in exact
            indices with respect to the locus.  In order to parse this information based off of tokens we do have to make certain
            assumptions about the locus data, however this is well documented and for all but the ID field we know what the data type
            will be and what values it may contain.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankLocusTokenParser.Parse(System.String)">
            <summary>
            Parses a locus string into a <see cref="T:Bio.IO.GenBank.GenBankLocusInfo"/>.
            </summary>
            <param name="locusText">Locus text.</param>
            <returns>
            Locus containing the info in the passed in string.
            </returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankLocusTokenParser.GetLocusTokenParsers(Bio.IO.GenBank.GenBankLocusInfo)">
            <summary>
            The LOCUS format has defined positions for each individual value in the LOCUS but through experimentation
            and some reading this format is not followed.  Instead we have to parse each token and interpret which value
            each token belongs too.  Luckily there is a standard set of values for all but the DATE and LOCUS ID, which we can 
            infer based on the string.
            </summary>
            <param name="locus"></param>
            <returns></returns>
        </member>
        <member name="T:Bio.IO.GenBank.GenBankLocusTokenParser.LocusConstants">
            <summary>
            List of text to enumeration mappings to better organize and contain variable information with respect to parsing
            the locus.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.GenBankLocusTokenParser.LocusConstants.SequenceDivisionCodes">
            <summary>
            Maps all sequences division code strings to their respective enumeration.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.GenBankLocusTokenParser.LocusConstants.AlphabetTypes">
            <summary>
            Maps each known molecule type string to its enumeration definition.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.GenBankLocusTokenParser.LocusConstants.MoleculeTopologies">
            <summary>
            Maps each known topology string to its enumeration definition.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.GenBankLocusTokenParser.LocusConstants.SequenceTypes">
            <summary>
            List of sequence types expected.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.GenBankLocusTokenParser.LocusConstants.SequenceStrandTypes">
            <summary>
            Maps each strand string to its enumeration definition.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.GenBankMetadata">
            <summary>
            GenBankMetadata class holds metadata provided 
            by the gen bank flat file format.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankMetadata.#ctor">
            <summary>
            Default Constructor.
            Creates GenBankMetadata instance.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankMetadata.#ctor(Bio.IO.GenBank.GenBankMetadata)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">GenBankMetadata instance to clone.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankMetadata.GetFeatures(System.Int32,System.Int32)">
            <summary>
            Returns the features which are partly or completely inside the specified range.
            Note that the startPosition and endPosition are one based position.
            </summary>
            <param name="startPosition">Start position.</param>
            <param name="endPosition">End position</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankMetadata.GetFeatures(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the features which are partly or completely inside the specified range 
            and belongs to specified accession.
            Note that the startPosition and endPosition are one based position.
            </summary>
            <param name="accession">Accession number.</param>
            <param name="startPosition">Start position.</param>
            <param name="endPosition">End position</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankMetadata.GetCitationsReferredInFeature(Bio.IO.GenBank.FeatureItem)">
            <summary>
            Returns list of citation references in this metadata which are referred in the specified feature.
            </summary>
            <param name="item">Feature Item.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankMetadata.GetCitationsReferredInFeatures">
            <summary>
            Returns list of citation references in this metadata which are referred in features.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankMetadata.Clone">
            <summary>
            Creates a new GenBankMetadata that is a copy of the current GenBankMetadata.
            </summary>
            <returns>A new GenBankMetadata that is a copy of this GenBankMetadata.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Locus">
            <summary>
            Gets or sets the locaus information.
            Locus is a short mnemonic name for the entry, chosen to suggest the
            sequence's definition
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Definition">
            <summary>
            Gets or sets the definition.
            Definition is a concise description of the sequence
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Accession">
            <summary>
            Accession is identifier assigned to each GenBank sequence record.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Version">
            <summary>
            A compound identifier consisting of the primary accession number and 
            a numeric version number associated with the current version of the 
            sequence data in the record. This is followed by an integer key 
            (a "GI") assigned to the sequence by NCBI.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Project">
            <summary>
            The identifier of a project (such as a Genome Sequencing Project) 
            to which a GenBank sequence record belongs.
            
            This is obsolete and was removed from the GenBank flat-file format 
            after Release 171.0 in April 2009.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.DbLink">
            <summary>
            DBLink provides cross-references to resources that support the existence 
            a sequence record, such as the Project Database and the NCBI 
            Trace Assembly Archive.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.DbLinks">
            <summary>
            DBLinks provides a list of cross-references to resources that support the existence 
            a sequence record, such as the Project Database and the NCBI 
            Trace Assembly Archive.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.DbSource">
            <summary>
            DBSource provies reference to the GenBank record from which the protein 
            translation was obtained.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Keywords">
            <summary>
            Short phrases describing gene products and other information about the sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Segment">
            <summary>
            Segment provides the information on the order in which this entry appears in a
            series of discontinuous sequences from the same molecule.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Source">
            <summary>
            Source provides the common name of the organism or the name most frequently used
            in the literature along with the taxonomic classification levels 
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.References">
            <summary>
            Citations for all articles containing data reported in this entry.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Comments">
            <summary>
            Cross-references to other sequence entries, comparisons to
            other collections, notes of changes in LOCUS names, and other remarks.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Primary">
            <summary>
            Provides the reference to the primary GenBank files from which annotations 
            in this file are derived.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Features">
            <summary>
            Containing information on portions of the sequence that code for 
            proteins and RNA molecules and information on experimentally determined 
            sites of biological significance.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.BaseCount">
            <summary>
            Summary of the number of occurrences of each base pair code 
            (a, c, t, g, and other) in the sequence.
            
            This is obsolete and was removed from the GenBank flat-file 
            format in October 2003.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Origin">
            <summary>
            Specification of how the first base of the reported sequence is 
            operationally located within the genome. Where possible, this 
            includes its location within a larger genetic map.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankMetadata.Contig">
            <summary>
            provides information about how individual sequence records can be 
            combined to form larger-scale biological objects, such as chromosomes 
            or complete genomes. Rather than presenting actual sequence data, a 
            special join() statement provides the accession numbers and base pair 
            ranges of the underlying records which comprise the object.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.GenBankParser">
            <summary>
            A GenBankParser reads from a source of text that is formatted according to the GenBank flat
            file specification, and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered.
            Documentation for the latest GenBank file format can be found at
            ftp.ncbi.nih.gov/genbank/gbrel.txt
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.#ctor">
            <summary>
            Default constructor chooses default encoding based on alphabet.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.Parse(System.IO.Stream)">
            <summary>
            Parses a single GenBank text from a reader into a sequence.
            </summary>
            <returns>A new Sequence instance containing parsed data.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.ParseOne(System.IO.Stream)">
            <summary>
            Parse a single entity from the given stream.
            </summary>
            <param name="stream">The stream to pull data from</param>
            <returns>Parse entity object</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.GetAlphabet(Bio.IO.GenBank.MoleculeType)">
            <summary>
            Returns the alphabet depending on the specified molecule type.
            </summary>
            <param name="moleculeType">Molecule type.</param>
            <returns>IAlphabet instance.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.GoToNextLine(System.String,System.IO.StreamReader)">
            <summary>
            Reads the next line of text, storing it in the Line property.  If SkipBlankLines is
            true, any lines containing only white space are skipped.
            </summary>
            <param name="line">The current line.</param>
            <param name="streamReader">The stream reader.</param>
            <returns>The next line.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.AddQualifierToFeature(Bio.IO.GenBank.FeatureItem,System.String,System.String)">
            <summary>
            Adds a qualifier to the feature object. The sub-items of a feature are referred to as qualifiers.  These do not have unique
            keys, so they are stored as lists in the SubItems dictionary.
            </summary>
            <param name="feature">The feature to which qualifier is to be added.</param>
            <param name="qualifierKey">The qualifier key to be added to the feature.</param>
            <param name="qualifierValue">The qualifier value.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.ParseHeaders(Bio.Sequence@,System.Int32,System.String,System.IO.StreamReader)">
            <summary>
            Parses the GenBank headers from the GenBank file.
            parses everything before the features section
            </summary>
            <param name="sequence">The sequence.</param>
            <param name="noOfSequence">The current sequence index.</param>
            <param name="line">parse line</param>
            <param name="stream">The stream reader.</param>
            <returns>The parsed line.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.ParseLocusByTokens(System.String,Bio.Sequence@,System.IO.StreamReader)">
            <summary>
            Parses the GenBank LOCUS using a token based approach which provides more flexibility for 
            GenBank documents that do not follow the standard 100%.
            </summary>
            <param name="line">parse line</param>
            <param name="sequence">The sequence.</param>
            <param name="stream">The stream reader.</param>
            <returns>The parsed line.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.ParseReferences(System.String,Bio.Sequence@,System.IO.StreamReader)">
            <summary>
            Parses the GenBank Reference information from the GenBank file.
            </summary>
            <param name="line">parse line</param>
            <param name="sequence">The sequence.</param>
            <param name="stream">The stream reader.</param>
            <returns>The parsed line.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.ParseComments(System.String,Bio.Sequence@,System.IO.StreamReader)">
            <summary>
            Parses the GenBank Comments from the GenBank file.
            </summary>
            <param name="line">parse line</param>
            <param name="sequence">The sequence.</param>
            <param name="stream">The stream reader.</param>
            <returns>The parsed line.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.ParseSource(System.String,Bio.Sequence@,System.IO.StreamReader)">
            <summary>
            Parses the GenBank source data from the GenBank file.
            </summary>
            <param name="line">parse line</param>
            <param name="sequence">The sequence.</param>
            <param name="stream">The stream reader.</param>
            <returns>The parsed line.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.ParseFeatures(System.String,Bio.Sequence@,System.IO.StreamReader)">
            <summary>
            Parses the GenBank features from the GenBank file.
            </summary>
            <param name="line">parse line</param>
            <param name="sequence">The sequence.</param>
            <param name="stream">The stream reader.</param>
            <returns>The parsed line.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.ParseSequence(System.String@,Bio.Sequence@,System.IO.StreamReader)">
            <summary>
            Parses the GenBank Sequence from the GenBank file. 
            Handle optional BASE COUNT, then ORIGIN and sequence data.
            </summary>
            <param name="line">parse line</param>
            <param name="sequence">The sequence.</param>
            <param name="stream">The stream reader.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.ParseOrigin(System.String@,Bio.IO.GenBank.GenBankMetadata,System.IO.StreamReader)">
            <summary>
            Parses the GenBank Origin data from the GenBank file. 
            </summary>
            <param name="line">parse line</param>
            <param name="metadata">The GenBank metadata.</param>
            <param name="stream">The stream reader.</param>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.ParseMultiLineData(System.String@,System.String,System.Int32,System.IO.StreamReader)">
            <summary>
            Parses the GenBank Origin data from the GenBank file. 
            returns a string of the data for a header block that spans multiple lines
            </summary>
            <param name="line">parse line</param>
            <param name="lineBreakSubstitution">The line break string to be substituted.</param>
            <param name="dataIndent">The data indent for the line.</param>
            <param name="stream">The stream reader.</param>
            <returns>The parsed line.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.CopyMetadata(Bio.ISequence)">
            <summary>
            Copy file-scope metadata to all the sequences in the list.
            </summary>
            Flag to indicate whether the resulting sequences should be in read-only mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            <param name="sequences">The sequence.</param>
            <returns>The metadata sequence.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.GetLineHeader(System.String,System.Int32)">
            <summary>
            Gets the Line Header. 
            </summary>
            <param name="line">The Line to be processed.</param>
            <param name="dataIndent">The Indent for Header Calculation.</param>
            <returns>Returns the header.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankParser.GetLineData(System.String,System.Int32)">
            <summary>
            Gets the line Data.
            </summary>
            <param name="line">The Line to be processed.</param>
            <param name="dataIndent">The Indent for line Data Calculation.</param>
            <returns>Returns the line Data(excluding the line header).</returns>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankParser.Alphabet">
            <summary>
            The alphabet to use for parsed ISequence objects.  If this is not set, an alphabet will
            be determined based on the file being parsed.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankParser.LocationBuilder">
            <summary>
            Location builder is used to build location objects from the location string 
            present in the features.
            By default an instance of LocationBuilder class is used to build location objects.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankParser.SupportedFileTypes">
            <summary>
            Supported file types.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankParser.Name">
            <summary>
            Gets the type of Parser i.e GenBank.
            This is intended to give developers some information 
            of the parser class.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankParser.Description">
            <summary>
            Gets the description of GenBank parser.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            GenBankParser class achieves.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.GenBankVersion">
            <summary>
            A compound identifier consisting of the primary accession number and 
            a numeric version number associated with the current version of the 
            sequence data in the record. This is followed by an integer key 
            (a "GI") assigned to the sequence by NCBI.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.GenBankVersion.Clone">
            <summary>
            Creates a new GenBankVersion that is a copy of the current GenBankVersion.
            </summary>
            <returns>A new GenBankVersion that is a copy of this GenBankVersion.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankVersion.Accession">
            <summary>
            Primary accession number.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankVersion.Version">
            <summary>
            Version number.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankVersion.CompoundAccession">
            <summary>
            Gets the CompoundAccession that is Accession.Version.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.GenBankVersion.GiNumber">
            <summary>
            GI number.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Gene">
            <summary>
            The gene feature describes the interval of DNA that corresponds to a genetic trait or phenotype. 
            It is a region of biological interest identified as a gene and for which a name has been assigned.
            This class is meant to represent a region where the gene is located.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Gene.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Gene feature item from the specified location.
            </summary>
            <param name="location">Location of the Gene.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Gene.#ctor(System.String)">
            <summary>
            Creates new Gene feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Gene.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Gene.#ctor(Bio.IO.GenBank.Gene)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Gene instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Gene.Clone">
            <summary>
            Creates a new Gene that is a copy of the current Gene.
            </summary>
            <returns>A new Gene that is a copy of this Gene.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioral 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Gene.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.ILocation">
            <summary>
            Interface to hold location information.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ILocation.IsInStart(System.Int32)">
            <summary>
            Returns true if the specified position is within the start positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocation.IsInEnd(System.Int32)">
            <summary>
            Returns true if the specified position is within the end positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocation.IsInRange(System.Int32)">
            <summary>
            Returns true if the specified position is within the start and end positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocation.GetSubSequence(Bio.ISequence)">
            <summary>
            Returns a sequence which contains bases from the specified sequences as specified by this location.
            </summary>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocation.GetSubSequence(Bio.ISequence,System.Collections.Generic.Dictionary{System.String,Bio.ISequence})">
            <summary>
            Returns a sequence which contains bases from the specified sequences as specified by this location.
            If the location contains accession then the sequence from the referredSequences which matches the 
            accession of the location will be considered.
            
            For example, 
            If a location is "join(100..200, J00089.1:10..50, J00090.2:30..40)"
            bases from 100 to 200 will be taken from the sequence parameter and referredSequences will
            be searched for the J00089.1 and J00090.2 accession if found then those sequences will be considered 
            for constructing the output sequence.
            If the referred sequence is not found in the referredSequences then an exception will occur.
            </summary>
            <param name="sequence">Sequence instance from which the sub sequence has to be returned.</param>
            <param name="referredSequences">A dictionary containing Accession numbers as keys and Sequences as values, this will be used when
            the location or sub-locations contains accession.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocation.GetLeafLocations">
            <summary>
            Returns the leaf locations.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ILocation.Clone">
            <summary>
            Creates a new ILocation that is a copy of the current ILocation.
            </summary>
            <returns>A new ILocation that is a copy of this ILocation.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.ILocation.LocationStart">
            <summary>
            Start position of the location.
            Note that this is one based position.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ILocation.LocationEnd">
            <summary>
            End position of the location.
            Note that this is one based position.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ILocation.StartData">
            <summary>
            Start position data.
            All positions are one based.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ILocation.EndData">
            <summary>
            End position data.
            All positions are one based.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ILocation.Separator">
            <summary>
            Start and end positions separator.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ILocation.Operator">
            <summary>
            Operator like none, complement, join and order.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ILocation.SubLocations">
            <summary>
            Sub locations.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ILocation.Accession">
            <summary>
            Accession number of referred sequence.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.ILocationBuilder">
            <summary>
            Interface to build the location from location string and from location object to location string.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationBuilder.GetLocation(System.String)">
            <summary>
            Returns the location object for the specified location string.
            </summary>
            <param name="location">Location string.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationBuilder.GetLocationString(Bio.IO.GenBank.ILocation)">
            <summary>
            Returns the location string for the specified location.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="T:Bio.IO.GenBank.ILocationResolver">
            <summary>
            Interface to resolve the start and end positions of a location.
            Classes which implements this interface should resolve any ambiguity in 
            the start and end positions of a location.
            Please refer LocationResolver for default implementation of this interface.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationResolver.GetStart(Bio.IO.GenBank.ILocation)">
            <summary>
            Returns start position of the specified location.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationResolver.GetEnd(Bio.IO.GenBank.ILocation)">
            <summary>
            Returns end position of the specified location.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationResolver.GetSubSequence(Bio.IO.GenBank.ILocation,Bio.ISequence)">
            <summary>
            Returns a sequence which contains bases from the specified sequences as specified by the location.
            If a feature location and the sequence in which the feature is present is 
            specified then the output sequence will contain the bases related to the feature.
            </summary>
            <param name="location">Location instance.</param>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationResolver.GetSubSequence(Bio.IO.GenBank.ILocation,Bio.ISequence,System.Collections.Generic.Dictionary{System.String,Bio.ISequence})">
            <summary>
            Returns a sequence which contains bases from the specified sequences as specified by the location.
            If the location contains accession then the sequence from the referredSequences which matches the 
            accession of the location will be considered.
            
            For example, 
            If a location is "join(100..200, J00089.1:10..50, J00090.2:30..40)"
            bases from 100 to 200 will be taken from the sequence parameter and referredSequences will
            be searched for the J00089.1 and J00090.2 accession if found then those sequences will be considered 
            for constructing the output sequence.
            If the referred sequence is not found in the referredSequences then an exception will occur.
            </summary>
            <param name="location">Location instance.</param>
            <param name="sequence">Sequence instance from which the sub sequence has to be returned.</param>
            <param name="referredSequences">A dictionary containing Accession numbers as keys and Sequences as values, this will be used when
            the location or sub-locations contains accession.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationResolver.IsInStart(Bio.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Return true if the specified position is within the start position.
            For example,
            if the start data of a location is "23.40", this method will 
            return true for the position values ranging from 23 to 40.
            </summary>
            <param name="location">Location instance.</param>
            <param name="position">Position to be verified.</param>
            <returns>Returns true if the specified position is with in the start position else returns false.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationResolver.IsInEnd(Bio.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Return true if the specified position is within the end position.
            For example,
            if the end data of a location is "23.40", this method will 
            return true for the position values ranging from 23 to 40.
            </summary>
            <param name="location">Location instance.</param>
            <param name="position">Position to be verified.</param>
            <returns>Returns true if the specified P\position is with in the end position else returns false.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationResolver.IsInRange(Bio.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Returns true if the specified position is with in the start and end positions.
            </summary>
            <param name="location">Location instance.</param>
            <param name="position">Position to be verified.</param>
            <returns>Returns true if the specified position is with in the start and end positions else returns false.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.ILocationResolver.Clone">
            <summary>
            Creates a new ILocationResolver that is a copy of the current ILocationResolver.
            </summary>
            <returns>A new ILocationResolver that is a copy of this ILocationResolver.</returns>
        </member>
        <member name="T:Bio.IO.GenBank.InterveningDna">
            <summary>
            Intervening DNA (iDNA) is a DNA which is eliminated through any of several kinds of recombination.
            For example, in the somatic processing of immunoglobulin genes.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.InterveningDna.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new InterveningDNA feature item from the specified location.
            </summary>
            <param name="location">Location of the InterveningDNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.InterveningDna.#ctor(System.String)">
            <summary>
            Creates new InterveningDNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the InterveningDNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.InterveningDna.#ctor(Bio.IO.GenBank.InterveningDna)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other InterveningDNA instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.InterveningDna.Clone">
            <summary>
            Creates a new InterveningDNA that is a copy of the current InterveningDNA.
            </summary>
            <returns>A new InterveningDNA that is a copy of this InterveningDNA.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDna.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDna.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDna.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDna.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDna.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDna.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDna.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDna.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDna.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDna.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDna.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDna.Number">
            <summary>
            A number to indicate the order of genetic elements (e.g., exons or introns) in the 5' to 3' direction.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDna.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.InterveningDna.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Intron">
            <summary>
            A segment of DNA that is transcribed, but removed from within the transcript by splicing together the sequences
            (exons) on either side of it.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Intron.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Intron feature item from the specified location.
            </summary>
            <param name="location">Location of the Intron.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Intron.#ctor(System.String)">
            <summary>
            Creates new Intron feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Intron.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Intron.#ctor(Bio.IO.GenBank.Intron)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Intron instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Intron.Clone">
            <summary>
            Creates a new Intron that is a copy of the current Intron.
            </summary>
            <returns>A new Intron that is a copy of this Intron.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.Number">
            <summary>
            A number to indicate the order of genetic elements (e.g., exons or introns) in the 5' to 3' direction.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Intron.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Location">
            <summary>
            Location, holds the feature location information.
            This is the default implementation of the ILocation interface.
            This holds Start and End points of location. 
            If in case location refers to some other sequence (for example, J00194.1:1..150) 
            then the accession number information should be stored in the Accession property.
            Resolver property is used to resolve any ambiguity in the location start-data and end-data. 
            By default this will be set to an instance of LocationResolver class.  
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Location.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Location.Clone">
            <summary>
            Creates a new Location that is a copy of the current Location.
            </summary>
            <returns>A new Location that is a copy of this Location.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.Location.IsInStart(System.Int32)">
            <summary>
            Returns true if the specified position is within the start positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Location.IsInEnd(System.Int32)">
            <summary>
            Returns true if the specified position is within the end positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Location.IsInRange(System.Int32)">
            <summary>
            Returns true if the specified position is within the start and end positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Location.GetSubSequence(Bio.ISequence)">
            <summary>
            Returns a sequence which contains bases from the specified sequences as specified by this location.
            </summary>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Location.GetSubSequence(Bio.ISequence,System.Collections.Generic.Dictionary{System.String,Bio.ISequence})">
            <summary>
            Returns a sequence which contains bases from the specified sequences as specified by this location.
            If the location contains accession then the sequence from the referredSequences which matches the 
            accession of the location will be considered.
            
            For example, 
            If a location is "join(100..200, J00089.1:10..50, J00090.2:30..40)"
            bases from 100 to 200 will be taken from the sequence parameter and referredSequences will
            be searched for the J00089.1 and J00090.2 accession if found then those sequences will be considered 
            for constructing the output sequence.
            If the referred sequence is not found in the referredSequences then an exception will occur.
            </summary>
            <param name="sequence">Sequence instance from which the sub sequence has to be returned.</param>
            <param name="referredSequences">A dictionary containing Accession numbers as keys and Sequences as values, this will be used when
            the location or sublocations contains accession.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Location.GetLeafLocations">
            <summary>
            Gets the leaf locations present in this location.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Location.Bio#IO#GenBank#ILocation#Clone">
            <summary>
            Creates a new Location that is a copy of the current Location.
            </summary>
            <returns>A new ILocation that is a copy of this Location.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.Location.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an 
             indication of their relative values.
            </summary>
            <param name="obj">Loction instance to compare.</param>
            <returns> 
            A signed number indicating the relative values of this instance and value.
            Return Value Description Less than zero This instance is less than value.
            Zero This instance is equal to value. Greater than zero This instance is
            greater than value.  -or- value is null.
            </returns>
        </member>
        <member name="M:Bio.IO.GenBank.Location.GetLeafLocations(System.Collections.Generic.List{Bio.IO.GenBank.ILocation},Bio.IO.GenBank.ILocation)">
            <summary>
            Recursively gets the leaf locations.
            </summary>
            <param name="locations">Locations list.</param>
            <param name="location">location instance.</param>
        </member>
        <member name="P:Bio.IO.GenBank.Location.Resolver">
            <summary>
            Gets or sets the ILocationResolver instance used to resolve 
            ambiguity in start-data and end-data
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Location.LocationStart">
            <summary>
            Gets the start position of the location.
            Note that this is one based position.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Location.LocationEnd">
            <summary>
            Gets the end position of the location.
            Note that this is one based position.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Location.StartData">
            <summary>
            Gets or sets the start position data.
            All positions are one based.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Location.EndData">
            <summary>
            Gets or sets the end position data.
            All positions are one based.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Location.Accession">
            <summary>
            Accession number of referred sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Location.Separator">
            <summary>
            Start and end positions separator.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Location.Operator">
            <summary>
            Operator like none, complement, join and order.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Location.SubLocations">
            <summary>
            Sub locations.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.LocationBuilder">
            <summary>
            This is the default implementation of the ILocationBuilder interface.
            This class builds the location for the specified location string
            and location string for the specified location instance.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.LocationBuilder.GetLocation(System.String)">
            <summary>
            Returns a location for the specified location string.
            </summary>
            <param name="location">Location string.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationBuilder.GetLocationString(Bio.IO.GenBank.ILocation)">
            <summary>
            Returns a location string for the specified location.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationBuilder.BuildLocation(System.String@)">
            <summary>
            Builds location from the specified location string.
            </summary>
            <param name="locationString">Location string.</param>
            <returns>A Location instance.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.LocationBuilder.BuilSubLocation(Bio.IO.GenBank.ILocation,System.String@)">
            <summary>
            Builds the sub-locations from the specified string and places in the specified location.
            </summary>
            <param name="location">Location instance.</param>
            <param name="locationString">Location string.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationBuilder.GetNextIndex(System.String)">
            <summary>
            Returns an integer index which indicates the next ","  or ")" character.
            </summary>
            <param name="location">Location string.</param>
        </member>
        <member name="T:Bio.IO.GenBank.LocationOperator">
            <summary>
            Enum for location operators.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.LocationOperator.None">
            <summary>
            No Operator.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.LocationOperator.Complement">
            <summary>
            Complement Operator.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.LocationOperator.Join">
            <summary>
            Join Operator.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.LocationOperator.Order">
            <summary>
            Order Operator.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.LocationOperator.Bond">
            <summary>
            Bond Operator.
            Found in protein files. 
            These generally are used to describe disulfide bonds.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.LocationRange">
            <summary>
            Holds start and end position of a feature in a sequence.
            For example: 
            If location of a feature is "join(1..100,J00194.1:100..202)"
            then we need to two LocationRange instance to hold this location.
            First LocationRange will be
                  Accession     - empty
                  StartPosition -1
                  EndPosition   - 100
            Second LocationRange will be
                  Accession     - J00194.1
                  StartPoistion - 100
                  EndPosition   1 200
                  
            Note that the GenBank feature location can be parsed using static method "GetLocationRanges" in GenBankMetadata class.
            For example:
             GenBankMetadata.GetLocationRanges("join(1..100,J00194.1:100..202)") this will return list of LocationRanges.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.LocationRange.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.LocationRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new LocationRange instance from the specified start and end position.
            </summary>
            <param name="startPosition">Start position of the feature.</param>
            <param name="endPosition">End position of the feature.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationRange.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new LocationRange instance from the specified accession, start and end position.
            </summary>
            <param name="accession">Accession of the sequence.</param>
            <param name="startPosition">Start position.</param>
            <param name="endPosition">End position.</param>
        </member>
        <member name="P:Bio.IO.GenBank.LocationRange.Accession">
            <summary>
            Gets or sets the Accession.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LocationRange.StartPosition">
            <summary>
            Gets or sets the start position.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LocationRange.EndPosition">
            <summary>
            Gets or sets the end position.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.LocationResolver">
            <summary>
            This is the default implementation of ILocationResolver.
            This class resolves the start and end positions of a location.
            
            Please see the following table for how this class resolves the ambiguities in start and end data.
            
            Start/End Data		Resolved Start		Resolved End
            12.30               12      			30
            &gt;30	            30			        30
            &lt;30 	            30			        30
            23^24		        23	                24
            100^1		        1000    			1	
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.Clone">
            <summary>
            Returns the new LocationResolver instance that is a copy of this instance.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.GetStart(Bio.IO.GenBank.ILocation)">
            <summary>
            Returns the start position by resolving the start-data present in the specified location.
            If unable to resolve start-data then an exception will occur.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.GetEnd(Bio.IO.GenBank.ILocation)">
            <summary>
            Returns the end position by resolving the end-data present in the specified location.
            If unable to resolve end-data then an exception will occur.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.GetSubSequence(Bio.IO.GenBank.ILocation,Bio.ISequence)">
            <summary>
            Returns a sequence which contains bases from the specified sequence as specified by the location.
            If the location of a feature and sequence in which the feature is present is 
            specified then this method returns a sequence which contains the bases of the specified feature.
            
            Please note that,
            1. If Accession of the location is not null or empty then an exception will occur.
            2. If the location contains "order" operator then this method uses SegmentedSequence class to construct the sequence.
               For example, order(100..200,300..450) will result in a SegmentedSequence which internally contains two sequences, 
               first one created from 100 to 200 bases, and second one created from 300 to 450 bases.
            </summary>
            <param name="location">Location instance.</param>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.GetSubSequence(Bio.IO.GenBank.ILocation,Bio.ISequence,System.Collections.Generic.Dictionary{System.String,Bio.ISequence})">
            <summary>
            Returns a sequence which contains bases from the specified sequence as specified by the location.
            If the location contains accession then the sequence from the referredSequences which matches the 
            accession of the location will be considered.
            
            For example,
            if location is "join(100..200, J00089.1:10..50, J00090.2:30..40)"
            then bases from 100 to 200 will be considered from the sequence parameter and referredSequences will
            be searched for the J00089.1 and J00090.2 accession if found then those sequences will be considered 
            for constructing the output sequence.
            If the referred sequence is not found in the referredSequences then an exception will occur.
            </summary>
            <param name="location">Location instance.</param>
            <param name="sequence">Sequence instance from which the sub sequence has to be returned.</param>
            <param name="referredSequences">A dictionary containing Accession numbers as keys and Sequences as values, this will be used when
            the location or sub-locations contains accession.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.IsInStart(Bio.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Return true if the specified position is within the start position.
            For example,
            if the start-data of a location is "23.40", this method will 
            return true for the position values ranging from 23 to 40.
            </summary>
            <param name="location">Location instance.</param>
            <param name="position">Position to be verified.</param>
            <returns>Returns true if the specified position is with in the start position else returns false.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.IsInEnd(Bio.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Return true if the specified position is within the end position.
            For example,
            if the end-data of a location is "23.40", this method will 
            return true for the position values ranging from 23 to 40.
            </summary>
            <param name="location">Location instance.</param>
            <param name="position">Position to be verified.</param>
            <returns>Returns true if the specified P\position is with in the end position else returns false.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.IsInRange(Bio.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Returns true if the specified position is with in the start and end positions.
            </summary>
            <param name="location">Location instance.</param>
            <param name="position">Position to be verified.</param>
            <returns>Returns true if the specified position is with in the start and end positions else returns false.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.Bio#IO#GenBank#ILocationResolver#Clone">
            <summary>
            Creates a new ILocationResolver that is a copy of the current ILocationResolver.
            </summary>
            <returns>A new ILocationResolver that is a copy of this ILocationResolver.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.ResolveStart(System.String)">
            <summary>
            Resolves and returns the start position.
            </summary>
            <param name="str">Start data.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.ResolveEnd(System.String)">
            <summary>
            Resolves and returns the end position.
            </summary>
            <param name="str">End data.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LocationResolver.GetSubSequence(System.Int32,System.Int32,System.String,System.String,Bio.ISequence,System.Collections.Generic.Dictionary{System.String,Bio.ISequence})">
            <summary>
            Returns the sequence for the specified start and end positions.
            If the accession is null or empty then the source sequence is used to construct the output sequence,
            otherwise appropriate sequence from the referred sequence is used to construct output sequence.
            </summary>
            <param name="start">Start position.</param>
            <param name="end">End position.</param>
            <param name="accession">Accession number.</param>
            <param name="sepataror">Start and End separator.</param>
            <param name="source">Source sequence.</param>
            <param name="referredSequences">Referred Sequences.</param>
        </member>
        <member name="T:Bio.IO.GenBank.LongTerminalRepeat">
            <summary>
            Long terminal repeat (LTR), a sequence directly repeated at both ends of a defined sequence,
            of the sort typically found in retroviruses.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.LongTerminalRepeat.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new LongTerminalRepeat feature item from the specified location.
            </summary>
            <param name="location">Location of the LongTerminalRepeat.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LongTerminalRepeat.#ctor(System.String)">
            <summary>
            Creates new LongTerminalRepeat feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the LongTerminalRepeat.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LongTerminalRepeat.#ctor(Bio.IO.GenBank.LongTerminalRepeat)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other LongTerminalRepeat instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.LongTerminalRepeat.Clone">
            <summary>
            Creates a new LongTerminalRepeat that is a copy of the current LongTerminalRepeat.
            </summary>
            <returns>A new LongTerminalRepeat that is a copy of this LongTerminalRepeat.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.LongTerminalRepeat.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MaturePeptide">
            <summary>
            Mature peptide or protein coding sequence; coding sequence for the mature or final peptide or protein product following 
            post-translational modification; the location does not include the stop codon (unlike the corresponding CDS).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MaturePeptide.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MaturePeptide feature item from the specified location.
            </summary>
            <param name="location">Location of the MaturePeptide.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MaturePeptide.#ctor(System.String)">
            <summary>
            Creates new MaturePeptide feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MaturePeptide.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MaturePeptide.#ctor(Bio.IO.GenBank.MaturePeptide)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MaturePeptide instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MaturePeptide.Clone">
            <summary>
            Creates a new MaturePeptide that is a copy of the current MaturePeptide.
            </summary>
            <returns>A new MaturePeptide that is a copy of this MaturePeptide.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.EnzymeCommissionNumber">
            <summary>
            Enzyme Commission number for enzyme product of sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MaturePeptide.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MessengerRna">
            <summary>
             Messenger RNA (mRNA); includes 5 prime un-translated region (5'UTR), coding sequences (CDS, exon)
             and 3 prime un-translated region (3'UTR).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MessengerRna.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MessengerRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the MessengerRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MessengerRna.#ctor(System.String)">
            <summary>
            Creates new MessengerRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MessengerRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MessengerRna.#ctor(Bio.IO.GenBank.MessengerRna)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MessengerRNA instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MessengerRna.Clone">
            <summary>
            Creates a new MessengerRNA that is a copy of the current MessengerRNA.
            </summary>
            <returns>A new MessengerRNA that is a copy of this MessengerRNA.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MessengerRna.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Minus10Signal">
            <summary>
            Pribnow box; a conserved region about 10 bp upstream of the start point of bacterial transcription units
            which may be involved in binding RNA polymerase.
            Consensus=TAtAaT.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Minus10Signal.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Minus10Signal feature item from the specified location.
            </summary>
            <param name="location">Location of the Minus10Signal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Minus10Signal.#ctor(System.String)">
            <summary>
            Creates new Minus10Signal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Minus10Signal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Minus10Signal.#ctor(Bio.IO.GenBank.Minus10Signal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Minus10Signal instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Minus10Signal.Clone">
            <summary>
            Creates a new Minus10Signal that is a copy of the current Minus10Signal.
            </summary>
            <returns>A new Minus10Signal that is a copy of this Minus10Signal.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus10Signal.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Minus35Signal">
            <summary>
            A conserved hexamer about 35 bp upstream of the start point of bacterial transcription units.
            Consensus=TTGACa or TGTTGACA.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Minus35Signal.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Minus35Signal feature item from the specified location.
            </summary>
            <param name="location">Location of the Minus35Signal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Minus35Signal.#ctor(System.String)">
            <summary>
            Creates new Minus35Signal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Minus35Signal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Minus35Signal.#ctor(Bio.IO.GenBank.Minus35Signal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Minus35Signal instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Minus35Signal.Clone">
            <summary>
            Creates a new Minus35Signal that is a copy of the current Minus35Signal.
            </summary>
            <returns>A new Minus35Signal that is a copy of this Minus35Signal.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Minus35Signal.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MiscBinding">
            <summary>
            Site in nucleic acid which covalently or non-covalently binds another moiety that cannot be described
            by any other binding key (primer_bind or protein_bind).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MiscBinding.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscBinding feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscBinding.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscBinding.#ctor(System.String)">
            <summary>
            Creates new MiscBinding feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscBinding.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscBinding.#ctor(Bio.IO.GenBank.MiscBinding)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscBinding instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscBinding.Clone">
            <summary>
            Creates a new MiscBinding that is a copy of the current MiscBinding.
            </summary>
            <returns>A new MiscBinding that is a copy of this MiscBinding.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.BoundMoiety">
            <summary>
            Name of the molecule/complex that may bind to the given feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscBinding.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MiscDifference">
            <summary>
            Feature sequence is different from that presented in the entry and cannot be described by any 
            other Difference key (conflict, unsure, old_sequence, variation, or modified_base).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MiscDifference.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscDifference feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscDifference.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscDifference.#ctor(System.String)">
            <summary>
            Creates new MiscDifference feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscDifference.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscDifference.#ctor(Bio.IO.GenBank.MiscDifference)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscDifference instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscDifference.Clone">
            <summary>
            Creates a new MiscDifference that is a copy of the current MiscDifference.
            </summary>
            <returns>A new MiscDifference that is a copy of this MiscDifference.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.ClonedFrom">
            <summary>
            Clone from which the sequence was obtained.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.Compare">
            <summary>
            Reference details of an existing public INSD entry to which a comparison is made.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioral 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.Replace">
            <summary>
            Indicates that the sequence identified a feature's intervals is replaced by the sequence shown in ""text"";
            if no sequence is contained within the qualifier, this indicates a deletion.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscDifference.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MiscFeature">
            <summary>
            Region of biological interest which cannot be described by any other feature key; a new or rare feature.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MiscFeature.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscFeature feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscFeature.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscFeature.#ctor(System.String)">
            <summary>
            Creates new MiscFeature feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscFeature.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscFeature.#ctor(Bio.IO.GenBank.MiscFeature)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscFeature instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscFeature.Clone">
            <summary>
            Creates a new MiscFeature that is a copy of the current MiscFeature.
            </summary>
            <returns>A new MiscFeature that is a copy of this MiscFeature.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Number">
            <summary>
            A number to indicate the order of genetic elements (e.g., exons or introns) in the 5' to 3' direction.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioral 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscFeature.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MiscRecombination">
            <summary>
            Site of any generalized, site-specific or replicative recombination event where there is a breakage and 
            reunion of duplex DNA that cannot be described by other recombination keys or qualifiers of source key (/proviral).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MiscRecombination.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscRecombination feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscRecombination.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscRecombination.#ctor(System.String)">
            <summary>
            Creates new MiscRecombination feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscRecombination.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscRecombination.#ctor(Bio.IO.GenBank.MiscRecombination)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscRecombination instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscRecombination.Clone">
            <summary>
            Creates a new MiscRecombination that is a copy of the current MiscRecombination.
            </summary>
            <returns>A new MiscRecombination that is a copy of this MiscRecombination.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRecombination.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MiscRna">
            <summary>
            Any transcript or RNA product that cannot be defined by other RNA keys (prim_transcript, precursor_RNA, 
            mRNA, 5'UTR, 3'UTR, exon, CDS, sig_peptide, transit_peptide, mat_peptide, intron, polyA_site, ncRNA, rRNA and tRNA).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MiscRna.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscRna.#ctor(System.String)">
            <summary>
            Creates new MiscRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscRna.#ctor(Bio.IO.GenBank.MiscRna)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscRNA instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscRna.Clone">
            <summary>
            Creates a new MiscRNA that is a copy of the current MiscRNA.
            </summary>
            <returns>A new MiscRNA that is a copy of this MiscRNA.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscRna.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MiscSignal">
            <summary>
            Any region containing a signal controlling or altering gene function or expression that cannot be described 
            by other signal keys (promoter, CAAT_signal, TATA_signal, -35_signal, -10_signal, GC_signal, RBS, polyA_signal, 
            enhancer, attenuator, terminator, and rep_origin).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MiscSignal.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscSignal feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscSignal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscSignal.#ctor(System.String)">
            <summary>
            Creates new MiscSignal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscSignal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscSignal.#ctor(Bio.IO.GenBank.MiscSignal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscSignal instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscSignal.Clone">
            <summary>
            Creates a new MiscSignal that is a copy of the current MiscSignal.
            </summary>
            <returns>A new MiscSignal that is a copy of this MiscSignal.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioral 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscSignal.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MiscStructure">
            <summary>
            Any secondary or tertiary nucleotide structure or conformation that cannot be described by
            other Structure keys (stem_loop and D-loop).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.MiscStructure.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscStructure feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscStructure.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscStructure.#ctor(System.String)">
            <summary>
            Creates new MiscStructure feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscStructure.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscStructure.#ctor(Bio.IO.GenBank.MiscStructure)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscStructure instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.MiscStructure.Clone">
            <summary>
            Creates a new MiscStructure that is a copy of the current MiscStructure.
            </summary>
            <returns>A new MiscStructure that is a copy of this MiscStructure.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.MiscStructure.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.ModifiedBase">
            <summary>
            The indicated nucleotide is a modified nucleotide and should be substituted for by the 
            indicated molecule (given in the ModifiedNucleotideBase qualifier value).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ModifiedBase.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new ModifiedBase feature item from the specified location.
            </summary>
            <param name="location">Location of the ModifiedBase.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ModifiedBase.#ctor(System.String)">
            <summary>
            Creates new ModifiedBase feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the ModifiedBase.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ModifiedBase.#ctor(Bio.IO.GenBank.ModifiedBase)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other ModifiedBase instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ModifiedBase.Clone">
            <summary>
            Creates a new ModifiedBase that is a copy of the current ModifiedBase.
            </summary>
            <returns>A new ModifiedBase that is a copy of this ModifiedBase.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.Frequency">
            <summary>
            Frequency of the occurrence of a feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.ModifiedNucleotideBase">
            <summary>
            mod_base; Abbreviation for a modified nucleotide base.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ModifiedBase.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.MoleculeType">
            <summary>
            A MoleculeType specifies which type of biological sequence is stored in an ISequence.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.MoleculeType.Invalid">
            <summary>
            Not a valid molecule type.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.MoleculeType.NA">
            <summary>
            Nucleic acid of an unspecified type.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.MoleculeType.DNA">
            <summary>
            Deoxyrobonucleic acid.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.MoleculeType.RNA">
            <summary>
            Ribonucleic acid of an unspecified type.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.MoleculeType.tRNA">
            <summary>
            Transfer RNA.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.MoleculeType.rRNA">
            <summary>
            Ribosomal RNA.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.MoleculeType.mRNA">
            <summary>
            Messenger RNA.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.MoleculeType.uRNA">
            <summary>
            Small nuclear RNA.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.MoleculeType.snRNA">
            <summary>
            Small nuclear RNA.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.MoleculeType.snoRNA">
            <summary>
            Small nucleolar RNA (often referred to as guide RNA).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.MoleculeType.Protein">
            <summary>
            Amino acid chain.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.NonCodingRna">
            <summary>
            A non-protein-coding gene (ncRNA), other than ribosomal RNA and transfer RNA, the functional 
            molecule of which is the RNA transcript.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.NonCodingRna.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new NonCodingRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the NonCodingRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.NonCodingRna.#ctor(System.String)">
            <summary>
            Creates new NonCodingRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the NonCodingRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.NonCodingRna.#ctor(Bio.IO.GenBank.NonCodingRna)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other NonCodingRNA instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.NonCodingRna.Clone">
            <summary>
            Creates a new NonCodingRNA that is a copy of the current NonCodingRNA.
            </summary>
            <returns>A new NonCodingRNA that is a copy of this NonCodingRNA.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.NonCodingRna.NonCodingRnaClass">
            <summary>
            ncRNA_class; A structured description of the classification of the non-coding RNA described by the ncRNA parent key.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.OperonRegion">
            <summary>
            Operon is a region containing polycistronic transcript containing genes that encode enzymes 
            that are in the same metabolic pathway and regulatory sequences.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.OperonRegion.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Operon feature item from the specified location.
            </summary>
            <param name="location">Location of the Operon.</param>
        </member>
        <member name="M:Bio.IO.GenBank.OperonRegion.#ctor(System.String)">
            <summary>
            Creates new OperonRegion feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the OperonRegion.</param>
        </member>
        <member name="M:Bio.IO.GenBank.OperonRegion.#ctor(Bio.IO.GenBank.OperonRegion)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Operon instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.OperonRegion.Clone">
            <summary>
            Creates a new OperonRegion that is a copy of the current OperonRegion.
            </summary>
            <returns>A new OperonRegion that is a copy of this OperonRegion.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioral 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OperonRegion.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.OrganismInfo">
            <summary>
            Provides Genus, Species and taxonomic classification levels of the sequence.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.OrganismInfo.Clone">
            <summary>
            Creates a new OrganismInfo that is a copy of the current OrganismInfo.
            </summary>
            <returns>A new OrganismInfo that is a copy of this OrganismInfo.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.OrganismInfo.Genus">
            <summary>
            Genus name of the Organism.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OrganismInfo.Species">
            <summary>
            Species of the organism.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.OrganismInfo.ClassLevels">
            <summary>
            Taxonomic classification levels of the Organism.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.PolyASignal">
            <summary>
            Recognition region necessary for endonuclease cleavage of an RNA transcript that is followed by polyadenylation.
            Consensus=AATAAA.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.PolyASignal.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new PolyASignal feature item from the specified location.
            </summary>
            <param name="location">Location of the PolyASignal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PolyASignal.#ctor(System.String)">
            <summary>
            Creates new PolyASignal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the PolyASignal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PolyASignal.#ctor(Bio.IO.GenBank.PolyASignal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other PolyASignal instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PolyASignal.Clone">
            <summary>
            Creates a new PolyASignal that is a copy of the current PolyASignal.
            </summary>
            <returns>A new PolyASignal that is a copy of this PolyASignal.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASignal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.PolyASite">
            <summary>
            Site on an RNA transcript to which will be added adenine residues by post-transcriptional polyadenylation.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.PolyASite.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new PolyASite feature item from the specified location.
            </summary>
            <param name="location">Location of the PolyASite.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PolyASite.#ctor(System.String)">
            <summary>
            Creates new PolyASite feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the PolyASite.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PolyASite.#ctor(Bio.IO.GenBank.PolyASite)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other PolyASite instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PolyASite.Clone">
            <summary>
            Creates a new PolyASite that is a copy of the current PolyASite.
            </summary>
            <returns>A new PolyASite that is a copy of this PolyASite.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PolyASite.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.PrecursorRna">
            <summary>
            Any RNA species that is not yet the mature RNA product; may include 5' un-translated region (5'UTR), 
            coding sequences (CDS, exon), intervening sequences (intron) and 3' un-translated region (3'UTR).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.PrecursorRna.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new PrecursorRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the PrecursorRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PrecursorRna.#ctor(System.String)">
            <summary>
            Creates new PrecursorRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the PrecursorRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PrecursorRna.#ctor(Bio.IO.GenBank.PrecursorRna)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other PrecursorRNA instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.PrecursorRna.Clone">
            <summary>
            Creates a new PrecursorRNA that is a copy of the current PrecursorRNA.
            </summary>
            <returns>A new PrecursorRNA that is a copy of this PrecursorRNA.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRna.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRna.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRna.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRna.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRna.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRna.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRna.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRna.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRna.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRna.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRna.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRna.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRna.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRna.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRna.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.PrecursorRna.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.ProjectIdentifier">
            <summary>
            The identifier of a project (such as a Genome Sequencing Project) 
            to which a GenBank sequence record belongs.
            
            This is obsolete and was removed from the GenBank flat file format 
            after Release 171.0 in April 2009.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ProjectIdentifier.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ProjectIdentifier.#ctor(Bio.IO.GenBank.ProjectIdentifier)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">ProjectIdentifier instance to clone.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ProjectIdentifier.Clone">
            <summary>
            Creates a new ProjectIdentifier that is a copy of the current ProjectIdentifier.
            </summary>
            <returns>A new ProjectIdentifier that is a copy of this ProjectIdentifier.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.ProjectIdentifier.Name">
            <summary>
            Name of the project.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProjectIdentifier.Numbers">
            <summary>
            Project numbers.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Promoter">
            <summary>
            Region on a DNA molecule involved in RNA polymerase binding to initiate transcription.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Promoter.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Promoter feature item from the specified location.
            </summary>
            <param name="location">Location of the Promoter.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Promoter.#ctor(System.String)">
            <summary>
            Creates new Promoter feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Promoter.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Promoter.#ctor(Bio.IO.GenBank.Promoter)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Promoter instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Promoter.Clone">
            <summary>
            Creates a new Promoter that is a copy of the current Promoter.
            </summary>
            <returns>A new Promoter that is a copy of this Promoter.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.BoundMoiety">
            <summary>
            Name of the molecule/complex that may bind to the given feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioral 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Promoter.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.ProteinBindingSite">
            <summary>
            Non-covalent protein binding site on nucleic acid.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ProteinBindingSite.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new ProteinBindingSite feature item from the specified location.
            </summary>
            <param name="location">Location of the ProteinBindingSite.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ProteinBindingSite.#ctor(System.String)">
            <summary>
            Creates new ProteinBindingSite feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the ProteinBindingSite.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ProteinBindingSite.#ctor(Bio.IO.GenBank.ProteinBindingSite)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other ProteinBindingSite instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ProteinBindingSite.Clone">
            <summary>
            Creates a new ProteinBindingSite that is a copy of the current ProteinBindingSite.
            </summary>
            <returns>A new ProteinBindingSite that is a copy of this ProteinBindingSite.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.BoundMoiety">
            <summary>
            Name of the molecule/complex that may bind to the given feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ProteinBindingSite.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.RepeatRegion">
            <summary>
             Region of genome containing repeating units.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.RepeatRegion.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new RepeatRegion feature item from the specified location.
            </summary>
            <param name="location">Location of the RepeatRegion.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RepeatRegion.#ctor(System.String)">
            <summary>
            Creates new RepeatRegion feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the RepeatRegion.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RepeatRegion.#ctor(Bio.IO.GenBank.RepeatRegion)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other RepeatRegion instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RepeatRegion.Clone">
            <summary>
            Creates a new RepeatRegion that is a copy of the current RepeatRegion.
            </summary>
            <returns>A new RepeatRegion that is a copy of this RepeatRegion.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.MobileElement">
            <summary>
            Type and name or identifier of the mobile element which is described by the parent feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.RepeatedRange">
            <summary>
            rpt_unit_range; Identity of a repeat range.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.RepeatedSequence">
            <summary>
            rpt_unit_seq; Identity of a repeat sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.RepeatedSequenceFamily">
            <summary>
            rpt_family; Type of repeated sequence; ""Alu"" or ""Kpn"", for example.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.RepeatedSequenceType">
            <summary>
            rpt_type; Organization of repeated sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.Satellite">
            <summary>
            Identifier for a satellite DNA marker, compose of many tandem repeats 
            (identical or related) of a short basic repeated unit.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RepeatRegion.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.ReplicationOrigin">
            <summary>
            Origin of replication (rep_origin); starting site for duplication of nucleic acid to give two identical copies.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ReplicationOrigin.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new ReplicationOrigin feature item from the specified location.
            </summary>
            <param name="location">Location of the ReplicationOrigin.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ReplicationOrigin.#ctor(System.String)">
            <summary>
            Creates new ReplicationOrigin feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the ReplicationOrigin.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ReplicationOrigin.#ctor(Bio.IO.GenBank.ReplicationOrigin)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other ReplicationOrigin instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ReplicationOrigin.Clone">
            <summary>
            Creates a new ReplicationOrigin that is a copy of the current ReplicationOrigin.
            </summary>
            <returns>A new ReplicationOrigin that is a copy of this ReplicationOrigin.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.Direction">
            <summary>
            Direction of DNA replication.
            Values: left, right, or both where left indicates toward the 5' end of the entry sequence 
                    (as presented) and right indicates toward the 3' end.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ReplicationOrigin.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.RibosomalRna">
            <summary>
            Mature ribosomal RNA (rRNA); RNA component of the ribonucleoprotein particle (ribosome) 
            which assembles amino acids into proteins.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.RibosomalRna.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new RibosomalRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the RibosomalRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RibosomalRna.#ctor(System.String)">
            <summary>
            Creates new RibosomalRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the RibosomalRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RibosomalRna.#ctor(Bio.IO.GenBank.RibosomalRna)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other RibosomalRNA instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RibosomalRna.Clone">
            <summary>
            Creates a new RibosomalRNA that is a copy of the current RibosomalRNA.
            </summary>
            <returns>A new RibosomalRNA that is a copy of this RibosomalRNA.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRna.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRna.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRna.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRna.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRna.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRna.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRna.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRna.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRna.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRna.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRna.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRna.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRna.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRna.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRna.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomalRna.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.RibosomeBindingSite">
            <summary>
            Ribosome binding site (RBS).
            In prokaryotes, known as the Shine-Dalgarno sequence: is located 5 to 9 bases upstream of the initiation codon.
            Consensus GGAGGT.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.RibosomeBindingSite.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new RibosomeBindingSite feature item from the specified location.
            </summary>
            <param name="location">Location of the RibosomeBindingSite.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RibosomeBindingSite.#ctor(System.String)">
            <summary>
            Creates new RibosomeBindingSite feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the RibosomeBindingSite.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RibosomeBindingSite.#ctor(Bio.IO.GenBank.RibosomeBindingSite)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other RibosomeBindingSite instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.RibosomeBindingSite.Clone">
            <summary>
            Creates a new RibosomeBindingSite that is a copy of the current RibosomeBindingSite.
            </summary>
            <returns>A new RibosomeBindingSite that is a copy of this RibosomeBindingSite.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.RibosomeBindingSite.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.SequenceDivisionCode">
            <summary>
            A DivisionCode specifies which family a sequence belongs to.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.None">
            <summary>
            None - Division code is unspecified.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.PRI">
            <summary>
            Primate sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.ROD">
            <summary>
            Rodent sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.MAM">
            <summary>
            Other mammalian sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.VRT">
            <summary>
            Other vertebrate sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.INV">
            <summary>
            Invertebrate sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.PLN">
            <summary>
            Plant, fungal, and algal sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.BCT">
            <summary>
            Bacterial sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.VRL">
            <summary>
            Viral sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.PHG">
            <summary>
            Bacteriophage sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.SYN">
            <summary>
            Synthetic sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.UNA">
            <summary>
            Unannotated sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.EST">
            <summary>
            EST sequences (expressed sequence tags).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.PAT">
            <summary>
            Patent sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.STS">
            <summary>
            STS sequences (sequence tagged sites).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.GSS">
            <summary>
            GSS sequences (genome survey sequences).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.HTG">
            <summary>
            HTGS sequences (high throughput genomic sequences).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.HTC">
            <summary>
            HTC sequences (high throughput cDNA sequences).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.ENV">
            <summary>
            Environmental sampling sequences.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceDivisionCode.CON">
            <summary>
            Constructed sequences.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.SequenceFeatures">
            <summary>
            Contains information about genes and gene products,
            as well as regions of biological significance reported 
            in the sequence.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceFeatures.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceFeatures.#ctor(Bio.IO.GenBank.SequenceFeatures)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">SequenceFeatures instance to clone.</param>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceFeatures.GetFeatures(System.String)">
            <summary>
            Returns list of feature items for the specified feature key.
            </summary>
            <param name="featureKey">Feature key.</param>
            <returns>Returns List of feature items.</returns>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceFeatures.Clone">
            <summary>
            Creates a new SequenceFeatures that is a copy of the current SequenceFeatures.
            </summary>
            <returns>A new SequenceFeatures that is a copy of this SequenceFeatures.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.All">
            <summary>
            Lists all features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Minus10Signals">
            <summary>
            Returns list of Minus10Signal (-10_signal) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Minus35Signals">
            <summary>
            Returns list of Minus35Signal (-35_signal) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.ThreePrimeUTRs">
            <summary>
            Returns list of ThreePrimeUTR (3'UTR) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.FivePrimeUTRs">
            <summary>
            Returns list of FivePrimeUTR (5'UTR) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Attenuators">
            <summary>
            Returns list of Attenuator features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.CAATSignals">
            <summary>
            Returns list of CAATSignal (CAAT_signal) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.CodingSequences">
            <summary>
            Returns list of CodingSequence (CDS) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.DisplacementLoops">
            <summary>
            Returns list of DisplacementLoop (D-loop) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Enhancers">
            <summary>
            Returns list of Enhancer features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Exons">
            <summary>
            Returns list of Exon features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.GCSignals">
            <summary>
            Returns list of GCSingal (GC_signal) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Genes">
            <summary>
            Returns list of Gene features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.InterveningDNAs">
            <summary>
            Returns list of InterveningDNA (iDNA) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Introns">
            <summary>
            Returns list of Intron features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.LongTerminalRepeats">
            <summary>
            Returns list of LongTerminalRepeat (LTR) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MaturePeptides">
            <summary>
            Returns list of MaturePeptide (mat_peptide) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MiscBindings">
            <summary>
            Returns list of MiscBinding (misc_binding) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MiscDifferences">
            <summary>
            Returns list of MiscDifference (misc_difference) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MiscFeatures">
            <summary>
            Returns list of MiscFeature (misc_feature) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MiscRecombinations">
            <summary>
            Returns list of MiscRecombination (misc_recomb) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MiscRNAs">
            <summary>
            Returns list of MiscRNA (misc_RNA) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MiscSignals">
            <summary>
            Returns list of MiscSignal (misc_signal) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MiscStructures">
            <summary>
            Returns list of MiscStructure (misc_structure) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.ModifiedBases">
            <summary>
            Returns list of ModifiedBase (modified_base) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.MessengerRNAs">
            <summary>
            Returns list of MessengerRNA (mRNA) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.NonCodingRNAs">
            <summary>
            Returns list of NonCodingRNA (ncRNA) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.OperonRegions">
            <summary>
            Returns list of OperonRegion (Operon) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.PolyASignals">
            <summary>
            Returns list of PolyASignal (polyA_signal) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.PolyASites">
            <summary>
            Returns list of PolyASite (polyA_site) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.PrecursorRNAs">
            <summary>
            Returns list of PrecursorRNA (precursor_RNA) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Promoters">
            <summary>
            Returns list of Promoter features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.ProteinBindingSites">
            <summary>
            Returns list of ProteinBindingSite (protein_bind) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.RibosomeBindingSites">
            <summary>
            Returns list of RibosomeBindingSite (RBS) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.ReplicationOrigins">
            <summary>
            Returns list of ReplicationOrigin (rep_origin) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.RepeatRegions">
            <summary>
            Returns list of RepeatRegion (repeat_region) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.RibosomalRNAs">
            <summary>
            Returns list of RibosomalRNA (rRNA) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.SignalPeptides">
            <summary>
            Returns list of SignalPeptide (sig_peptide) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.StemLoops">
            <summary>
            Returns list of StemLoop (stem_loop) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.TATASignals">
            <summary>
            Returns list of TATASignal (TATA_signal) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Terminators">
            <summary>
            Returns list of Terminator features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.TransferMessengerRNAs">
            <summary>
            Returns list of TransferMessengerRNA (tmRNA) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.TransitPeptides">
            <summary>
            Returns list of TransitPeptide (transit_peptide) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.TransferRNAs">
            <summary>
            Returns list of TransferRNA (tRNA) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.UnsureSequenceRegions">
            <summary>
            Returns list of UnsureSequenceRegion (unsure) features.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceFeatures.Variations">
            <summary>
            Returns list of Variation features.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.SequenceSegment">
            <summary>
            Segment provides the information on the order in which this entry appears in a
            series of discontinuous sequences from the same molecule.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceSegment.Clone">
            <summary>
            Creates a new SequenceSegment that is a copy of the current SequenceSegment.
            </summary>
            <returns>A new SequenceSegment that is a copy of this SequenceSegment.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceSegment.Current">
            <summary>
            Current segment number.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceSegment.Count">
            <summary>
            Total number of segments.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.SequenceSource">
            <summary>
            Source provides the common name of the organism or the name most frequently used
            in the literature along with the taxonomic classification levels 
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceSource.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceSource.#ctor(Bio.IO.GenBank.SequenceSource)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">SequenceSource instance to clone.</param>
        </member>
        <member name="M:Bio.IO.GenBank.SequenceSource.Clone">
            <summary>
            Creates a new SequenceSource that is a copy of the current SequenceSource.
            </summary>
            <returns>A new SequenceSource that is a copy of this SequenceSource.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceSource.CommonName">
            <summary>
            Common name of the organism.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SequenceSource.Organism">
            <summary>
            Provides Genus, Species and taxonomic classification levels 
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.SequenceStrandTopology">
            <summary>
            A StrandTopology specifies whether the strand is linear or circular.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceStrandTopology.None">
            <summary>
            None - StrandTopology is unspecified.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceStrandTopology.Linear">
            <summary>
            Linear.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceStrandTopology.Circular">
            <summary>
            Circular.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.SequenceStrandType">
            <summary>
            A StrandType specifies whether sequence occurs as a single stranded,
            double stranded or mixed stranded. 
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceStrandType.None">
            <summary>
            None - StrandType is unspecified.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceStrandType.Single">
            <summary>
            Single-stranded (ss).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceStrandType.Double">
            <summary>
            Double-stranded (ds).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.SequenceStrandType.Mixed">
            <summary>
            Mixed-stranded (ms).
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.SignalPeptide">
            <summary>
            Signal peptide coding sequence; coding sequence for an N-terminal domain of a secreted protein; this 
            domain is involved in attaching nascent polypeptide to the membrane leader sequence.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.SignalPeptide.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new SignalPeptide feature item from the specified location.
            </summary>
            <param name="location">Location of the SignalPeptide.</param>
        </member>
        <member name="M:Bio.IO.GenBank.SignalPeptide.#ctor(System.String)">
            <summary>
            Creates new SignalPeptide feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the SignalPeptide.</param>
        </member>
        <member name="M:Bio.IO.GenBank.SignalPeptide.#ctor(Bio.IO.GenBank.SignalPeptide)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other SignalPeptide instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.SignalPeptide.Clone">
            <summary>
            Creates a new SignalPeptide that is a copy of the current SignalPeptide.
            </summary>
            <returns>A new SignalPeptide that is a copy of this SignalPeptide.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.SignalPeptide.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.StandardFeatureKeys">
            <summary>
            Static class to hold standard feature keys.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Minus10Signal">
            <summary>
            Holds key for Minus10Signal (-10_signal) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Minus35Signal">
            <summary>
            Holds key for Minus35Signal (-35_signal) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.ThreePrimeUtr">
            <summary>
            Holds key for ThreePrimeUtr (3'UTR) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.FivePrimeUtr">
            <summary>
            Holds key for FivePrimeUtr (5'UTR) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Attenuator">
            <summary>
            Holds key for Attenuator feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.CaaTSignal">
            <summary>
            Holds key for CAATSignal (CAAT_signal) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.CodingSequence">
            <summary>
            Holds key for CodingSequence (CDS) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.DisplacementLoop">
            <summary>
            Holds key for DisplacementLoop (D-loop) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Enhancer">
            <summary>
            Holds key for Enhancer feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Exon">
            <summary>
            Holds key for Exon feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.GcSingal">
            <summary>
            Holds key for GCSingal (GC_signal) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Gene">
            <summary>
            Holds key for Gene feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.InterveningDna">
            <summary>
            Holds key for InterveningDNA (iDNA) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Intron">
            <summary>
            Holds key for Intron feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.LongTerminalRepeat">
            <summary>
            Holds key for LongTerminalRepeat (LTR) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MaturePeptide">
            <summary>
            Holds key for MaturePeptide (mat_peptide) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MiscBinding">
            <summary>
            Holds key for MiscBinding (misc_binding) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MiscDifference">
            <summary>
            Holds key for MiscDifference (misc_difference) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MiscFeature">
            <summary>
            Holds key for MiscFeature (misc_feature) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MiscRecombination">
            <summary>
            Holds key for MiscRecombination (misc_recomb) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MiscRna">
            <summary>
            Holds key for MiscRNA (misc_RNA) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MiscSignal">
            <summary>
            Holds key for MiscSignal (misc_signal) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MiscStructure">
            <summary>
            Holds key for MiscStructure (misc_structure) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.ModifiedBase">
            <summary>
            Holds key for ModifiedBase (modified_base) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.MessengerRna">
            <summary>
            Holds key for MessengerRNA (mRNA) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.NonCodingRna">
            <summary>
            Holds key for NonCodingRNA (ncRNA) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.OperonRegion">
            <summary>
            Holds key for Operon feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.PolyASignal">
            <summary>
            Holds key for PolyASignal (polyA_signal) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.PolyASite">
            <summary>
            Holds key for PolyASite (polyA_site) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.PrecursorRna">
            <summary>
            Holds key for PrecursorRNA (precursor_RNA) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Promoter">
            <summary>
            Holds key for Promoter feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.ProteinBindingSite">
            <summary>
            Holds key for ProteinBindingSite (protein_bind) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.RibosomeBindingSite">
            <summary>
            Holds key for RibosomeBindingSite (RBS) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.ReplicationOrigin">
            <summary>
            Holds key for ReplicationOrigin (rep_origin) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.RepeatRegion">
            <summary>
            Holds key for RepeatRegion (repeat_region) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.RibosomalRna">
            <summary>
            Holds key for RibosomalRNA (rRNA) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.SignalPeptide">
            <summary>
            Holds key for SignalPeptide (sig_peptide) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.StemLoop">
            <summary>
            Holds key for StemLoop (stem_loop) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.TataSignal">
            <summary>
            Holds key for TATASignal (TATA_signal) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Terminator">
            <summary>
            Holds key for Terminator feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.TransferMessengerRna">
            <summary>
            Holds key for TransferMessengerRNA (tmRNA) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.TransitPeptide">
            <summary>
            Holds key for TransitPeptide (transit_peptide) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.TransferRna">
            <summary>
            Holds key for TransferRNA (tRNA) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.UnsureSequenceRegion">
            <summary>
            Holds key for UnsureSequenceRegion (unsure) feature.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardFeatureKeys.Variation">
            <summary>
            Holds key for Variation feature.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.StandardFeatureKeys.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StandardFeatureKeys.All">
            <summary>
            Returns a list which contains standard feature keys.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.StandardFeatureMap">
            <summary>
            Class to map each standard feature key to the class which can hold that feature.
            Note that the classes which can hold feature has to be derived from FeatureItem class.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.StandardFeatureMap.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.StandardFeatureMap.GetStandardFeatureItem(Bio.IO.GenBank.FeatureItem)">
            <summary>
            Returns standard feature class instance, if the key in the specified feature item is found 
            in the map; otherwise returns the specified feature item itself.
            For example:
            If the specified feature item has the key "Gene" then this method returns instance of the Gene class
            with data copied from the specified item.
            </summary>
            <param name="item">Feature item instance to which the standard feature item instance is needed.</param>
            <returns>If found returns appropriate class instance for the specified feature item, otherwise returns 
            the specified item itself.</returns>
        </member>
        <member name="T:Bio.IO.GenBank.StandardQualifierNames">
            <summary>
            Static class to hold standard qualifier names.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Allele">
            <summary>
            Qualifier name for Allele.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.AntiCodon">
            <summary>
            Qualifier name for AntiCodon.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.BioMaterial">
            <summary>
            Qualifier name for Bio_Material.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.BoundMoiety">
            <summary>
            Qualifier name for Bound_Moiety.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.CellLine">
            <summary>
            Qualifier name for Cell_Line.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.CellType">
            <summary>
            Qualifier name for Cell_Type.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Chromosome">
            <summary>
            Qualifier name for Chromosome.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Citation">
            <summary>
            Qualifier name for Citation.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.ClonedFrom">
            <summary>
            Qualifier name for Clone.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.CloneLibrary">
            <summary>
            Qualifier name for Clone_Lib.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Codon">
            <summary>
            Qualifier name for Codon.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.CodonStart">
            <summary>
            Qualifier name for Codon_Start.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.CollectedBy">
            <summary>
            Qualifier name for Collected_By.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.CollectionDate">
            <summary>
            Qualifier name for Collection_Date.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Compare">
            <summary>
            Qualifier name for Compare.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Country">
            <summary>
            Qualifier name for Country.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.CultivatedVariety">
            <summary>
            Qualifier name for Cultivar.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.CultureCollection">
            <summary>
            Qualifier name for Culture_Collection.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.DatabaseCrossReference">
            <summary>
            Qualifier name for DatabaseCrossReference (Db_Xref).
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.DevelopmentalStage">
            <summary>
            Qualifier name for Dev_Stage.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Direction">
            <summary>
            Qualifier name for Direction.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.EnzymeCommissionNumber">
            <summary>
            Qualifier name for EC_Number.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Ecotype">
            <summary>
            Qualifier name for Ecotype.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.EnvironmentalSample">
            <summary>
            Qualifier name for Environmental_Sample.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.EstimatedLength">
            <summary>
            Qualifier name for Estimated_Length.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Exception">
            <summary>
            Qualifier name for Exception.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Experiment">
            <summary>
            Qualifier name for Experiment.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Focus">
            <summary>
            Qualifier name for Focus.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Frequency">
            <summary>
            Qualifier name for Frequency.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Function">
            <summary>
            Qualifier name for Function.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.GeneSymbol">
            <summary>
            Qualifier name for GeneSymbol.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.GeneSynonym">
            <summary>
            Qualifier name for Gene_Synonym.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Germline">
            <summary>
            Qualifier name for Germline.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Haplotype">
            <summary>
            Qualifier name for Haplotype.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Host">
            <summary>
            Qualifier name for Host.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.IdentifiedBy">
            <summary>
            Qualifier name for Identified_By.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Inference">
            <summary>
            Qualifier name for Inference.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Isolate">
            <summary>
            Qualifier name for Isolate.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.IsolationSource">
            <summary>
            Qualifier name for Isolation_Source.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.LabHost">
            <summary>
            Qualifier name for Lab_Host.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Label">
            <summary>
            Qualifier name for Label.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.LatitudeLongitude">
            <summary>
            Qualifier name for Lat_Lon.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.LocusTag">
            <summary>
            Qualifier name for Locus_Tag.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Macronuclear">
            <summary>
            Qualifier name for Macronuclear.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.GenomicMapPosition">
            <summary>
            Qualifier name for Map.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.MatingType">
            <summary>
            Qualifier name for Mating_Type.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.MobileElement">
            <summary>
            Qualifier name for Mobile_Element.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.ModifiedNucleotideBase">
            <summary>
            Qualifier name for Mod_Base.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.MoleculeType">
            <summary>
            Qualifier name for Mol_Type.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.NonCodingRnaClass">
            <summary>
            Qualifier name for ncRNA_Class.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Note">
            <summary>
            Qualifier name for Note.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Number">
            <summary>
            Qualifier name for Number.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.OldLocusTag">
            <summary>
            Qualifier name for Old_Locus_Tag.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Operon">
            <summary>
            Qualifier name for Operon.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Organelle">
            <summary>
            Qualifier name for Organelle.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Organism">
            <summary>
            Qualifier name for Organism.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.PcrConditions">
            <summary>
            Qualifier name for PCR_Conditions.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.PcrPrimers">
            <summary>
            Qualifier name for PCR_Primers.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Phenotype">
            <summary>
            Qualifier name for Phenotype.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Plasmid">
            <summary>
            Qualifier name for Plasmid.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.PopulationVariant">
            <summary>
            Qualifier name for Pop_Variant.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Product">
            <summary>
            Qualifier name for Product.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.ProteinId">
            <summary>
            Qualifier name for Protein_Id.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Proviral">
            <summary>
            Qualifier name for Proviral.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Pseudo">
            <summary>
            Qualifier name for Pseudo.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Rearranged">
            <summary>
            Qualifier name for Rearranged.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Replace">
            <summary>
            Qualifier name for Replace.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.RibosomalSlippage">
            <summary>
            Qualifier name for Ribosomal_Slippage.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.RepeatedSequenceFamily">
            <summary>
            Qualifier name for Rpt_Family.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.RepeatedSequenceType">
            <summary>
            Qualifier name for Rpt_Type.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.RepeatedRange">
            <summary>
            Qualifier name for Rpt_Unit_Range.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.RepeatedSequence">
            <summary>
            Qualifier name for Rpt_Unit_Seq.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Satellite">
            <summary>
            Qualifier name for Satellite.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Segment">
            <summary>
            Qualifier name for Segment.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Serotype">
            <summary>
            Qualifier name for Serotype.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Serovar">
            <summary>
            Qualifier name for Serovar.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Sex">
            <summary>
            Qualifier name for Sex.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.SpecimenVoucher">
            <summary>
            Qualifier name for Specimen_Voucher.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.StandardName">
            <summary>
            Qualifier name for Standard_Name.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Strain">
            <summary>
            Qualifier name for Strain.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.SubClone">
            <summary>
            Qualifier name for Sub_Clone.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.SubSpecies">
            <summary>
            Qualifier name for Sub_Species.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.SubStrain">
            <summary>
            Qualifier name for Sub_Strain.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.TagPeptide">
            <summary>
            Qualifier name for Tag_Peptide.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.TissueLibrary">
            <summary>
            Qualifier name for Tissue_Lib.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.TissueType">
            <summary>
            Qualifier name for Tissue_Type.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.TransSplicing">
            <summary>
            Qualifier name for Trans_Splicing.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Transgenic">
            <summary>
            Qualifier name for Transgenic.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.TranslationalExcept">
            <summary>
            Qualifier name for Transl_Except.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.TranslationTable">
            <summary>
            Qualifier name for Transl_Table.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Translation">
            <summary>
            Qualifier name for Translation.
            </summary>
        </member>
        <member name="F:Bio.IO.GenBank.StandardQualifierNames.Variety">
            <summary>
            Qualifier name for Variety.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.StandardQualifierNames.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StandardQualifierNames.All">
            <summary>
            Returns a list of standard qualifier names.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.StemLoop">
            <summary>
            Hairpin; a double-helical region formed by base-pairing between adjacent (inverted) complementary sequences 
            in a single strand of RNA or DNA.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.StemLoop.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new StemLoop feature item from the specified location.
            </summary>
            <param name="location">Location of the StemLoop.</param>
        </member>
        <member name="M:Bio.IO.GenBank.StemLoop.#ctor(System.String)">
            <summary>
            Creates new StemLoop feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the StemLoop.</param>
        </member>
        <member name="M:Bio.IO.GenBank.StemLoop.#ctor(Bio.IO.GenBank.StemLoop)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other StemLoop instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.StemLoop.Clone">
            <summary>
            Creates a new StemLoop that is a copy of the current StemLoop.
            </summary>
            <returns>A new StemLoop that is a copy of this StemLoop.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.StemLoop.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.TataSignal">
            <summary>
             TATA box; Goldberg-Hogness box; a conserved AT-rich septamer found about 25 bp before the start point 
             of each eukaryotic RNA polymerase II transcript unit which may be involved in positioning the enzyme 
             for correct initiation; consensus=TATA(A or T)A(A or T).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.TataSignal.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new TATASignal feature item from the specified location.
            </summary>
            <param name="location">Location of the TATASignal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TataSignal.#ctor(System.String)">
            <summary>
            Creates new TATASignal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the TATASignal.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TataSignal.#ctor(Bio.IO.GenBank.TataSignal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other TATASignal instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TataSignal.Clone">
            <summary>
            Creates a new TATASignal that is a copy of the current TATASignal.
            </summary>
            <returns>A new TATASignal that is a copy of this TATASignal.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TataSignal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Terminator">
            <summary>
            Sequence of DNA located either at the end of the transcript that causes RNA polymerase to terminate transcription.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Terminator.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Terminator feature item from the specified location.
            </summary>
            <param name="location">Location of the Terminator.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Terminator.#ctor(System.String)">
            <summary>
            Creates new Terminator feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Terminator.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Terminator.#ctor(Bio.IO.GenBank.Terminator)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Terminator instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Terminator.Clone">
            <summary>
            Creates a new Terminator that is a copy of the current Terminator.
            </summary>
            <returns>A new Terminator that is a copy of this Terminator.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Terminator.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.ThreePrimeUtr">
            <summary>
            ThreePrimeUTR (3'UTR) is a Region at the 3' end of a mature transcript (following the stop codon) that 
            is not translated into a protein.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.ThreePrimeUtr.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new ThreePrimeUTR feature item from the specified location.
            </summary>
            <param name="location">Location of the ThreePrimeUTR.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ThreePrimeUtr.#ctor(System.String)">
            <summary>
            Creates new ThreePrimeUTR feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the ThreePrimeUTR.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ThreePrimeUtr.#ctor(Bio.IO.GenBank.ThreePrimeUtr)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other ThreePrimeUTR instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.ThreePrimeUtr.Clone">
            <summary>
            Creates a new ThreePrimeUTR that is a copy of the current ThreePrimeUTR.
            </summary>
            <returns>A new ThreePrimeUTR that is a copy of this ThreePrimeUTR.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.ThreePrimeUtr.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.TransferMessengerRna">
            <summary>
            Transfer messenger RNA; tmRNA acts as a tRNA first, and then as an mRNA that encodes a peptide tag; 
            the ribosome translates this mRNA region of tmRNA and attaches the encoded peptide tag to the 
            C-terminus of the unfinished protein; this attached tag targets the protein for destruction or proteolysis.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.TransferMessengerRna.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new TransferMessengerRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the TransferMessengerRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransferMessengerRna.#ctor(System.String)">
            <summary>
            Creates new TransferMessengerRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the TransferMessengerRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransferMessengerRna.#ctor(Bio.IO.GenBank.TransferMessengerRna)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other TransferMessengerRNA instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransferMessengerRna.Clone">
            <summary>
            Creates a new TransferMessengerRNA that is a copy of the current TransferMessengerRNA.
            </summary>
            <returns>A new TransferMessengerRNA that is a copy of this TransferMessengerRNA.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.TransferMessengerRna.TagPeptide">
            <summary>
            Base location encoding the polypeptide for proteolysis tag of tmRNA and its termination codon.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.TransferRna">
            <summary>
            Mature transfer RNA (tRNA), a small RNA molecule (75-85 bases long) that mediates the translation of 
            a nucleic acid sequence into an amino acid sequence.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.TransferRna.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new TransferRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the TransferRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransferRna.#ctor(System.String)">
            <summary>
            Creates new TransferRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the TransferRNA.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransferRna.#ctor(Bio.IO.GenBank.TransferRna)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other TransferRNA instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransferRna.Clone">
            <summary>
            Creates a new TransferRNA that is a copy of the current TransferRNA.
            </summary>
            <returns>A new TransferRNA that is a copy of this TransferRNA.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.AntiCodon">
            <summary>
            Location of the anticodon of tRNA and the amino acid for which it codes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransferRna.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.TransitPeptide">
            <summary>
            Transit peptide coding sequence (transit_peptide); coding sequence for an N-terminal domain of a nuclear-encoded organellar protein; 
            this domain is involved in post-translational import of the protein into the organelle.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.TransitPeptide.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new TransitPeptide feature item from the specified location.
            </summary>
            <param name="location">Location of the TransitPeptide.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransitPeptide.#ctor(System.String)">
            <summary>
            Creates new TransitPeptide feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the TransitPeptide.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransitPeptide.#ctor(Bio.IO.GenBank.TransitPeptide)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other TransitPeptide instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.TransitPeptide.Clone">
            <summary>
            Creates a new TransitPeptide that is a copy of the current TransitPeptide.
            </summary>
            <returns>A new TransitPeptide that is a copy of this TransitPeptide.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.TransitPeptide.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.UnsureSequenceRegion">
            <summary>
            UnsureSequenceRegion (Unsure) is a region in which author is unsure of exact sequence.
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.UnsureSequenceRegion.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new UnsureSequenceRegion feature item from the specified location.
            </summary>
            <param name="location">Location of the UnsureSequenceRegion.</param>
        </member>
        <member name="M:Bio.IO.GenBank.UnsureSequenceRegion.#ctor(System.String)">
            <summary>
            Creates new UnsureSequenceRegion feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the UnsureSequenceRegion.</param>
        </member>
        <member name="M:Bio.IO.GenBank.UnsureSequenceRegion.#ctor(Bio.IO.GenBank.UnsureSequenceRegion)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other UnsureSequenceRegion instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.UnsureSequenceRegion.Clone">
            <summary>
            Creates a new UnsureSequenceRegion that is a copy of the current UnsureSequenceRegion.
            </summary>
            <returns>A new UnsureSequenceRegion that is a copy of this UnsureSequenceRegion.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.Compare">
            <summary>
            Reference details of an existing public INSD entry to which a comparison is made.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.UnsureSequenceRegion.Replace">
            <summary>
            Indicates that the sequence identified a feature's intervals is replaced by the sequence shown in ""text"";
            if no sequence is contained within the qualifier, this indicates a deletion.
            </summary>
        </member>
        <member name="T:Bio.IO.GenBank.Variation">
            <summary>
            A related strain contains stable mutations from the same gene (e.g., RFLPs, polymorphisms, etc.) 
            which differ from the presented sequence at this location (and possibly others).
            </summary>
        </member>
        <member name="M:Bio.IO.GenBank.Variation.#ctor(Bio.IO.GenBank.ILocation)">
            <summary>
            Creates new Variation feature item from the specified location.
            </summary>
            <param name="location">Location of the Variation.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Variation.#ctor(System.String)">
            <summary>
            Creates new Variation feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Variation.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Variation.#ctor(Bio.IO.GenBank.Variation)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Variation instance.</param>
        </member>
        <member name="M:Bio.IO.GenBank.Variation.Clone">
            <summary>
            Creates a new Variation that is a copy of the current Variation.
            </summary>
            <returns>A new Variation that is a copy of this Variation.</returns>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Compare">
            <summary>
            Reference details of an existing public INSD entry to which a comparison is made.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Frequency">
            <summary>
            Frequency of the occurrence of a feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioral 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.Replace">
            <summary>
            Indicates that the sequence identified a feature's intervals is replaced by the sequence shown in ""text"";
            if no sequence is contained within the qualifier, this indicates a deletion.
            </summary>
        </member>
        <member name="P:Bio.IO.GenBank.Variation.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:Bio.IO.Gff.GffFormatter">
            <summary>
                Writes an ISequence to a particular location, usually a file. The output is formatted
                according to the GFF file format. A method is also provided for quickly accessing
                the content in string form for applications that do not need to first write to file.
            </summary>
        </member>
        <member name="M:Bio.IO.Gff.GffFormatter.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.Gff.GffFormatter.Format(System.IO.Stream,Bio.ISequence)">
            <summary>
                Writes an ISequence to the specified file.
            </summary>
            <param name="stream">Writer</param>
            <param name="data">The sequence to format.</param>
        </member>
        <member name="M:Bio.IO.Gff.GffFormatter.Format(System.IO.Stream,System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
                Write a collection of ISequences to a file.
            </summary>
            <remarks>
                This method is overridden to format file-scope metadata that applies to all
                metadata that applies to all of the sequences in the file.
            </remarks>
            <param name="stream">Writer</param>
            <param name="sequences">The sequences to write</param>
        </member>
        <member name="M:Bio.IO.Gff.GffFormatter.Format(Bio.ISequence,System.IO.TextWriter)">
            <summary>
                Writes an ISequence to a GenBank file in the location specified by the writer.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:Bio.IO.Gff.GffFormatter.WriteHeaders(System.Collections.Generic.ICollection{Bio.ISequence},System.IO.TextWriter)">
            <summary>
                The headers for all sequences go at the top of the file before any features.
            </summary>
            <param name="sequenceList"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Bio.IO.Gff.GffFormatter.WriteSeqData(Bio.ISequence,System.String,System.IO.TextWriter)">
            <summary>
                Writes the sequence to the specified writer.
            </summary>
            <param name="sequence"></param>
            <param name="type"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Bio.IO.Gff.GffFormatter.WriteCommonMetadata(Bio.ISequence,System.Collections.Generic.IEnumerable{Bio.ISequence},System.IO.TextWriter,System.String,System.String,System.String,System.Int32)">
            <summary>
                Writes common metadata.
            </summary>
            <param name="commonSeq"></param>
            <param name="sequenceList"></param>
            <param name="writer"></param>
            <param name="source"></param>
            <param name="version"></param>
            <param name="type"></param>
            <param name="startFrom"></param>
        </member>
        <member name="M:Bio.IO.Gff.GffFormatter.GetGenericTypeString(Bio.IAlphabet)">
            <summary>
                Returns "DNA", "RNA", "Protein", or null.
            </summary>
            <param name="alphabet"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.Gff.GffFormatter.WriteFeatures(Bio.ISequence,System.IO.TextWriter)">
            <summary>
                Skips the sequence if it has no features, and skips any features that don't
                have all the mandatory fields.
            </summary>
            <param name="sequence"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Bio.IO.Gff.GffFormatter.GetSubItemString(Bio.MetadataListItem{System.Collections.Generic.List{System.String}},System.String)">
            <summary>
                Returns a tab plus the sub-item text or a "." if the sub-item is absent.
            </summary>
            <param name="feature"></param>
            <param name="subItemName"></param>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.Gff.GffFormatter.ShouldWriteSequenceData">
            <summary>
                Whether or not sequence data will be written as part of the GFF header information;
                This property is required as GFF files normally do not contain sequence data.
                Defaults value is true.
            </summary>
        </member>
        <member name="P:Bio.IO.Gff.GffFormatter.Name">
            <summary>
                Gets the type of Formatter i.e GFF.
                This is intended to give developers some information
                of the formatter class.
            </summary>
        </member>
        <member name="P:Bio.IO.Gff.GffFormatter.Description">
            <summary>
                Gets the description of GFF formatter.
                This is intended to give developers some information
                of the formatter class. This property returns a simple description of what the
                GffFormatter class achieves.
            </summary>
        </member>
        <member name="P:Bio.IO.Gff.GffFormatter.SupportedFileTypes">
            <summary>
                Gives the Supported types.
            </summary>
        </member>
        <member name="T:Bio.IO.Gff.GffParser">
            <summary>
                A GffParser reads from a source of text that is formatted according to the GFF flat
                file specification, and converts the data to in-memory ISequence objects.  For advanced
                users, the ability to select an encoding for the internal memory representation is
                provided. There is also a default encoding for each alphabet that may be encountered.
                Documentation for the latest GFF file format can be found at following location under
                Creative Commons License that is,
                Online content created and hosted by the Wellcome Trust Sanger Institute is,
                unless otherwise stated, licensed under a Creative Commons Attribution-NonCommercial-NoDerivs 2.5 License.
                http://www.sanger.ac.uk/Software/formats/GFF/GFF_Spec.shtml
            </summary>
        </member>
        <member name="M:Bio.IO.Gff.GffParser.ParseOne(System.IO.Stream)">
            <summary>
            Parse a single sequence - not supported due to the file format.
            </summary>
            <param name="stream">Stream</param>
            <returns>Sequence</returns>
        </member>
        <member name="M:Bio.IO.Gff.GffParser.Parse(System.IO.Stream)">
            <summary>
                Parses a list of GFF sequences.
            </summary>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:Bio.IO.Gff.GffParser.ParseHeaders(System.IO.TextReader)">
            <summary>
                Process the headers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.Gff.GffParser.ParseFeatures(System.IO.TextReader,System.String)">
            <summary>
            Parses the consecutive feature lines for one sequence.
            </summary>
            <param name="reader"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.Gff.GffParser.CopyMetadata">
            <summary>
                Copy file-scope metadata to all the sequences in the list.
            </summary>
            Flag to indicate whether the resulting sequences should be in read-only mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
        </member>
        <member name="M:Bio.IO.Gff.GffParser.GetAlphabetType(System.String)">
            <summary>
                Maps the string to a particular Alphabet type and returns
                the instance of mapped Alphabet type.
            </summary>
            <param name="type">The alphabet type.</param>
            <returns>Returns the appropriate Alphabet type for the specified string.</returns>
        </member>
        <member name="P:Bio.IO.Gff.GffParser.Alphabet">
            <summary>
                The alphabet to use for parsed ISequence objects.  If this is not set, an alphabet will
                be determined based on the file being parsed.
            </summary>
        </member>
        <member name="P:Bio.IO.Gff.GffParser.Name">
            <summary>
                Gets the type of Parser i.e GFF.
                This is intended to give developers some information
                of the parser class.
            </summary>
        </member>
        <member name="P:Bio.IO.Gff.GffParser.Description">
            <summary>
                Gets the description of GFF parser.
                This is intended to give developers some information
                of the formatter class. This property returns a simple description of what the
                GffParser class achieves.
            </summary>
        </member>
        <member name="P:Bio.IO.Gff.GffParser.SupportedFileTypes">
            <summary>
                Shows the supported types.
            </summary>
        </member>
        <member name="T:Bio.IO.GZipFastAParser">
            <summary>
            Support for reading .fa.gz files.
            </summary>
        </member>
        <member name="T:Bio.IO.GZipSequenceParser`2">
            <summary>
            .GZ based ISequenceParser
            </summary>
            <typeparam name="T">Parser type</typeparam>
            <typeparam name="TItem">Item type</typeparam>
        </member>
        <member name="T:Bio.IO.GZipParser`2">
            <summary>
            A parser which unzips the file and then passes the work off to an inner parser.
            </summary>
        </member>
        <member name="F:Bio.IO.GZipParser`2.Parser">
            <summary>
            Inner parser
            </summary>
        </member>
        <member name="M:Bio.IO.GZipParser`2.#ctor">
            <summary>
            Default constructor - creates inner parser.
            </summary>
        </member>
        <member name="M:Bio.IO.GZipParser`2.#ctor(`0)">
            <summary>
            Constructor which takes the parser as input.
            </summary>
            <param name="parser">Parser to use.</param>
        </member>
        <member name="M:Bio.IO.GZipParser`2.CanProcessFile(System.String)">
            <summary>
            Initializes a new instance of the FastAParser class by 
            loading the specified filename and ensuring that it ends with ".gz"
            </summary>
            <param name="filename">Name of the File.</param>
        </member>
        <member name="M:Bio.IO.GZipParser`2.Parse(System.IO.Stream)">
            <summary>
            Parses a list of biological sequence texts from a given stream.
            </summary>
            <returns>The collection of parsed ISequence objects.</returns>
        </member>
        <member name="M:Bio.IO.GZipParser`2.ParseOne(System.IO.Stream)">
            <summary>
            Parse a single data sequence from the file.
            </summary>
            <param name="stream">Stream</param>
            <returns>Data</returns>
        </member>
        <member name="P:Bio.IO.GZipParser`2.Name">
            <summary>
            Gets the name of the parser being implemented. 
            This is intended to give the developer name of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.GZipParser`2.Description">
            <summary>
            Gets the description of the parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.GZipParser`2.SupportedFileTypes">
            <summary>
            Gets the file extensions that the parser supports.
            If multiple extensions are supported then this property 
            will return a string containing all extensions with a ',' delimited.
            </summary>
        </member>
        <member name="P:Bio.IO.GZipSequenceParser`2.Alphabet">
            <summary>
            Gets or sets the alphabet to use for parsed ISequence objects.  If this is not set, the alphabet will
            be determined based on the file being parsed.
            </summary>
        </member>
        <member name="T:Bio.IO.GZipFastQParser">
            <summary>
            Support for reading .fastq.gz files.
            </summary>
        </member>
        <member name="T:Bio.IO.INamedStreamCreator">
            <summary>
            Interface that has a name and that can create streams. It can be used as a generalization of file names, FileInfo, reading data from a string,
            reading data from a resource, etc.
            </summary>
        </member>
        <member name="P:Bio.IO.INamedStreamCreator.Name">
            <summary>
            The name of the data source. This might be a file name, a resource name, the name of a text box on a form, etc. This name is mostly used
            in error messages when there is an error in the data to help the user understand which data source has the problem.
            </summary>
        </member>
        <member name="P:Bio.IO.INamedStreamCreator.Creator">
            <summary>
            A factor that creates a stream.
            </summary>
        </member>
        <member name="T:Bio.IO.IPhylogeneticTreeFormatter">
            <summary>
            Implementations of this interface write a PhylogeneticTree to a particular location, 
            usually a file. The output is formatted according to the particular file format. 
            A method is also provided for quickly accessing the content in string form for 
            applications that do not need to first write to file.
            </summary>
        </member>
        <member name="M:Bio.IO.IPhylogeneticTreeFormatter.Format(System.IO.Stream,Bio.Phylogenetics.Tree)">
            <summary>
            Writes a PhylogeneticTree to the location specified by the writer.
            </summary>
            <param name="stream">The Stream used to write the formatted Phylogenetic Tree text.</param>
            <param name="tree">PhylogeneticTree to format.</param>
        </member>
        <member name="T:Bio.IO.IPhylogeneticTreeParser">
            <summary>
            Implementations of this interface are designed to parse a phylogenetic tree file 
            format to produce a PhylogeneticTree object model. 
            </summary>
        </member>
        <member name="M:Bio.IO.IPhylogeneticTreeParser.Parse(System.IO.Stream)">
            <summary>
            Parses a phylogenetic tree text from a stream.
            </summary>
            <param name="stream">A stream for a phylogenetic tree text, it will be left open.</param>
            <returns>Phylogenetic tree object.</returns>
        </member>
        <member name="P:Bio.IO.IPhylogeneticTreeParser.TreeName">
            <summary>
            Name for the tree
            </summary>
        </member>
        <member name="T:Bio.IO.ISnpReader">
            <summary>
            Interface for exposing a collection of SnpItems as an enumerator with 
            ability to skip to specific chromosome number and position.
            </summary>
        </member>
        <member name="M:Bio.IO.ISnpReader.SkipToChromosome(System.Int32)">
            <summary>
            This moves the cursor to the current/next SNP item containing the given 
            chromosome number (i.e. Current.Chromosome == chromosomeNumber), 
            or beyond the end of the enumerator if none exist. 
            This is useful when traversing sorted SNP sequences and we need to 
            jump to a specific chromosome number.
            The enumerator should be positioned at or after the first item and at or before the last item.
            </summary>
            <param name="chromosomeNumber">The chromosome number for the Snpitem to move to.</param>
            <returns>True if the cursor was moved to a SnpItem with the given chromosome number. 
            False if no subsequent SnpItems exist with given chromosome number.
            If returning true, the Current item will have given chromosome number.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:Bio.IO.ISnpReader.SkipToChromosomePosition(System.Int32,System.Int32)">
            <summary>
            This moves the cursor to the current/next SNP item containing the given 
            chromosome number and position 
            (i.e. Current.Chromosome == chromosomeNumber and Current.Position == position), 
            or beyond the end of the enumerator if none exist.
            The enumerator should be positioned at or after the first item and at 
            or before the last item.
            NOTE: This is useful when traversing sorted SNP sequences and need to jump to a 
            specific chromosome number+position.
            </summary>
            <param name="chromosomeNumber">The chromosome number for the Snpitem to move to.</param>
            <param name="position">The position within chromosome number for the Snpitem to move to.</param>
            <returns>Returns true if a SnpItem with given chromosome number and position is found.
            If end of file is reached before this they are found, it returns false. 
            If returning true, the Current item will have given chromosome number and position.</returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:Bio.IO.ISnpReader.SkipToChromosomePosition(System.Int32)">
            <summary>
            This moves the cursor to the current/next SNP item containing the current chromosome number
            and position equal to the given position
            (i.e. Current.Position == position and Current.Chromosome does not change), 
            or beyond the end of the enumerator if none exist.
            The enumerator should be positioned at or after the first item and at 
            or before the last item.
            NOTE: This is useful when traversing sorted SNP sequences and need to jump to a 
            specific chromosome position within current chromosome position.
            </summary>
            <param name="position">The position within chromosome number for the Snpitem to move to.</param>
            <returns>Returns true if this position is found. 
            False if the next chromosome number is encountered, or end of file is 
            reached before the position is found. If returning true, the Current item 
            will contain the starting chromosome number and given position.</returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="T:Bio.IO.NamedStreamCreator">
            <summary>
            A class that has a name and that can create streams. It can be used as a generalization of file names, FileInfo, reading data from a string,
            reading data from a resource, etc.
            </summary>
        </member>
        <member name="M:Bio.IO.NamedStreamCreator.#ctor(System.String,System.Func{System.IO.Stream})">
            <summary>
            Constructor for NamedStreamCreator
            </summary>
            <param name="name">The name of the data source. This might be a file name, a resource name, the name of a text box on a form, etc. This name is mostly used
            in error messages when there is an error in the data to help the user understand which data source has the problem.</param>
            <param name="creator">A factor that creates a stream.</param>
        </member>
        <member name="P:Bio.IO.NamedStreamCreator.Name">
            <summary>
            The name of the data source. This might be a file name, a resource name, the name of a text box on a form, etc. This name is mostly used
            in error messages when there is an error in the data to help the user understand which data source has the problem.
            </summary>
        </member>
        <member name="P:Bio.IO.NamedStreamCreator.Creator">
            <summary>
            A factory that creates a stream.
            </summary>
        </member>
        <member name="T:Bio.IO.Newick.NewickFormatter">
            <summary>
            Formats a PhylogeneticTree object into newick text (usually a file). 
            The output is formatted according to the Newick format. A method is 
            also provided for quickly accessing the content in string form 
            for applications that do not need to first write to file.
            Documentation for the latest Newick file format can be found at
            http://evolution.genetics.washington.edu/phylip/newicktree.html
            http://en.wikipedia.org/wiki/Newick_format
            </summary>
        </member>
        <member name="M:Bio.IO.Newick.NewickFormatter.Format(System.IO.Stream,Bio.Phylogenetics.Tree)">
            <summary>
            Writes a PhylogeneticTree to the writer.
            </summary>
            <param name="stream">The Stream used to write the formatted Phylogenetic tree text, it will remain open.</param>
            <param name="tree">PhylogeneticTree to format.</param>
        </member>
        <member name="M:Bio.IO.Newick.NewickFormatter.Write(Bio.Phylogenetics.Node,Bio.Phylogenetics.Edge,System.Text.StringBuilder@)">
            <summary>
            Recursive method to get each node into string
            </summary>
            <param name="node">tree node</param>
            <param name="edge">edge</param>
            <param name="stringBuilder">output newick string</param>
        </member>
        <member name="P:Bio.IO.Newick.NewickFormatter.Name">
            <summary>
            Gets the type of Formatter i.e NEWICK.
            This is intended to give developers some information 
            of the formatter class.
            </summary>
        </member>
        <member name="P:Bio.IO.Newick.NewickFormatter.Description">
            <summary>
            Gets the description of Newick formatter.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            NewickFormatter class achieves.
            </summary>
        </member>
        <member name="P:Bio.IO.Newick.NewickFormatter.SupportedFileTypes">
            <summary>
            Gets a comma separated values of the possible
            file extensions for a newick file.
            </summary>
        </member>
        <member name="T:Bio.IO.Newick.NewickParser">
            <summary>
            A NewickParser reads from a source of text that is formatted according to 
            the Newick notation flat file specification, and converts the data to 
            in-memory PhylogeneticTree object.  
            Documentation for the latest Newick file format can be found at
            http://evolution.genetics.washington.edu/phylip/newicktree.html
            http://en.wikipedia.org/wiki/Newick_format
            </summary>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.Parse(System.Text.StringBuilder)">
            <summary>
            Parses a Phylogenetic tree text from a StringBuilder into a PhylogeneticTree.
            </summary>
            <param name="textData">A stream for a Phylogenetic tree text.</param>
            <returns>A new PhylogeneticTree instance containing parsed data.</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.Parse(System.IO.Stream)">
            <summary>
            Parses a Phylogenetic tree text from a reader into a PhylogeneticTree.
            </summary>
            <param name="stream">A stream for a Phylogenetic tree text.</param>
            <returns>A new PhylogeneticTree instance containing parsed data.</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.InternalParse(System.IO.TextReader)">
            <summary>
            Internal parse method used to parse out the data from a low-level TextReader.
            </summary>
            <param name="reader">Reader</param>
            <returns>Parsed Tree</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.GetNode(System.IO.TextReader,System.Boolean)">
            <summary>
            Get collection of (Branch and Leaf) nodes
            </summary>
            <param name="reader">TextReader</param>
            <param name="isRoot"></param>
            <returns>PhylogeneticNode object</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.GetExtendedMetaData(System.IO.TextReader)">
            <summary>
            Parse Newick extend format files
            http://home.cc.umanitoba.ca/~psgendb/doc/atv/NHX.pdf
            If the string "[(ampersand)(ampersand)NHX" is not present, throws an error (note ampersand used instead of the xml for some nonsense xml parsing reasons) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.GetName(System.IO.TextReader)">
            <summary>
            Get the name from the data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.GetBranch(System.IO.TextReader,System.Boolean)">
            <summary>
            Gets the Branch node
            </summary>
            <param name="reader">TextReader we are working with</param>
            <param name="isRoot"></param>
            <returns>Branch object</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.GetLeaf(System.IO.TextReader)">
            <summary>
            Get the Leaf node
            </summary>
            <returns>Leaf object</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.Peek(System.IO.TextReader)">
            <summary>
            Peeks the TextReader char by char 
            </summary>
            <returns>a character</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.ReadLength(System.IO.TextReader)">
            <summary>
            Reads Length
            </summary>
            <returns>length</returns>
        </member>
        <member name="M:Bio.IO.Newick.NewickParser.ReadChar(System.IO.TextReader)">
            <summary>
            Reads current character
            </summary>
            <returns>a character</returns>
        </member>
        <member name="P:Bio.IO.Newick.NewickParser.Name">
            <summary>
            Gets the type of Parser i.e NEWICK.
            This is intended to give developers some information 
            of the parser class.
            </summary>
        </member>
        <member name="P:Bio.IO.Newick.NewickParser.Description">
            <summary>
            Gets the description of Newick parser.
            This is intended to give developers some information 
            of the parser class. This property returns a simple description of what the
            NewickParser class achieves.
            </summary>
        </member>
        <member name="P:Bio.IO.Newick.NewickParser.SupportedFileTypes">
            <summary>
            Gets a comma separated values of the possible
            file extensions for a Newick file.
            </summary>
        </member>
        <member name="P:Bio.IO.Newick.NewickParser.TreeName">
            <summary>
            Name for the tree when parsing. If not set, this will be
            set to a default value of "PhylogeneticTree"
            </summary>
        </member>
        <member name="T:Bio.IO.Nexus.NexusParser">
            <summary>
            A NexusParser reads from a source of text that is formatted according 
            to the NexusParser flat file specification, and converts the data to 
            in-memory ISequenceAlignment objects.  For advanced users, the ability 
            to select an encoding for the internal memory representation is provided. 
            There is also a default encoding for each alphabet that may be encountered.
            </summary>
        </member>
        <member name="F:Bio.IO.Nexus.NexusParser.skipBlankLines">
            <summary>
            Indicates that the parser should skip any blank line while reading the stream.
            </summary>
        </member>
        <member name="F:Bio.IO.Nexus.NexusParser.line">
            <summary>
            Stores the last line read by the reader
            </summary>
        </member>
        <member name="M:Bio.IO.Nexus.NexusParser.Parse(System.IO.Stream)">
            <summary>
            Parses a list of biological sequence alignment texts from a reader.
            </summary>
            <param name="stream">A stream for a biological sequence alignment text.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:Bio.IO.Nexus.NexusParser.ParseOne(System.IO.Stream)">
            <summary>
            Parse a single sequence alignment from the stream.
            </summary>
            <param name="stream">Stream</param>
            <returns>Sequence alignment</returns>
        </member>
        <member name="M:Bio.IO.Nexus.NexusParser.ParseOne(System.IO.TextReader)">
            <summary>
            Parses a single biological sequence alignment text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:Bio.IO.Nexus.NexusParser.ReadNextLine(System.IO.TextReader)">
            <summary>
            Reads next line considering
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.Nexus.NexusParser.GetTokens(System.String)">
            <summary>
            Split the line and return the tokens in the line
            </summary>
            <param name="line">Line to be split</param>
            <returns>Tokens in line</returns>
        </member>
        <member name="M:Bio.IO.Nexus.NexusParser.ParseHeader(System.IO.TextReader)">
            <summary>
            Parse Nexus Header
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
        </member>
        <member name="M:Bio.IO.Nexus.NexusParser.ParseTaxaBlock(System.IO.TextReader)">
            <summary>
            Gets the list of sequence titles
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <returns>List of sequence IDs</returns>
        </member>
        <member name="M:Bio.IO.Nexus.NexusParser.ParseCharacterBlock(System.IO.TextReader,System.Collections.Generic.IList{System.String})">
            <summary>
            Parse the Sequence data in the block
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <param name="IDs">List of sequence IDs</param>
            <returns>parse sequence in alignment</returns>
        </member>
        <member name="P:Bio.IO.Nexus.NexusParser.Name">
            <summary>
            Gets the name of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser type.
            </summary>
        </member>
        <member name="P:Bio.IO.Nexus.NexusParser.Description">
            <summary>
            Gets the description of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.Nexus.NexusParser.Alphabet">
            <summary>
            Gets or sets alphabet to use for sequences in parsed ISequenceAlignment objects.
            </summary>
        </member>
        <member name="P:Bio.IO.Nexus.NexusParser.SupportedFileTypes">
            <summary>
            Gets the file extensions that the parser implementation
            will support.
            </summary>
        </member>
        <member name="T:Bio.IO.Phylip.PhylipParser">
            <summary>
            A PhylipParser reads from a source of text that is formatted according 
            to the PhylipParser flat file specification, and converts the data to 
            in-memory ISequenceAlignment objects.
            </summary>
        </member>
        <member name="F:Bio.IO.Phylip.PhylipParser.skipBlankLines">
            <summary>
            Indicates that the parser should skip any blank line while reading the stream.
            </summary>
        </member>
        <member name="F:Bio.IO.Phylip.PhylipParser.line">
            <summary>
            Stores the last line read by the reader
            </summary>
        </member>
        <member name="M:Bio.IO.Phylip.PhylipParser.Parse(System.IO.Stream)">
            <summary>
            Parses a list of biological sequence alignment texts from a reader.
            </summary>
            <param name="stream">A stream for a biological sequence alignment text.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:Bio.IO.Phylip.PhylipParser.ParseOne(System.IO.Stream)">
            <summary>
            Parses a single biological sequence alignment text from a reader.
            </summary>
            <param name="stream">A stream for a biological sequence alignment text.</param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:Bio.IO.Phylip.PhylipParser.ParseOne(System.IO.TextReader)">
            <summary>
            Parses a single biological sequence alignment text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:Bio.IO.Phylip.PhylipParser.ReadNextLine(System.IO.TextReader)">
            <summary>
            Reads next line considering
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.Phylip.PhylipParser.Name">
            <summary>
            Gets the name of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser type.
            </summary>
        </member>
        <member name="P:Bio.IO.Phylip.PhylipParser.Description">
            <summary>
            Gets the description of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.Phylip.PhylipParser.Alphabet">
            <summary>
            Gets or sets alphabet to use for sequences in parsed ISequenceAlignment objects.
            </summary>
        </member>
        <member name="P:Bio.IO.Phylip.PhylipParser.SupportedFileTypes">
            <summary>
            Gets the file extensions that the parser implementation
            will support.
            </summary>
        </member>
        <member name="T:Bio.IO.SAM.PairedRead">
            <summary>
            Class to hold Paired reads.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.PairedRead.alignedSequences">
            <summary>
            holds reads.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.PairedRead.GetPairedReadType(Bio.IO.SAM.PairedRead,System.String)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="pairedRead">Paired read.</param>
            <param name="libraryName">library name.</param>
        </member>
        <member name="M:Bio.IO.SAM.PairedRead.GetPairedReadType(Bio.IO.SAM.PairedRead,System.String,System.Boolean)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="pairedRead">Paired read.</param>
            <param name="libraryName">library name.</param>
            <param name="useInsertLengthOfReads">
            If this flag is set to true then insert length will be calculated from read1 and read2,
            else InsertLength in spcified paired read will be used.
            </param>
        </member>
        <member name="M:Bio.IO.SAM.PairedRead.GetPairedReadType(Bio.IO.SAM.PairedRead,Bio.CloneLibraryInformation)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="pairedRead">Paired read.</param>
            <param name="libraryInfo">Library information.</param>
        </member>
        <member name="M:Bio.IO.SAM.PairedRead.GetPairedReadType(Bio.IO.SAM.PairedRead,Bio.CloneLibraryInformation,System.Boolean)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="pairedRead">Paired read.</param>
            <param name="libraryInfo">Library information.</param>
            <param name="useInsertLengthOfReads">
            If this flag is set to true then insert length will be calculated from read1 and read2,
            else InsertLength in spcified paired read will be used.
            </param>
        </member>
        <member name="M:Bio.IO.SAM.PairedRead.GetPairedReadType(Bio.IO.SAM.PairedRead,System.Single,System.Single)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="pairedRead">Paired read.</param>
            <param name="meanLengthOfInsert">Mean of the insertion length.</param>
            <param name="standardDeviationOfInsert">Standard deviation of insertion length.</param>
        </member>
        <member name="M:Bio.IO.SAM.PairedRead.GetPairedReadType(Bio.IO.SAM.PairedRead,System.Single,System.Single,System.Boolean)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="pairedRead">Paired read.</param>
            <param name="meanLengthOfInsert">Mean of the insertion length.</param>
            <param name="standardDeviationOfInsert">Standard deviation of insertion length.</param>
            <param name="useInsertLengthOfReads">
            If this flag is set to true then insert length will be calculated from read1 and read2,
            else InsertLength in spcified paired read will be used.
            By default this will be set to false.
            </param>
        </member>
        <member name="M:Bio.IO.SAM.PairedRead.GetPairedReadType(Bio.IO.SAM.SAMAlignedSequence,Bio.IO.SAM.SAMAlignedSequence,System.String)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="read1">First aligned sequence.</param>
            <param name="read2">Second aligned sequence.</param>
            <param name="libraryName">library name.</param>
        </member>
        <member name="M:Bio.IO.SAM.PairedRead.GetPairedReadType(Bio.IO.SAM.SAMAlignedSequence,Bio.IO.SAM.SAMAlignedSequence,Bio.CloneLibraryInformation)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="read1">First aligned sequence.</param>
            <param name="read2">Second aligned sequence.</param>
            <param name="libraryInfo">Library information.</param>
        </member>
        <member name="M:Bio.IO.SAM.PairedRead.GetPairedReadType(Bio.IO.SAM.SAMAlignedSequence,Bio.IO.SAM.SAMAlignedSequence,System.Single,System.Single)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="read1">First aligned sequence.</param>
            <param name="read2">Second aligned sequence.</param>
            <param name="meanLengthOfInsert">Mean of the insertion length.</param>
            <param name="standardDeviationOfInsert">Standard deviation of insertion length.</param>
        </member>
        <member name="M:Bio.IO.SAM.PairedRead.GetInsertLength(Bio.IO.SAM.SAMAlignedSequence,Bio.IO.SAM.SAMAlignedSequence)">
            <summary>
            Gets the insert length of reads.
            </summary>
            <param name="read1">First read.</param>
            <param name="read2">Second read.</param>
        </member>
        <member name="M:Bio.IO.SAM.PairedRead.GetInsertLength(Bio.IO.SAM.SAMAlignedSequence,Bio.IO.SAM.SAMAlignedSequence,System.Boolean)">
            <summary>
            Gets the insert length of reads.
            </summary>
            <param name="read1">First read.</param>
            <param name="read2">Second read.</param>
            <param name="validate">Validates the reads before calculating the insert length.</param>
        </member>
        <member name="M:Bio.IO.SAM.PairedRead.IsForwardRead(Bio.IO.SAM.SAMAlignedSequence)">
            <summary>
            Gets a boolean value which indicates that whether the specified read is forward oriented or not.
            </summary>
            <param name="read">Aligned Sequence.</param>
        </member>
        <member name="M:Bio.IO.SAM.PairedRead.IsReverseRead(Bio.IO.SAM.SAMAlignedSequence)">
            <summary>
            Gets a boolean value which indicates that whether the specified read is reverse oriented or not.
            </summary>
            <param name="read">Aligned Sequence.</param>
        </member>
        <member name="P:Bio.IO.SAM.PairedRead.Reads">
            <summary>
            Gets the list of paired reads.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.PairedRead.Read1">
            <summary>
            First aligned sequence or read.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.PairedRead.Read2">
            <summary>
            Second aligned sequence or read.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.PairedRead.PairedType">
            <summary>
            Paired type <see cref="T:Bio.IO.SAM.PairedReadType"/>
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.PairedRead.InsertLength">
            <summary>
            Gets or sets the insert length.
            </summary>
        </member>
        <member name="T:Bio.IO.SAM.PairedReadType">
            <summary>
            Specifies the type of paired read.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.PairedReadType.Normal">
            <summary>
            Normal - Reads are aligning to same reference sequence 
                    and insertion length is with in the limit. 
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.PairedReadType.Orphan">
            <summary>
            Orphan - One read is not aligned to any reference sequence.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.PairedReadType.Chimera">
            <summary>
            Chimera - Reads are not aligning to same reference sequence.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.PairedReadType.StructuralAnomaly">
            <summary>
            StructuralAnomaly - Reads are not in proper orientation.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.PairedReadType.LengthAnomaly">
            <summary>
            LengthAnomaly - Insertion length is either too short or too long.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.PairedReadType.MultipleHits">
            <summary>
            MultipleHits - A mapped read pair is stored in more than two aligned sequences.
            </summary>
        </member>
        <member name="T:Bio.IO.SAM.ReferenceSequenceInfo">
            <summary>
            Holds the reference sequence information.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.ReferenceSequenceInfo.#ctor">
            <summary>
            Initializes a new instance of ReferenceSequenceInfo class.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.ReferenceSequenceInfo.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of ReferenceSequenceInfo class with specified name and length.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.ReferenceSequenceInfo.Name">
            <summary>
            Gets or sets the name of the reference sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.ReferenceSequenceInfo.Length">
            <summary>
            Gets or sets the length of the reference sequence.
            </summary>
        </member>
        <member name="T:Bio.IO.SAM.SAMAlignedSequence">
            <summary>
            Class to hold Reads or aligned sequence or query sequence in SAM Alignment.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequence.seqHeader">
            <summary>
            SAM aligned sequence header.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequence.metadata">
            <summary>
            Holds metadata of this aligned sequence.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequence.sequences">
            <summary>
            Holds aligned sequence.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequence.SetPreValidatedRName(System.String)">
            <summary>
            Sets the RName using a name that has already been validated as valid, and so does not need to be checked
            against the regular expression.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequence.SetPreValidatedCIGAR(System.String)">
            <summary>
            Set a pre-validated extended cigar string, the alignment length and bin are still calculated
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequence.SetPreValidatedMRNM(System.String)">
            <summary>
            Set the mate reference sequence name assuming the value is already valid.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequence.#ctor">
            <summary>
            Creates new instance of SAMAlignedSequence.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequence.#ctor(Bio.IO.SAM.SAMAlignedSequenceHeader)">
            <summary>
            Creates new instance of SAMAlignedSequence with specified SAMAlignedSequenceHeader.
            </summary>
            <param name="seqHeader"></param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequence.GetEncodedQualityScores">
            <summary>
            Gets encoded quality scores.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequence.GetQualityScores">
            <summary>
            Gets Phred base quality scores.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequence.QuerySequence">
            <summary>
            Gets or sets read/query/aligned sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequence.QName">
            <summary>
            Query pair name if paired; or Query name if unpaired.
            </summary>  
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequence.Flag">
            <summary>
            SAM flags.
            <see cref="T:Bio.IO.SAM.SAMFlags"/>
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequence.RName">
            <summary>
            Reference sequence name.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequence.Pos">
            <summary>
            One-based leftmost position/coordinate of the clipped sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequence.Bin">
            <summary>
            Gets bin depending on POS and CIGAR values.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequence.RefEndPos">
            <summary>
            Gets one based alignment end position of reference sequence depending on CIGAR Value.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequence.MapQ">
            <summary>
            Mapping quality (phred-scaled posterior probability that the 
            mapping position of this read is incorrect).
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequence.CIGAR">
            <summary>
            Extended CIGAR string.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequence.MRNM">
            <summary>
            Mate reference sequence name. 
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequence.MPos">
            <summary>
            One-based leftmost mate position of the clipped sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequence.ISize">
            <summary>
            Inferred insert size.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequence.OptionalFields">
            <summary>
            Optional fields.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequence.Metadata">
            <summary>
            Metadata of this aligned sequence.
            SAMAlignedSequenceHeader is stored with the key "SAMAlignedSequenceHeader".
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequence.Sequences">
            <summary>
            Always returns QuerySequence in a list.
            </summary>
        </member>
        <member name="T:Bio.IO.SAM.SAMAlignedSequenceHeader">
            <summary>
            SAMAlignedSequenceHeader holds aligned sequence headers of the sam file format.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.RNameRegxExprPattern">
            <summary>
            Regular expression pattern for RName.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.CIGARRegxExprPattern">
            <summary>
            Regular expression pattern for CIGAR.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.MRNMRegxExprPattern">
            <summary>
             Regular expression pattern for MRNM.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.POS_MaxValue">
            <summary>
            Represents the largest possible value of POS. This field is constant.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.POS_MinValue">
            <summary>
            Represents the smallest possible value of POS. This field is constant.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.MPOS_MaxValue">
            <summary>
            Represents the largest possible value of MPOS. This field is constant.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.MPOS_MinValue">
            <summary>
            Represents the smallest possible value of MPOS. This field is constant.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.ISize_MaxValue">
            <summary>
            Represents the largest possible value of ISize. This field is constant.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.ISize_MinValue">
            <summary>
            Represents the smallest possible value of ISize. This field is constant.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.MapQ_MaxValue">
            <summary>
            Represents the largest possible value of MapQ. This field is constant.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.MapQ_MinValue">
            <summary>
            Represents the smallest possible value of MapQ. This field is constant.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.DefaultReadLength">
            <summary>
            Default value for read/query length.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.DefaultCIGAR">
            <summary>
            Default value for CIGAR.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.QNameIllegalCharacters">
            <summary>
            Regular expression pattern for QName.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.RNameRegxExpr">
            <summary>
            Regular Expression object for RName.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.CIGARRegxExpr">
            <summary>
            Regular Expression object for CIGAR.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.MRNMRegxExpr">
            <summary>
            Regular Expression object for MRNM.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.qname">
            <summary>
            Holds Query pair name if paired; or Query name if unpaired.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.rname">
            <summary>
            Holds Reference sequence name.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.pos">
            <summary>
            Holds left co-ordinate of alignment.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.mapq">
            <summary>
            Holds MAPping Quality of alignment.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.mpos">
            <summary>
            Holds Leftmost mate position of the clipped sequence.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.isize">
            <summary>
            Holds inferred insert size.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.alignmentLength">
            <summary>
            Holds the length of the alignment determined by the CIGAR value if available or the default read length if not.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.cigar">
            <summary>
            Holds CIGAR value.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.mrnm">
            <summary>
            Holds Mate Reference sequence name (MRNM).
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignedSequenceHeader.bin">
            <summary>
            Holds bin number.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.#ctor">
            <summary>
            Creates new SAMAlignedSequenceHeader instance.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.SetPreValidatedRName(System.String)">
            <summary>
            Set the name of the reference without validating it by a regular expression, useful
            when the same value is being repeatedly used.
            </summary>
            <param name="rName"></param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.SetPreValidatedCIGAR(System.String)">
            <summary>
            Sets the value of an extended CIGAR string known to be valid
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.SetPreValidatedMRNM(System.String)">
            <summary>
            Set the MRNM value without validating that it is a valid value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.GetFlag(System.Int32)">
            <summary>
            Gets the SAMFlag for the specified integer value.
            </summary>
            <param name="value">Value for which the SAMFlag is required.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.GetFlag(System.String)">
            <summary>
            Gets the SAMFlag for the specified string value.
            </summary>
            <param name="value">Value for which the SAMFlag is required.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.RegionToBin(System.Int32,System.Int32)">
            <summary>
            Gets Bin for the specified region.
            Note that this method returns zero for negative values.
            </summary>
            <param name="start">Zero based start co-ordinate of alignment.</param>
            <param name="end">Zero based end co-ordinate of the alignment.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.IsValidQName(System.String)">
            <summary>
            Validates QName.
            </summary>
            <param name="qname">QName value to validate.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.IsValidRName(System.String)">
            <summary>
            Validates RName.
            </summary>
            <param name="rname">RName value to validate.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.IsValidPos(System.Int32)">
            <summary>
            Validates Pos.
            </summary>
            <param name="pos">Position value to validate.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.IsValidMapQ(System.Int32)">
            <summary>
            Validates MapQ.
            </summary>
            <param name="mapq">MapQ value to validate.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.IsValidCIGAR(System.String)">
            <summary>
            Validates CIGAR.
            </summary>
            <param name="cigar">CIGAR value to validate.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.IsValidMRNM(System.String)">
            <summary>
            Validates MRNM.
            </summary>
            <param name="mrnm">MRNM value to validate.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.IsValidMPos(System.Int32)">
            <summary>
            Validates MPos.
            </summary>
            <param name="mpos">MPOS value to validate.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.IsValidISize(System.Int32)">
            <summary>
            Validates ISize.
            </summary>
            <param name="isize">ISIZE value to validate.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.GetBin">
            <summary>
            Returns the bin number.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignedSequenceHeader.GetRefSeqAlignmentLengthFromCIGAR">
            <summary>
            Gets the reference sequence alignment length depending on the CIGAR value.
            </summary>
            <returns>Length of the alignment.</returns>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequenceHeader.QName">
            <summary>
            Query pair name if paired; or Query name if unpaired.
            </summary>  
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequenceHeader.Flag">
            <summary>
            SAM flags.
            <see cref="T:Bio.IO.SAM.SAMFlags"/>
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequenceHeader.RName">
            <summary>
            Reference sequence name.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequenceHeader.Pos">
            <summary>
            One-based leftmost position/coordinate of the aligned sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequenceHeader.MapQ">
            <summary>
            Mapping quality (phred-scaled posterior probability that the 
            mapping position of this read is incorrect).
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequenceHeader.CIGAR">
            <summary>
            Extended CIGAR string.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequenceHeader.MRNM">
            <summary>
            Mate reference sequence name. 
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequenceHeader.MPos">
            <summary>
            One-based leftmost mate position of the clipped sequence.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequenceHeader.ISize">
            <summary>
            Inferred insert size.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequenceHeader.Bin">
            <summary>
            Gets the Bin depending on the POS and CIGAR.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequenceHeader.RefEndPos">
            <summary>
            Gets one based alignment end position of reference sequence depending on CIGAR Value.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignedSequenceHeader.OptionalFields">
            <summary>
            Optional fields.
            </summary>
        </member>
        <member name="T:Bio.IO.SAM.SAMAlignmentHeader">
            <summary>
            Class to hold SAM Headers.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMAlignmentHeader.MandatoryTagsForFieldTypes">
            <summary>
            Holds the mapping of record field types to its mandatory tags.
            This will be used in the IsValid() method to validate the specified SAMAlignmentHeader.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignmentHeader.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignmentHeader.#ctor">
            <summary>
            Creates SAMAlignmentHeader instance.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignmentHeader.IsValid">
            <summary>
            VAlidates mandatory tags.
            </summary>
            <returns>Returns empty string if mandatory tags are present; otherwise error message.</returns>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignmentHeader.GetReferenceSequenceRanges">
            <summary>
            Returns list of SequenceRanges objects which represents ReferenceSequenceInfo present in this header. 
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMAlignmentHeader.GetReferenceSequencesInfoFromSQHeader">
            <summary>
            Returns list of reference sequences name and length present in SQ header. 
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignmentHeader.RecordFields">
            <summary>
            List of record fields.
            It holds all available record fields except comments.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignmentHeader.ReferenceSequences">
            <summary>
            Holds the list of reference sequences name and length.
            SAMParser update this property from SQ header if present, else this will be updated from the each 
            alignment information in this case length of reference sequence will be unknown thus set to zero.
            BAMParser update this property from reference information block and not from the SQ header.
            BAMFormatter uses this information to write reference information block.
            SAMFormatter does not requires this information, thus ignores this info.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMAlignmentHeader.Comments">
            <summary>
            List of comment headers.
            </summary>
        </member>
        <member name="T:Bio.IO.SAM.SAMDnaAlphabet">
            <summary>
            SAM Dna Alphabet, Supports "=ACMGRSVTWYHKDBN." symbols.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMDnaAlphabet.Instance">
            <summary>
            Singleton instance of SAMDnaAlphabet.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMDnaAlphabet.#ctor">
            <summary>
            Initializes a new instance of the SAMDnaAlphabet class.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMDnaAlphabet.CheckIsAmbiguous(System.Byte)">
            <summary>
            Checks if the provided item is an ambiguous character or not
            Note: for '=' and '.' symbols this method returns false.
            </summary>
            <param name="item">Item to be checked</param>
            <returns>True if the specified item is a ambiguous</returns>
        </member>
        <member name="P:Bio.IO.SAM.SAMDnaAlphabet.Equal">
            <summary>
            Gets the SAM symbol "=" (Equal to reference symbol)
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMDnaAlphabet.Dot">
            <summary>
            Gets symbol "." (Space holder to represent Intron).
            As per the Specification Version 0.1.2-draft (20090820) and 1.4-r985
            In a split alignment "..." represents Intron.
            </summary>
        </member>
        <member name="T:Bio.IO.SAM.SAMFlags">
            <summary>
            SAM Flags.
            This enum represents the bitwise flags of the SAM format.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMFlags.PairedRead">
            <summary>
            0x0001 The read is paired in sequencing, no matter whether it is mapped in a pair.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMFlags.MappedInProperPair">
            <summary>
            0x0002 The read is mapped in a proper pair (depends on the protocol, normally inferred during alignment).
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMFlags.UnmappedQuery">
            <summary>
            0x0004 The query sequence itself is unmapped.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMFlags.UnmappedMate">
            <summary>
            0x0008 The mate is unmapped.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMFlags.QueryOnReverseStrand">
            <summary>
            0x0010 Strand of the query (0 for forward; 1 for reverse strand).
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMFlags.MateOnReverseStrand">
            <summary>
            0x0020 Strand of the mate.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMFlags.FirstReadInPair">
            <summary>
            0x0040 The read is the first read in a pair.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMFlags.SecondReadInPair">
            <summary>
            0x0080 The read is the second read in a pair.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMFlags.NonPrimeAlignment">
            <summary>
            0x0100 The alignment is not primary (a read having split hits may have multiple primary alignment records).
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMFlags.QualityCheckFailure">
            <summary>
            0x0200 The read fails platform/vendor quality checks.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMFlags.Duplicate">
            <summary>
            0x0400 The read is either a PCR duplicate or an optical duplicate.
            </summary>
        </member>
        <member name="T:Bio.IO.SAM.SAMFormatter">
            <summary>
            Writes a SequenceAlignmentMap to a particular location, usually a file. 
            The output is formatted according to the SAM file format specification 1.4. 
            A method is also provided for quickly accessing the content in string 
            form for applications that do not need to first write to file.
            Documentation for the latest SAM file format can be found at
            http://samtools.sourceforge.net/SAM1.pdf
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMFormatter.AlignedSequenceFormat">
            <summary>
            Holds the format string needed for writing aligned sequence.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMFormatter.OptionalFieldFormat">
            <summary>
            Holds the format string needed for writing optional fields of aligned sequence.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMFormatter.Format(System.IO.Stream,Bio.Algorithms.Alignment.ISequenceAlignment)">
            <summary>
            Writes an ISequenceAlignment to the location specified by the stream.
            </summary>
            <param name="stream">The Stream used to write the formatted sequence alignment text.</param>
            <param name="sequenceAlignment">The sequence alignment to format.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMFormatter.Format(System.IO.Stream,System.Collections.Generic.IEnumerable{Bio.Algorithms.Alignment.ISequenceAlignment})">
            <summary>
            Write a collection of ISequenceAlignments to a file.
            </summary>
            <param name="stream">The name of the file to write the formatted sequence alignments.</param>
            <param name="sequenceAlignments">The sequenceAlignments to write.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMFormatter.WriteHeader(System.IO.TextWriter,Bio.IO.SAM.SAMAlignmentHeader)">
            <summary>
            Writes specified SAMAlignedHeader to specified text writer.
            </summary>
            <param name="writer">Text Writer</param>
            <param name="header">Header to write.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMFormatter.WriteSAMAlignedSequence(System.IO.TextWriter,Bio.Algorithms.Alignment.IAlignedSequence)">
            <summary>
            Writes SAMAlignedSequence to specified text writer.
            </summary>
            <param name="writer">Text writer.</param>
            <param name="alignedSequence">SAM aligned sequence to write</param>
        </member>
        <member name="P:Bio.IO.SAM.SAMFormatter.Name">
            <summary>
            Gets the name of the sequence alignment formatter being
            implemented. This is intended to give the developer some
            information of the formatter type.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMFormatter.Description">
            <summary>
            Gets the description of the sequence alignment formatter being
            implemented. This is intended to give the developer some 
            information of the formatter.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMFormatter.SupportedFileTypes">
            <summary>
            Gets the file extensions that the formatter implementation
            will support.
            </summary>
        </member>
        <member name="T:Bio.IO.SAM.SAMOptionalField">
            <summary>
            This class holds SAM optional field.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMOptionalField.TagRegexExprPattern">
            <summary>
            Holds regular expression pattern of Tag.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMOptionalField.VTypeAllowableValues">
            <summary>
            Holds allowable values for Vtype.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMOptionalField.ValueIllegalCharacters">
            <summary>
            Holds illegal characters for value.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMOptionalField.TagRegexExpr">
            <summary>
            Holds regular expression for Tag.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMOptionalField.tagValue">
            <summary>
            Holds tag value of the option field.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMOptionalField.valueType">
            <summary>
            Holds type of the value present in the "Value" property.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMOptionalField.fieldValue">
            <summary>
            Holds value of the optional field.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMOptionalField.IsValidTag(System.String)">
            <summary>
            Validates Tag.
            </summary>
            <param name="tag">Tag value to validate.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMOptionalField.ValidateTagRegex(System.String)">
            <summary>
            Validates that a TAG is a valid regex by converting to an integer and testing it is in the appropriate range
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.SAM.SAMOptionalField.IsValidVType(System.String)">
            <summary>
            Validates VType.
            </summary>
            <param name="vtype">VType value to validate.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMOptionalField.IsValidValue(System.String)">
            <summary>
            Validates Value.
            </summary>
            <param name="value">Value to validate.</param>
        </member>
        <member name="P:Bio.IO.SAM.SAMOptionalField.Tag">
            <summary>
            Tag of the option field.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMOptionalField.VType">
            <summary>
            Type of the value present in the "Value" property.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMOptionalField.Value">
            <summary>
            Value of the optional field.
            </summary>
        </member>
        <member name="T:Bio.IO.SAM.SAMParser">
            <summary>
            A SAMParser reads from a source of text that is formatted according to the SAM
            file specification (v1.4-r985), and converts the data to in-memory SequenceAlignmentMap object.
            For advanced users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered.
            Documentation for the latest SAM file format can be found at
            http://samtools.sourceforge.net/SAM1.pdf
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMParser.HeaderLinePattern">
            <summary>
            Constant to hold SAM alignment header line pattern.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMParser.AsteriskAsByte">
            <summary>
            An asterisk encoded as a byte
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMParser.OptionalFieldLinePattern">
            <summary>
            Constant to hold SAM optional filed line pattern.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMParser.QualityFormatType">
            <summary>
            Holds the qualitative value type.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMParser.OptionalFieldRegex">
            <summary>
            Holds optional field regular expression object.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMParser.TabDelim">
            <summary>
            Constant for tab and space delimiter.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SAMParser.ColonDelim">
            <summary>
             Constant for colon delimiter.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMParser.#ctor">
            <summary>
            The default constructor which chooses the default encoding based on the alphabet.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMParser.ParseSAMHeader(System.IO.Stream)">
            <summary>
            Parses SAM alignment header from specified stream.
            </summary>
            <param name="stream">stream.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMParser.ParseSAMHeader(System.IO.TextReader)">
            <summary>
            Parses SAM alignment header from specified text reader.
            </summary>
            <param name="reader">Text reader.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMParser.ParseSequence(System.String)">
            <summary>
            Parse a single sequence.
            </summary>
            <param name="bioText">A string representing a sequence alignment text.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMParser.ParseQualityNSequence(Bio.IO.SAM.SAMAlignedSequence,Bio.IAlphabet,System.String,System.String)">
            <summary>
            Parses sequence data and quality values and updates SAMAlignedSequence instance.
            </summary>
            <param name="alignedSeq">SAM aligned Sequence.</param>
            <param name="alphabet">Alphabet of the sequence to be created.</param>
            <param name="sequencedata">Sequence data.</param>
            <param name="qualitydata">Quality values.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMParser.ParseQualityNSequence(Bio.IO.SAM.SAMAlignedSequence,Bio.IAlphabet,System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Parses sequence data and quality values and updates SAMAlignedSequence instance.
            </summary>
            <param name="alignedSeq">SAM aligned Sequence.</param>
            <param name="alphabet">Alphabet of the sequence to be created.</param>
            <param name="sequencedata">Sequence data.</param>
            <param name="qualitydata">Quality values.</param>
            <param name="validate">Validation needed</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMParser.Bio#IO#IParser{Bio#Algorithms#Alignment#ISequenceAlignment}#Parse(System.IO.Stream)">
            <summary>
            Parses a list of sequence alignment texts from a stream.
            </summary>
            <param name="stream">A stream for a sequence alignment text.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:Bio.IO.SAM.SAMParser.ParseOne(System.IO.Stream)">
            <summary>
            Parses a sequence alignment texts from a stream.
            </summary>
            <param name="stream">A stream for a sequence alignment text.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:Bio.IO.SAM.SAMParser.Parse(System.IO.Stream)">
            <summary>
            Parses a sequence alignment texts from a file.
            </summary>
            <param name="stream">Text reader.</param>
            <returns>SequenceAlignmentMap object.</returns>
        </member>
        <member name="M:Bio.IO.SAM.SAMParser.ParseOneWithSpecificFormat(System.IO.TextReader)">
            <summary>
            Parses alignments in SAM format from a reader into a SequenceAlignmentMap object.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <returns>A new SequenceAlignmentMap instance containing parsed data.</returns>
        </member>
        <member name="M:Bio.IO.SAM.SAMParser.ParseSequence(System.String,Bio.IAlphabet)">
            <summary>
            Parse a single sequencer.
            </summary>
            <param name="bioText">sequence alignment text.</param>
            <param name="alphabet">Alphabet of the sequences.</param>
        </member>
        <member name="M:Bio.IO.SAM.SAMParser.ReadNextLine(System.IO.TextReader)">
            <summary>
            Reads next line considering
            </summary>
            <returns>The read line.</returns>
        </member>
        <member name="P:Bio.IO.SAM.SAMParser.Name">
            <summary>
            Gets the name of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser type.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMParser.Description">
            <summary>
            Gets the description of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMParser.Alphabet">
            <summary>
            The alphabet to use for sequences in parsed SequenceAlignmentMap objects.
            Always returns singleton instance of SAMDNAAlpabet.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMParser.SupportedFileTypes">
            <summary>
            Gets the file extensions that the parser implementation
            will support.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMParser.RefSequences">
            <summary>
            Reference sequences, used to resolve "=" symbol in the sequence data.
            </summary>
        </member>
        <member name="T:Bio.IO.SAM.SAMRecordField">
            <summary>
            This class holds SAM record fields.
            Record fields are present in the SAM header.
            This class can hold one header line of the SAM header.
            For example, consider the following header line.
            @SQ	SN:chr20	LN:62435964
            In this example SQ is the Type code.
            SN:chr20  and LN:62435964 are SAMRecordFieldTags.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMRecordField.#ctor">
            <summary>
            Creates SAMRecordField instance.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMRecordField.#ctor(System.String)">
            <summary>
            Creates SAMRecordField with the specified type code.
            </summary>
            <param name="typecode">Type code.</param>
        </member>
        <member name="P:Bio.IO.SAM.SAMRecordField.Typecode">
            <summary>
            Record field type code.
            for example. HD, SQ.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMRecordField.Tags">
            <summary>
            List of SAM RecordFieldTags.
            </summary>
        </member>
        <member name="T:Bio.IO.SAM.SAMRecordFieldTag">
            <summary>
            This class holds the tag in the header lines.
            For example, consider the following header line.
            @HD	VN:1.0
            In this example VN:1.0 is the SAMRecordFieldTag.
            Where VN is stored in Tag property and 1.0 is stored 
            in the value property of this class.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SAMRecordFieldTag.#ctor(System.String,System.String)">
            <summary>
            Creates new SAMRecordFieldTag instance.
            </summary>
            <param name="tag">Record field tag.</param>
            <param name="value">Record field value.</param>
        </member>
        <member name="P:Bio.IO.SAM.SAMRecordFieldTag.Tag">
            <summary>
            Record field tag.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SAMRecordFieldTag.Value">
            <summary>
            Record field tag.
            </summary>
        </member>
        <member name="T:Bio.IO.SAM.SequenceAlignmentMap">
            <summary>
            Class to hold sequence alignment map (SAM) structure.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SequenceAlignmentMap.header">
            <summary>
            Holds SAM header.
            </summary>
        </member>
        <member name="F:Bio.IO.SAM.SequenceAlignmentMap.querySequences">
            <summary>
            Holds list of query sequences present in this SAM object.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SequenceAlignmentMap.#ctor">
            <summary>
            Default constructor.
            Creates SequenceAlignmentMap instance.
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SequenceAlignmentMap.#ctor(Bio.IO.SAM.SAMAlignmentHeader)">
            <summary>
            Creates SequenceAlignmentMap instance.
            </summary>
            <param name="header">SAM header.</param>
        </member>
        <member name="M:Bio.IO.SAM.SequenceAlignmentMap.GetRefSequences">
            <summary>
            Returns list of reference sequences present in this header. 
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SequenceAlignmentMap.GetReferenceSequenceRanges">
            <summary>
            Returns list of SequenceRanges objects which represents reference sequences present in the header. 
            </summary>
        </member>
        <member name="M:Bio.IO.SAM.SequenceAlignmentMap.GetPairedReads">
            <summary>
            Gets the paired reads.
            </summary>
            <returns>List of paired read.</returns>
        </member>
        <member name="M:Bio.IO.SAM.SequenceAlignmentMap.GetPairedReads(System.String)">
            <summary>
            Gets the paired reads.
            </summary>
            <param name="libraryName">Name of the library present in CloneLibrary.</param>
            <returns>List of paired read.</returns>
        </member>
        <member name="M:Bio.IO.SAM.SequenceAlignmentMap.GetPairedReads(Bio.CloneLibraryInformation)">
            <summary>
            Gets the paired reads.
            </summary>
            <param name="libraryInfo">Library information.</param>
            <returns>List of paired read.</returns>
        </member>
        <member name="M:Bio.IO.SAM.SequenceAlignmentMap.GetPairedReads(System.Single,System.Single)">
            <summary>
            Gets the paired reads.
            </summary>
            <param name="meanLengthOfInsert">Mean of the insert length.</param>
            <param name="standardDeviationOfInsert">Standard deviation of insert length.</param>
            <returns>List of paired read.</returns>
        </member>
        <member name="M:Bio.IO.SAM.SequenceAlignmentMap.UpdateType(System.Collections.Generic.IEnumerable{Bio.IO.SAM.PairedRead},System.Double,System.Int32)">
            <summary>
            This Method calculates mean and standard deviation from the available reads
            and then using this information updates the type of reads.
            </summary>
            <param name="allreads">All reads.</param>
            <param name="sum">Pre calculated sum of insert length of reads 
            (invalid in calculation mean and std deviation) if available, else pass 0.</param>
            <param name="count">Pre calculated count of reads (invalid in calculation mean and std deviation)
            if available, else pass 0.</param>
        </member>
        <member name="M:Bio.IO.SAM.SequenceAlignmentMap.GetInMemoryPairedReads(System.Single,System.Single,System.Boolean)">
            <summary>
            Gets the paired reads when SAMAligned sequences are in memory.
            </summary>
            <param name="meanLengthOfInsert">Mean of the insert length.</param>
            <param name="standardDeviationOfInsert">Standard deviation of insert length.</param>
            <param name="calculate">If this flag is set then mean and standard deviation will
            be calculated from the paired reads instead of specified.</param>
            <returns>List of paired read.</returns>
        </member>
        <member name="P:Bio.IO.SAM.SequenceAlignmentMap.Header">
            <summary>
            Gets the SAM header.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SequenceAlignmentMap.QuerySequences">
            <summary>
            Gets the query sequences present in this alignment.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SequenceAlignmentMap.AlignedSequences">
            <summary>
            Gets list of aligned sequences present in this alignment.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SequenceAlignmentMap.Sequences">
            <summary>
            Gets list of source sequences present in this alignment.
            Note that this method always returns an empty list.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SequenceAlignmentMap.Metadata">
            <summary>
            Gets the metadata of this alignment.
            </summary>
        </member>
        <member name="P:Bio.IO.SAM.SequenceAlignmentMap.Documentation">
            <summary>
            Gets documentation object.
            </summary>
        </member>
        <member name="T:Bio.IO.SequenceFormatters">
            <summary>
            SequenceFormatter class is an abstraction class which provides instances
            and lists of all Formatter currently supported by Bio.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceFormatters.fasta">
            <summary>
            A singleton instance of FastaFormatter class which is capable of
            saving a ISequence according to the FASTA file format.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceFormatters.fastq">
            <summary>
            A singleton instance of FastQFormatter class which is capable of
            saving a QualitativeSequence according to the FASTQ file format.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceFormatters.gff">
            <summary>
            A singleton instance of GffFormatter class which is capable of
            saving an ISequence which contains the metadata of GFF according to the GFF file format.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceFormatters.genBank">
            <summary>
            A singleton instance of GenBankFormatter class which is capable of
            saving an ISequence which contains the metadata of GenBank according to the GenBank file format.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceFormatters.allFormatters">
            <summary>
            List of all supported sequence formatters.
            </summary>
        </member>
        <member name="M:Bio.IO.SequenceFormatters.#cctor">
            <summary>
            Initializes static members of the SequenceFormatters class.
            </summary>
        </member>
        <member name="M:Bio.IO.SequenceFormatters.FindFormatterByFileName(System.String)">
            <summary>
            Returns formatter which supports the specified file.
            </summary>
            <param name="fileName">File name for which the formatter is required.</param>
            <returns>If found returns the formatter as ISequenceFormatter else returns null.</returns>
        </member>
        <member name="M:Bio.IO.SequenceFormatters.FindFormatterByName(System.String,System.String)">
            <summary>
            Returns parser which supports the specified file.
            </summary>
            <param name="fileName">File name for which the parser is required.</param>
            <param name="formatterName">Name of the formatter to use.</param>
            <returns>If found returns the formatter as ISequenceFormatter else returns null.</returns>
        </member>
        <member name="M:Bio.IO.SequenceFormatters.IsFasta(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for FASTA formats.
            </summary>
            <returns>
            True  : if it is a valid fasta file extension.
            False : if it is a in-valid fasta file extension.
            </returns>
        </member>
        <member name="M:Bio.IO.SequenceFormatters.IsFastQ(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for FastQ formats.
            </summary>
            <returns>
            True  : if it is a valid fastq file extension.
            False : if it is a in-valid fastq file extension.
            </returns>
        </member>
        <member name="M:Bio.IO.SequenceFormatters.IsGenBank(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for GenBnak formats.
            </summary>
            <returns>
            True  : if it is a valid GenBank file extension.
            False : if it is a in-valid GenBank file extension.
            </returns>
        </member>
        <member name="M:Bio.IO.SequenceFormatters.GetSequenceFormatters">
            <summary>
            Gets all registered formatters in core folder and addins (optional) folders.
            </summary>
            <returns>List of registered formatters.</returns>
        </member>
        <member name="P:Bio.IO.SequenceFormatters.Fasta">
            <summary>
            Gets an instance of FastaFormatter class which is capable of
            saving a ISequence according to the FASTA file format.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceFormatters.FastQ">
            <summary>
            Gets an instance of FastQFormatter class which is capable of
            saving a IQualitativeSequence according to the FASTQ file format.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceFormatters.Gff">
            <summary>
            Gets an instance of GffFormatter class which is capable of
            saving a ISequence which contains the metadata of gff according to the GFF file format.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceFormatters.GenBank">
            <summary>
            Gets an instance of GenBankFormatter class which is capable of
            saving a ISequence which contains the metadata of GenBank according to the GenBank file format.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceFormatters.All">
            <summary>
            Gets the list of all formatters which is supported by the framework.
            </summary>
        </member>
        <member name="T:Bio.IO.SequenceParsers">
            <summary>
            SequenceParsers class is an abstraction class which provides instances
            and lists of all Parsers currently supported by Bio.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceParsers.fasta">
            <summary>
            A singleton instance of FastAParser class which is capable of
            parsing FASTA format files.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceParsers.fastq">
            <summary>
            A singleton instance of FastQParser class which is capable of
            parsing FASTQ format files.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceParsers.gff">
            <summary>
            A singleton instance of GffParser class which is capable of
            parsing GFF format files.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceParsers.genBank">
            <summary>
            A singleton instance of GenBankParser class which is capable of
            parsing GenBank format files.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceParsers.allParsers">
            <summary>
            List of all supported sequence parsers.
            </summary>
        </member>
        <member name="M:Bio.IO.SequenceParsers.#cctor">
            <summary>
            Initializes static members of the SequenceParsers class.
            </summary>
        </member>
        <member name="M:Bio.IO.SequenceParsers.FindParserByFileName(System.String)">
            <summary>
            Finds a suitable parser that supports the specified file, opens the file and returns the parser.
            </summary>
            <param name="fileName">File name for which the parser is required.</param>
            <returns>If found returns the open parser as ISequenceParser else returns null.</returns>
        </member>
        <member name="M:Bio.IO.SequenceParsers.FindParserByName(System.String,System.String)">
            <summary>
            Returns parser which supports the specified file.
            </summary>
            <param name="fileName">File name for which the parser is required.</param>
            <param name="parserName">Name of the parser to use.</param>
            <returns>If found returns the open parser as ISequenceParser else returns null.</returns>
        </member>
        <member name="M:Bio.IO.SequenceParsers.IsFasta(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for FASTA formats.
            </summary>
            <returns>
            True  : if it is a valid fasta file extension.
            False : if it is a in-valid fasta file extension.
            </returns>
        </member>
        <member name="M:Bio.IO.SequenceParsers.IsFastQ(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for FastQ formats.
            </summary>
            <returns>
            True  : if it is a valid fastq file extension.
            False : if it is a in-valid fastq file extension.
            </returns>
        </member>
        <member name="M:Bio.IO.SequenceParsers.IsGenBank(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for GenBank formats.
            </summary>
            <returns>
            True  : if it is a valid GenBank file extension.
            False : if it is a in-valid GenBank file extension.
            </returns>
        </member>
        <member name="M:Bio.IO.SequenceParsers.GetSequenceParsers">
            <summary>
            Gets all registered parsers in core folder and addins (optional) folders.
            </summary>
            <returns>List of registered parsers.</returns>
        </member>
        <member name="P:Bio.IO.SequenceParsers.Fasta">
            <summary>
            Gets an instance of FastaParser class which is capable of
            parsing FASTA format files.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceParsers.FastQ">
            <summary>
            Gets an instance of FastQParser class which is capable of
            parsing FASTQ format files.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceParsers.Gff">
            <summary>
            Gets an instance of GffParser class which is capable of
            parsing GFF format files.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceParsers.GenBank">
            <summary>
            Gets an instance of GenBankParser class which is capable of
            parsing GenBank format files.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceParsers.All">
            <summary>
            Gets the list of all parsers which is supported by the framework.
            </summary>
        </member>
        <member name="T:Bio.IO.SequenceRangeFormatters">
            <summary>
            SequenceRangeFormatter class is an abstraction class which provides instances
            and lists of all Range-Formatter currently supported by .NET Bio.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceRangeFormatters.bed">
            <summary>
            A singleton instance of BedFormatter class which is capable of
            saving a ISequenceRange according to the BED file format.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceRangeFormatters.KnownFormatters">
            <summary>
            List of all supported Range-Formatters.
            </summary>
        </member>
        <member name="M:Bio.IO.SequenceRangeFormatters.#cctor">
            <summary>
            Initializes static members of the SequenceRangeFormatters class.
            </summary>
        </member>
        <member name="M:Bio.IO.SequenceRangeFormatters.GetSequenceRangeFormatters">
            <summary>
            Gets all registered formatters in core folder and addins (optional) folders.
            </summary>
            <returns>List of registered parsers.</returns>
        </member>
        <member name="P:Bio.IO.SequenceRangeFormatters.Bed">
            <summary>
            Gets an instance of BedFormatter class which is capable of
            saving a ISequenceRange according to the BED file format.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceRangeFormatters.All">
            <summary>
            Gets the list of all range-formatters supported by the framework.
            </summary>
        </member>
        <member name="T:Bio.IO.SequenceRangeParsers">
            <summary>
            SequenceRangeParsers class is an abstraction class which provides instances
            and lists of all Range-Parsers currently supported by .NET Bio.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceRangeParsers.bed">
            <summary>
            A singleton instance of BedParser class which is capable of
            parsing BED format files.
            </summary>
        </member>
        <member name="F:Bio.IO.SequenceRangeParsers.KnownParsers">
            <summary>
            List of all supported Range-Parsers.
            </summary>
        </member>
        <member name="M:Bio.IO.SequenceRangeParsers.#cctor">
            <summary>
            Initializes static members of the SequenceRangeParsers class.
            </summary>
        </member>
        <member name="M:Bio.IO.SequenceRangeParsers.GetSequenceRangeParsers">
            <summary>
            Gets all the registered ISequenceRangeParser types.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.SequenceRangeParsers.Bed">
            <summary>
            Gets an instance of BedParser class which is capable of
            parsing BED format files.
            </summary>
        </member>
        <member name="P:Bio.IO.SequenceRangeParsers.All">
            <summary>
            Gets the list of all Range-parsers which is supported by the framework.
            </summary>
        </member>
        <member name="T:Bio.IO.SFF.SFFParser">
            <summary>
            This class parses the Standard Flowgram Format (SFF) as defined by
            http://www.ncbi.nlm.nih.gov/Traces/trace.cgi?cmd=show&amp;f=formats&amp;m=doc&amp;s=format
            and returns in-memory ISequence objects with both sequence information and quality data in the Sanger format.
            SFF was designed by 454 Life Sciences (Roche), the Whitehead Institute for Biomedical Research and the Wellcome Trust Sanger Institute. 
            </summary>
        </member>
        <member name="M:Bio.IO.SFF.SFFParser.ParseOne(System.IO.Stream)">
            <summary>
            Parse a sequence out of a stream.
            </summary>
            <param name="stream">Stream to read from</param>
            <returns>Sequence</returns>
        </member>
        <member name="M:Bio.IO.SFF.SFFParser.Parse(System.IO.Stream)">
            <summary>
            Parses the sequences out of a stream.
            </summary>
            <param name="stream">Stream to read from</param>
            <returns>Set of sequences</returns>
        </member>
        <member name="M:Bio.IO.SFF.SFFParser.ParseOne(Bio.IO.SFF.SFFParser.SffHeader,System.IO.BinaryReader)">
            <summary>
            Parses a single sequence from the file.
            </summary>
            <param name="header">Parsed header</param>
            <param name="reader">Binary reader</param>
            <returns>Sequence</returns>
        </member>
        <member name="M:Bio.IO.SFF.SFFParser.ParseHeader(System.IO.BinaryReader)">
            <summary>
            Parses out the header from the file
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.SFF.SFFParser.C2BE(System.UInt16)">
            <summary>
            Method to convert to BigEndian for a ushort
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.SFF.SFFParser.C2BE(System.UInt32)">
            <summary>
            Method to convert to BigEndian for a uint
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.IO.SFF.SFFParser.C2BE(System.UInt64)">
            <summary>
            Method to convert to BigEndian for a ulong
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.SFF.SFFParser.Description">
            <summary>
            Description of the parser
            </summary>
        </member>
        <member name="P:Bio.IO.SFF.SFFParser.Name">
            <summary>
            Name of the parser
            </summary>
        </member>
        <member name="P:Bio.IO.SFF.SFFParser.SupportedFileTypes">
            <summary>
            Supported file formats (extensions) for this parser
            </summary>
        </member>
        <member name="P:Bio.IO.SFF.SFFParser.Alphabet">
            <summary>
            The alphabet to use for sequences (automatically set if not supplied)
            </summary>
        </member>
        <member name="T:Bio.IO.SFF.SFFParser.SffHeader">
            <summary>
            The header information included in the SFF file format.
            </summary>
        </member>
        <member name="T:Bio.IO.Snp.SimpleSnpParser">
            <summary>
            Simple SNP Parser that uses an XsvSnpReader for parsing files with 
            chromosome number, position, allele 1 and allele 2 in tab separated 
            columns into sequences with the first allele.
            </summary>
        </member>
        <member name="T:Bio.IO.Snp.SnpParser">
            <summary>
            Implements common methods for parsing SNPs from a SnpReader into ISequences. 
            This reads Snp items from the SnpReader and stores either of the two alleles
            in a sparse sequence at the same position as the chromosome position.
            Extending classes have to implement the 
            SnpReader GetSnpReader(TextReader reader) method that returns a
            SnpReader for the given TextReader.
            </summary>
        </member>
        <member name="M:Bio.IO.Snp.SnpParser.#ctor(Bio.IAlphabet)">
            <summary>
            Initializes a new instance of the SnpParser class.
            </summary>
            <param name="alphabet">The Alphabet.</param>
        </member>
        <member name="M:Bio.IO.Snp.SnpParser.#ctor">
            <summary>
            Initializes a new instance of the SnpParser class.
            </summary>
        </member>
        <member name="M:Bio.IO.Snp.SnpParser.Parse(System.IO.Stream)">
            <summary>
            Parses a list of sparse sequences from the reader, one per contiguous 
            chromosome present in the reader. There is one SequenceItem per SnpItem with 
            either of the two alleles in the SnpItem (determined by the ParseAlleleOne property)
            and at the same position in the sequence as the SnpItem.Position.
            </summary>
            <param name="stream">Stream to be parsed.</param>
            <returns>Returns a list of sparse sequences containing Snp items that were read 
            from the reader, one sequence per contiguous chromosome number and
            retaining the same position in the sequence as the chromosome position.</returns>
        </member>
        <member name="M:Bio.IO.Snp.SnpParser.ParseOne(System.IO.Stream)">
            <summary>
            Parses a single sparse sequence from the stream
            </summary>
            <param name="stream">Stream to be parsed.</param>
            <returns>Sequence</returns>
        </member>
        <member name="M:Bio.IO.Snp.SnpParser.ParseOne(Bio.IO.ISnpReader)">
            <summary>
            The common ParseOne method called for parsing SNPs
            NOTE: The snpReader.MoveNext must have already been called and 
            the ISnpReader.Current have the first SnpItem to parse into the sequence
            </summary>
            <param name="snpReader">The ISnpReader to read a Snp chromosome sequence from</param>
            <returns>Returns a SparseSequence containing Snp items from the first contiguous 
            chromosome number read from the snp reader.</returns>
        </member>
        <member name="P:Bio.IO.Snp.SnpParser.Alphabet">
            <summary>
            The alphabet to use for parsed ISequence objects.
            </summary>
        </member>
        <member name="P:Bio.IO.Snp.SnpParser.Name">
            <summary>
            Gets the name of the parser. Intended to be filled in 
            by classes deriving from BasicSequenceParser class
            with the exact name of the parser type.
            </summary>
        </member>
        <member name="P:Bio.IO.Snp.SnpParser.Description">
            <summary>
            Gets the description of the parser. Intended to be filled in 
            by classes deriving from BasicSequenceParser class
            with the exact details of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.Snp.SnpParser.ParseAlleleOne">
            <summary>
            If set to false, this will parse AlleleTwo. If true, this will parse AlleleOne from the SnpReader.
            </summary>
        </member>
        <member name="P:Bio.IO.Snp.SnpParser.SupportedFileTypes">
            <summary>
            Gets the file types supported by the parser. Intended to be filled in 
            by classes deriving from BasicSequenceParser class
            with the exact details of the file types supported.
            </summary>
        </member>
        <member name="M:Bio.IO.Snp.SimpleSnpParser.#ctor(Bio.IAlphabet)">
            <summary>
            Creates a SimpleSnpParser which generates parsed sequences that use the the 
            given alphabet and encoding.
            NOTE: Given that this parses Snps, should we always use the DnaAlphabet?
            </summary>
        </member>
        <member name="M:Bio.IO.Snp.SimpleSnpParser.#ctor">
            <summary>
            Constructor SimpleSnpParser.
            </summary>
        </member>
        <member name="P:Bio.IO.Snp.SimpleSnpParser.Name">
            <summary>
            Gets the name of the parser. 
            </summary>
        </member>
        <member name="P:Bio.IO.Snp.SimpleSnpParser.Description">
            <summary>
            Gets the description of the parser.
            </summary>
        </member>
        <member name="P:Bio.IO.Snp.SimpleSnpParser.SupportedFileTypes">
            <summary>
            Gives the supported file types.
            </summary>
        </member>
        <member name="T:Bio.IO.Text.FieldTextFileParser">
            <summary>
                Field parser reads from a source of text (default tab-delimited)
                and converts the data to in-memory ISequence objects.
                Example, tab-delimited sequence file contains two columns:
                First column contain sequence id and second column contains the sequence.
            </summary>
        </member>
        <member name="M:Bio.IO.Text.FieldTextFileParser.#ctor">
            <summary>
                Initialize instance of for Tab (default) parser class.
            </summary>
        </member>
        <member name="M:Bio.IO.Text.FieldTextFileParser.ParseOne(System.IO.Stream)">
            <summary>
            Parse a single sequence from the stream.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Sequence</returns>
        </member>
        <member name="M:Bio.IO.Text.FieldTextFileParser.Parse(System.IO.Stream)">
            <summary>
                Returns an IEnumerable of sequences in the stream being parsed.
            </summary>
            <param name="stream">Stream to parse.</param>
            <returns>Returns ISequence arrays.</returns>
        </member>
        <member name="M:Bio.IO.Text.FieldTextFileParser.ParseLine(System.String)">
            <summary>
                Parses one line from the text file.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="P:Bio.IO.Text.FieldTextFileParser.ContainsHeader">
            <summary>
                Gets or sets value whether file contains header.
                By default first line is considered as header line.
            </summary>
        </member>
        <member name="P:Bio.IO.Text.FieldTextFileParser.Delimiter">
            <summary>
                Gets or sets value of delimiter. The delimiter defines how columns in file are separated.
            </summary>
        </member>
        <member name="P:Bio.IO.Text.FieldTextFileParser.Name">
            <summary>
                Gets the type of Parser i.e field parser.
                This is intended to give developers some information
                about parser class.
            </summary>
        </member>
        <member name="P:Bio.IO.Text.FieldTextFileParser.Description">
            <summary>
                Gets the description of field parser.
                This is intended to give developers some information
                of the parser class. This property returns a simple description of what the
                FieldParser class achieves.
            </summary>
        </member>
        <member name="P:Bio.IO.Text.FieldTextFileParser.SupportedFileTypes">
            <summary>
                Gets a comma separated values of the possible
                file extensions for a TAB file.
            </summary>
        </member>
        <member name="P:Bio.IO.Text.FieldTextFileParser.Alphabet">
            <summary>
                The alphabet to use for parsed ISequence objects.  If this is not set, the alphabet will
                be determined based on the file being parsed.
            </summary>
        </member>
        <member name="T:Bio.IO.Wiggle.WiggleAnnotationType">
            <summary>
                Wiggle annotation type.
            </summary>
        </member>
        <member name="F:Bio.IO.Wiggle.WiggleAnnotationType.FixedStep">
            <summary>
                Fixed Step.
            </summary>
        </member>
        <member name="F:Bio.IO.Wiggle.WiggleAnnotationType.VariableStep">
            <summary>
                Variable Step.
            </summary>
        </member>
        <member name="T:Bio.IO.Wiggle.WiggleAnnotation">
            <summary>
                Wiggle annotation class to represent sequence annotation data in wiggle format.
                Supports fixed/variable step wiggle data.
            </summary>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleAnnotation.#ctor(System.Single[],System.String,System.Int64,System.Int32)">
            <summary>
                Initializes a new instance of the WiggleAnnotation class.
            </summary>
            <param name="data">Annotation data.</param>
            <param name="chromosome">Chromosome name.</param>
            <param name="start">Start or Base position.</param>
            <param name="step">Step size.</param>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleAnnotation.#ctor(System.Single[],System.String,System.Int64,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the WiggleAnnotation class.
            </summary>
            <param name="data">Annotation data.</param>
            <param name="chromosome">Chromosome name.</param>
            <param name="start">Start or Base position.</param>
            <param name="step">Step size.</param>
            <param name="span">Span window.</param>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleAnnotation.#ctor(System.Collections.Generic.KeyValuePair{System.Int64,System.Single}[],System.String)">
            <summary>
                Initializes a new instance of the WiggleAnnotation class.
            </summary>
            <param name="data">Annotation data.</param>
            <param name="chromosome">Chromosome name.</param>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleAnnotation.#ctor(System.Collections.Generic.KeyValuePair{System.Int64,System.Single}[],System.String,System.Int32)">
            <summary>
                Initializes a new instance of the WiggleAnnotation class.
            </summary>
            <param name="data">Annotation data.</param>
            <param name="chromosome">Chromosome name.</param>
            <param name="span">Span window.</param>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleAnnotation.#ctor">
            <summary>
                Initializes a new instance of the WiggleAnnotation class.
            </summary>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleAnnotation.GetEnumerator">
            <summary>
                Gets an enumerator to loop through all the annotation values.
            </summary>
            <returns>Annotation items enumerator.</returns>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleAnnotation.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Gets an enumerator to loop through all the annotation values.
            </summary>
            <returns>Annotation items enumerator.</returns>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleAnnotation.GetValueArray(System.Int64,System.Int64)">
            <summary>
                Gets the annotation values at a given range.
                Supported only for fixed step annotations.
            </summary>
            <param name="startIndex">Start location.</param>
            <param name="length">Total number of values to extract.</param>
            <returns>Sub set of annotation data.</returns>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleAnnotation.SetFixedStepAnnotationData(System.Single[])">
            <summary>
                Sets the fixed step annotation values of the current annotation object.
            </summary>
            <param name="values">Annotation data.</param>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleAnnotation.SetVariableStepAnnotationData(System.Collections.Generic.KeyValuePair{System.Int64,System.Single}[])">
            <summary>
                Sets the variable step annotation values of the current annotation object.
            </summary>
            <param name="values">Annotation data.</param>
        </member>
        <member name="P:Bio.IO.Wiggle.WiggleAnnotation.Comments">
            <summary>
                Gets the list of comments on this annotation.
            </summary>
        </member>
        <member name="P:Bio.IO.Wiggle.WiggleAnnotation.AnnotationType">
            <summary>
                Gets the type of annotation (fixed/variable).
            </summary>
        </member>
        <member name="P:Bio.IO.Wiggle.WiggleAnnotation.Chromosome">
            <summary>
                Gets the chromosome to which this annotation applies.
            </summary>
        </member>
        <member name="P:Bio.IO.Wiggle.WiggleAnnotation.BasePosition">
            <summary>
                Gets the base position or start in case of fixed step annotation.
            </summary>
        </member>
        <member name="P:Bio.IO.Wiggle.WiggleAnnotation.Step">
            <summary>
                Gets the step in case of fixed step annotation.
            </summary>
        </member>
        <member name="P:Bio.IO.Wiggle.WiggleAnnotation.Span">
            <summary>
                Gets the span. -1 if not applicable.
            </summary>
        </member>
        <member name="P:Bio.IO.Wiggle.WiggleAnnotation.Count">
            <summary>
                Gets the total count of annotation values in this object.
            </summary>
        </member>
        <member name="P:Bio.IO.Wiggle.WiggleAnnotation.Metadata">
            <summary>
                Gets the metadata from the track line of wiggle file.
            </summary>
        </member>
        <member name="P:Bio.IO.Wiggle.WiggleAnnotation.Item(System.Int64)">
            <summary>
                Gets the location and value of an annotation item at the given index.
                Index is zero based and is the index of the item in the annotation items list,
                not to be confused with the base pair index.
                Base pair index can be calculated as BasePosition + index (fixed step).
            </summary>
            <param name="index">Index of the item.</param>
            <returns>Annotation location and value.</returns>
        </member>
        <member name="T:Bio.IO.Wiggle.WiggleFormatter">
            <summary>
            Writes a wiggle annotation format to a file or a stream.
            </summary>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleFormatter.Format(System.IO.Stream,Bio.IO.Wiggle.WiggleAnnotation)">
            <summary>
            Writes a single data entry.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleFormatter.Format(System.IO.Stream,System.Collections.Generic.IEnumerable{Bio.IO.Wiggle.WiggleAnnotation})">
            <summary>
            Writes a set of entries.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="annotations">The data to write.</param>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleFormatter.WriteOne(System.IO.StreamWriter,Bio.IO.Wiggle.WiggleAnnotation)">
            <summary>
            Writes a single data entry.
            </summary>
            <param name="writer">Stream to write to.</param>
            <param name="annotation">The data to write.</param>
        </member>
        <member name="P:Bio.IO.Wiggle.WiggleFormatter.Name">
            <summary>
            Gets the name of this formatter.
            </summary>
        </member>
        <member name="P:Bio.IO.Wiggle.WiggleFormatter.Description">
            <summary>
            Gets a short description of this formatter.
            </summary>
        </member>
        <member name="P:Bio.IO.Wiggle.WiggleFormatter.SupportedFileTypes">
            <summary>
            Gets the file extensions that the formatter will support.
            If multiple extensions are supported then this property 
            will return a string containing all extensions with a ',' delimited.
            </summary>
        </member>
        <member name="T:Bio.IO.Wiggle.WiggleParser">
            <summary>
            Implementation of wiggle parser with support for fixed/variable step formats.
            BED Wiggle is not supported in this implementation as its obsolete.
            </summary>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleParser.Parse(System.IO.Stream)">
            <summary>
            Parses a list of biological sequence texts from a given stream.
            </summary>
            <param name="stream">The stream to pull the data from</param>
            <returns>The collection of parsed annotations.</returns>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleParser.ParseOne(System.IO.Stream)">
            <summary>
            Return the single annotation from the stream.
            </summary>
            <param name="stream">Stream</param>
            <returns>WiggleAnnotation</returns>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleParser.Parse(System.IO.StreamReader)">
            <summary>
            Parse a wiggle annotation from a stream reader.
            </summary>
            <param name="reader">Stream to parse.</param>
            <returns>WiggleAnnotation object.</returns>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleParser.ParseHeader(System.IO.StreamReader)">
            <summary>
            Parse wiggle header including track line and metadata.
            </summary>
            <param name="reader">Stream reader to parse.</param>
            <returns>Wiggle annotation object initialized with data from the header.</returns>
        </member>
        <member name="M:Bio.IO.Wiggle.WiggleParser.ExtractMetadata(System.String)">
            <summary>
            Reads the track line and converts to key value pairs.
            </summary>
            <param name="trackLine">Track line.</param>
            <returns>Track line data in key-value format.</returns>
        </member>
        <member name="P:Bio.IO.Wiggle.WiggleParser.Name">
            <summary>
            Gets the name of this parser.
            </summary>
        </member>
        <member name="P:Bio.IO.Wiggle.WiggleParser.Description">
            <summary>
            Gets a short description of this parser.
            </summary>
        </member>
        <member name="P:Bio.IO.Wiggle.WiggleParser.SupportedFileTypes">
            <summary>
            Gets the known file extensions for Wiggle files.
            </summary>
        </member>
        <member name="T:Bio.IO.Wiggle.WiggleSchema">
            <summary>
            Constants to use with Wiggle object model.
            </summary>
        </member>
        <member name="F:Bio.IO.Wiggle.WiggleSchema.Track">
            <summary>
            Track line identifier.
            </summary>
        </member>
        <member name="F:Bio.IO.Wiggle.WiggleSchema.FixedStep">
            <summary>
            Wiggle data format identifier.
            </summary>
        </member>
        <member name="F:Bio.IO.Wiggle.WiggleSchema.VariableStep">
            <summary>
            Wiggle data format identifier.
            </summary>
        </member>
        <member name="F:Bio.IO.Wiggle.WiggleSchema.Chrom">
            <summary>
            Chromosome name key.
            </summary>
        </member>
        <member name="F:Bio.IO.Wiggle.WiggleSchema.Span">
            <summary>
            Span value key.
            </summary>
        </member>
        <member name="F:Bio.IO.Wiggle.WiggleSchema.Step">
            <summary>
            Step value key.
            </summary>
        </member>
        <member name="F:Bio.IO.Wiggle.WiggleSchema.Start">
            <summary>
            Start value key.
            </summary>
        </member>
        <member name="F:Bio.IO.Wiggle.WiggleSchema.Type">
            <summary>
            Type value key.
            </summary>
        </member>
        <member name="F:Bio.IO.Wiggle.WiggleSchema.Wiggle0">
            <summary>
            Wiggle format specification '0' identifier.
            </summary>
        </member>
        <member name="F:Bio.IO.Wiggle.WiggleSchema.CommentLineStart">
            <summary>
            Denotes starting of a comment line.
            </summary>
        </member>
        <member name="T:Bio.IO.Xsv.XsvContigFormatter">
            <summary>
            This class will write a contig as a list of sparse sequences using the 
            XsvSparseFormatter. The first sequence is the consensus, and the rest are
            the assembled sequences offset from the consensus. 
            E.g. formatting a Contig with 2 assembled sequences, using '#' as sequence prefix and ',' as character separator.
            # 0,100,Consensus
            12,A
            29,T
            39,G
            #3,10,Fragment1
            9,A
            #25,20,Fragment2
            4,T
            14,G
            </summary>
        </member>
        <member name="T:Bio.IO.Xsv.XsvSparseFormatter">
            <summary>
            This class will write a sparse sequence to a character separated value file,
            with one line per sequence item. The sequence ID, the sequence count and 
            offset (if provided) will be written as a comment to a sequence start line.
            Multiple sparse sequences can be written with the sequence start line
            acting as delimiters.
            E.g. formatting with '#' as sequence prefix and ',' as character separator
            #0,100, A sparse sequence of length 100 with 2 items
            12,A
            29,T
            #3,10, A sparse sequence of length 10 at offset 3 with 1 item
            2,G
            #0,10, A sparse sequence of length 15 with no items
            </summary>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSparseFormatter.#ctor(System.Char,System.Char)">
            <summary>
            Creates an XsvSparseFormatter to format ISequences with one 
            line per sequence item.
            </summary>
            <param name="separatorChar">Separator character to be used between sequence item 
            position and its symbol.</param>
            <param name="sequenceIDPrefixChar">The character to prefix the sequence start 
            line with.</param>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSparseFormatter.Format(System.IO.Stream,Bio.ISequence)">
            <summary>
            Writes a single data entry.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSparseFormatter.Format(System.IO.Stream,System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Writes a set of entries.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="sequences">The data to write.</param>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSparseFormatter.Write(System.IO.StreamWriter,Bio.ISequence,System.Int64)">
            <summary>
            Writes an ISequence to the location specified by the writer, 
            after adding an offset value to the position.
            </summary>
            <param name="writer">Stream writer</param>
            <param name="data">The sequence to format.</param>
            <param name="positionOffset">Adds this offset value to the item position within the sequence</param>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSparseFormatter.Separator">
            <summary>
            The character to separate the position and sequence item symbol on each line
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSparseFormatter.SequenceIDPrefix">
            <summary>
            this prefix will be printed at the start of the line with 
            the offset, count and sequence ID. This is treated as the comment 
            character prefix in the underlying XsvTextReader.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSparseFormatter.SupportedFileTypes">
            <summary>
            Gives the supported file types.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSparseFormatter.Name">
            <summary>
            Gets the name of the sequence formatter being
            implemented. This is intended to give the
            developer some information of the formatter type.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSparseFormatter.Description">
            <summary>
            Gets the description of the sequence formatter being
            implemented. This is intended to give the
            developer some information of the formatter.
            </summary>
        </member>
        <member name="M:Bio.IO.Xsv.XsvContigFormatter.#ctor(System.Char,System.Char)">
            <summary>
            Creates a formatter for contigs using the given separator and 
            sequence start line prefix character.
            </summary>
            <param name="separator">The character to separate position of the sequence 
            item from its symbol, and separate the offset, count and sequence ID in the 
            sequence start line.</param>
            <param name="sequenceIDPrefix">The character to refix the sequence start line.</param>
        </member>
        <member name="M:Bio.IO.Xsv.XsvContigFormatter.Write(System.IO.Stream,Bio.Algorithms.Assembly.Contig)">
            <summary>
            Formats a (sparse) contig to a character-separated value file,
            writing the consensus first, followed by the sequence separator,
            and each assembled sequences followed by the sequence separator.
            The consensus has an offset of 0, while the assembled sequences have the
            offset as present in AssembledSequence.Position.
            </summary>
            <param name="stream">Stream to write to, it is left open at the end.</param>
            <param name="contig">The contig to format as a set of sparse sequences.</param>
        </member>
        <member name="T:Bio.IO.Xsv.XsvContigParser">
            <summary>
            This creates a contig parser that uses an XSV sparse reader to parse
            a contig from a list of sparse sequences, where the first sequence is the
            consensus and the rest are sequences aligned to it.
            </summary>
        </member>
        <member name="T:Bio.IO.Xsv.XsvSparseParser">
            <summary>
            Implements common methods for parsing one or more sparse sequences from 
            an XsvSparseReader. This reads sequence items from the reader and 
            returns a sparse sequence created for the items. Multiple sparse sequences
            are separated by a "comment" line that starts with the sequence prefix 
            character.
            
            This also returns the optional offset position of the sequence, if 
            present, to support aligned sequences such as in a Contig.
            
            This is an abstract class and extending classes will have to implement
            the GetSparseReader() method.
            </summary>
        </member>
        <member name="F:Bio.IO.Xsv.XsvSparseParser.MetadataOffsetKey">
            <summary>
            Key used internally to store offset data in a sparse sequence
            </summary>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSparseParser.#ctor(Bio.IAlphabet,System.Char,System.Char)">
            <summary>
            Creates a Sparse parser with the given encoding and alphabet
            </summary>
            <param name="alphabet">Alphabet for the sequence items</param>
            <param name="separatorChar">The separator.</param>
            <param name="sequenceIdPrefixchar">Sequence ID Prefix.</param>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSparseParser.ParseOne(System.IO.Stream)">
            <summary>
            Creates a text reader from the file name and calls Parse(TextReader reader).
            </summary>
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            <returns>A list of sparse sequences that were present in the file.</returns>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSparseParser.Parse(System.IO.Stream)">
            <summary>
            Creates a text reader from the file name and calls Parse(TextReader reader).
            </summary>
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            <returns>A list of sparse sequences that were present in the file.</returns>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSparseParser.Parse(System.IO.StreamReader)">
            <summary>
            Creates a text reader from the file name and calls Parse(TextReader reader).
            </summary>
            <param name="reader">Stream to be parsed.</param>
            <returns>A list of sparse sequences that were present in the file.</returns>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSparseParser.ParseOne(Bio.IO.Xsv.XsvSparseReader)">
            <summary>
            The common ParseOne method called for parsing sequences from Xsv files. 
            This assumes that that the first line has been read into the XsvSparseReader 
            (i.e. GoToNextLine() has been called). This adds the offset position present in 
            the sequence start line to each position value in the sequence item.
            e.g. the following returns a sparse sequence with ID 'Test sequence' of length 100 
            with A at position 32 (25+7) and G at position 57 (50+7).
            # 7, 100, Test sequence
            25,A
            50,G
            </summary>
            <param name="sparseReader">The Xsv sparse reader that can read the sparse sequences.
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The first sequence present starting from the 
            current position in the reader as a SparseSequence. The sparse sequence has the ID present in the 
            sequence start line, and its length equals the count present in that line. 
            Null if EOF has been reached. Throws an exception if the current position did 
            not have the sequence start line with the sequence prefix ID character.
            </returns>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSparseParser.Alphabet">
            <summary>
            The alphabet to use for parsed ISequence objects.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSparseParser.SupportedFileTypes">
            <summary>
            Gives the supported file types.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSparseParser.Name">
            <summary>
            Gets the name of the parser. 
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSparseParser.Description">
            <summary>
            Gets the description of the parser. 
            </summary>
        </member>
        <member name="M:Bio.IO.Xsv.XsvContigParser.#ctor(Bio.IAlphabet,System.Char,System.Char)">
            <summary>
             Creates a contig parser that parses Contigs using the given encoding
             and alphabet, by creating an XsvSparseReader that uses the given separator 
             and sequenceIdPrefix characters.
            </summary>
            <param name="alphabet">Alphabet to use for the consensus and assembled sequences that are parsed.</param>
            <param name="separatorChar">Character used to separate sequence item position and symbol in the Xsv file</param>
            <param name="sequenceIdPrefixChar">Character used at the beginning of the sequence start line.</param>
        </member>
        <member name="M:Bio.IO.Xsv.XsvContigParser.ParseContig(System.IO.Stream)">
            <summary>
            This converts a list of sparse sequences read from the passed stream into a contig.
            Assumes the first sequence is the consensus and the rest are assembled sequences.
            The positions of the assembed sequences are the offsets of the sparse sequences in
            the sequence start line. The positions of the sequence items are the same as their
            position field value in each character separated line 
            (i.e. they are not incremented by the offset)
            </summary>
            <returns>The parsed contig with consensus and assembled sequences, all represented 
            as SparseSequences. 
            Null if no lines were present in the reader. Exception if valid sparse sequences
            were not present. 
            NOTE: This does not check if the assembled sequence positions are valid with respect to the consensus.
            </returns>
        </member>
        <member name="M:Bio.IO.Xsv.XsvContigParser.ParseAssembledSequence(Bio.IO.Xsv.XsvSparseReader)">
            <summary>
            Parses a list of assembled sparse sequences from the reader.
            </summary>
            <param name="contigReader">The reader to read the assembled sparse sequences from
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>Returns contig assemble sequence.</returns>
        </member>
        <member name="T:Bio.IO.Xsv.XsvSnpReader">
            <summary>
            This is used to read SNP items from a text reader available as 
            character separated values in a line. There is one SNP item per line and 
            each line has four character separated fields whose column numbers are identified: 
            a chromosome number, the Position, and 
            the two allele values that are valid for that SNP. 
            There may be additional columns too, but their values are ignored.
            Classes that extend from this can override the protected properties and virtual methods 
            to perform Snp file format specific transformations before returning the field values.
            
            </summary>
        </member>
        <member name="T:Bio.IO.Xsv.XsvTextReader">
            <summary>
                Common class for reading character separated value files
                e.g. tab separated value (.tsv), Comma separated value (.csv), etc.
                There is "one" record per line. There are multiple columns per line,
                each containing one field in the record.
                It adds properties for extracting fields in each line.
                It has properties for ignoring/extracting comment lines prefixed by comment characters.
            </summary>
        </member>
        <member name="F:Bio.IO.Xsv.XsvTextReader.reader">
            <summary>
                TextReader we are wrapping.
            </summary>
        </member>
        <member name="F:Bio.IO.Xsv.XsvTextReader.fields">
            <summary>
                Contains the list of fields split from the current Line
            </summary>
        </member>
        <member name="M:Bio.IO.Xsv.XsvTextReader.#ctor(System.IO.TextReader,System.Char[],System.Boolean,System.Boolean)">
            <summary>
                Creates a Reader to read character separated values as records with fields.
            </summary>
            <param name="xsvReader">
                The source text reader to read from.
                This should point to the start of the TextReader if this has a header row.
                Else it can point to the start of a line in the TextReader.
            </param>
            <param name="separators">Characters that are valid separators between fields in a line</param>
            <param name="ignoreWhiteSpace">If true, the white spaces around fields are removed.</param>
            <param name="hasHeader">
                If true, the first line of the reader is treated as a header
                row for the fields
            </param>
        </member>
        <member name="M:Bio.IO.Xsv.XsvTextReader.System#IDisposable#Dispose">
            <summary>
                IDisposable for IEnumerator
            </summary>
        </member>
        <member name="M:Bio.IO.Xsv.XsvTextReader.GoToNextLine">
            <summary>
                Calls the GoToNextLine() of the base class.
                Skips comment lines if present and enabled.
            </summary>
        </member>
        <member name="M:Bio.IO.Xsv.XsvTextReader.Dispose(System.Boolean)">
            <summary>
                Derived class implementations
            </summary>
            <param name="disposing">True if we are disposing, 
            false if this is a GC finalizer (must be called by derived classes)</param>
        </member>
        <member name="P:Bio.IO.Xsv.XsvTextReader.SkipBlankLines">
            <summary>
                Gets or sets a value indicating whether or not blank lines should be skipped when GoToNextLine is called.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvTextReader.Line">
            <summary>
                Gets current line of text.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvTextReader.HasLines">
            <summary>
                Gets a value indicating whether current line is not past the end of the formatted text.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvTextReader.DataIndent">
            <summary>
                The Xsv files do not have any indents. So override and always return 0.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvTextReader.LineData">
            <summary>
                Since the Xsv files do not have line headers, this returns the entire Line.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvTextReader.Fields">
            <summary>
                Returns the list of fields in the current line as an array of strings.
                This uses the separators defined for this reader to split the current line and
                return the tokens. It trims the tokens if IgnoreWhiteSpace is true.
                If the current line is a comment line, this throws an exception.
                If end of the reader has been reached and HasLines is false, this returns null.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvTextReader.Separators">
            <summary>
                Characters that separate each column in a line.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvTextReader.TrimWhiteSpace">
            <summary>
                If true, this trims the white space around the field values (including header names).
                Else all characters between the separators are returned as field value.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvTextReader.FieldHeaders">
            <summary>
                Returns the field names that from the header row (first line)
                if present (HasHeaders == true). Null otherwise.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvTextReader.HasHeader">
            <summary>
                If true, the first row of this reader is considered as a header and
                read into FieldHeaders property.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvTextReader.CommentLine">
            <summary>
                HasCommentLine is true and the current line starts with the CommentPrefix,
                this returns the portion of the line after the comment prefix character.
                Null otherwise.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvTextReader.CommentPrefixes">
            <summary>
                If not null or empty, lines starting with any of these characters this list
                are treated as comment lines. This is effective only if SkipCommentLines is
                set to true.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvTextReader.SkipCommentLines">
            <summary>
                If true, this skips lines that are prefixed with the comment prefix characters.
                This is effective only if CommentPrefixes has one or more prefix characters.
                If set to true, comment lines cannot be read using the CommentLine property.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvTextReader.HasCommentLine">
            <summary>
                Returns true if the current line a valid comment line.
                a current line should exist, CommentPrefixes should have one or more valid comment prefix
                chars and the current line should start with one of these chars.
            </summary>
        </member>
        <member name="F:Bio.IO.Xsv.XsvSnpReader.IsChromosomeSorted">
            <summary>
            If true, the chromosome numbers are assumed to be sorted when 
            SkipToChromosome* methods are called.
            </summary>
        </member>
        <member name="F:Bio.IO.Xsv.XsvSnpReader.IsChromosomePositionSorted">
            <summary>
            If true, the chromosome numbers AND chromosome positions within them 
            are assumed to be sorted when SkipToChromosome* methods are called.
            </summary>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSnpReader.#ctor(System.IO.TextReader,System.Char[],System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a SNP reader from the given text reader that has character 
            separated values for Snpitems.
            </summary>
            
            <param name="reader">Source text reader for the SNP lines</param>
            <param name="separators">Valid character separators between fields in the line 
            e.g. '\t', ',', etc.</param>
            <param name="ignoreWhiteSpace">If true, trims the white space around a field value</param>
            <param name="hasHeader">If true, treats the field values of the first line in 
            the text reader as a header with the names of the fields.</param>
            <param name="chromosomeColumn">The zero-based column number in a line that 
            corresponds to the chromosome field</param>
            <param name="positionColumn">The zero-based column number in a line that 
            corresponds to the Snp position field</param>
            <param name="alleleOneColumn">The zero-based column number in a line that 
            corresponds to the first allele</param>
            <param name="alleleTwoColumn">The zero-based column number in a line that 
            corresponds to the second allele</param>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSnpReader.MoveNext">
            <summary>
            Go to the next line in the text reader, unless it is the first line in which case, 
            it has already been called in the constructor and we do not move
            the TextReader.
            </summary>
            <returns>True if we have a valid SnpItem in the next line moved to</returns>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSnpReader.Reset">
            <summary>
            This method is not implemented for XsvSnpReader. Use BufferedSnpReader() instead.
            </summary>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSnpReader.SkipToChromosome(System.Int32)">
            <summary>
            This moves the cursor to the current/next SNP item containing the given 
            chromosome number (i.e. Current.Chromosome == chromosomeNumber), 
            or beyond the end of the enumerator if none exist. 
            This is useful when traversing sorted SNP sequences and we need to 
            jump to a specific chromosome number.
            The enumerator should be positioned at or after the first item and at or before the last item.
            </summary>
            <param name="chromosomeNumber">The chromosome number for the Snpitem to move to.</param> 
            <returns>True if the cursor was moved to a SnpItem with the given chromosome number. 
            False if no subsequent SnpItems exist with given chromosome number.
            If returning true, the Current item will have given chromosome number.
            </returns>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSnpReader.SkipToChromosomePosition(System.Int32,System.Int32)">
            <summary>
            This moves the cursor to the current/next SNP item containing the given 
            chromosome number and position 
            (i.e. Current.Chromosome == chromosomeNumber and Current.Position == position), 
            or beyond the end of the enumerator if none exist.
            The enumerator should be positioned at or after the first item and at 
            or before the last item.
            NOTE: This is useful when traversing sorted SNP sequences and need to jump to a 
            specific chromosome number+position.
            </summary>
            <param name="chromosomeNumber">The chromosome number for the Snpitem to move to.</param>
            <param name="position">The position within chromosome number for the Snpitem to move to.</param>
            <returns>Returns true if a SnpItem with given chromosome number and position is found.
            If end of file is reached before this they are found, it returns false. 
            If returning true, the Current item will have given chromosome number and position.</returns>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSnpReader.SkipToChromosomePosition(System.Int32)">
            <summary>
            This moves the cursor to the current/next SNP item containing the current chromosome number
            and position equal to the given position
            (i.e. Current.Position == position and Current.Chromosome does not change), 
            or beyond the end of the enumerator if none exist.
            The enumerator should be positioned at or after the first item and at 
            or before the last item.
            NOTE: This is useful when traversing sorted SNP sequences and need to jump to a 
            specific chromosome position within current chromosome position.
            </summary>
            <param name="position">The position within chromosome number for the Snpitem to move to.</param>
            <returns>Returns true if this position is found. 
            False if the next chromosome number is encountered, or end of file is 
            reached before the position is found. If returning true, the Current item 
            will contain the starting chromosome number and given position.</returns>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSnpReader.GetFieldValue(Bio.IO.Xsv.XsvSnpReader.FieldNames)">
            <summary>
            Returns the field value as a string for the given field name.
            </summary>
            <param name="column">field name enumerator to get the string value for</param>
            <returns>Returns the field value as a string for the given field enum.</returns>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSnpReader.GetColumnNumber(Bio.IO.Xsv.XsvSnpReader.FieldNames)">
            <summary>
            Returns the column number for the given field name
            </summary>
            <param name="column">Snp field enumerator to get the column number for</param>
            <returns>Returns the column number for the given Snp field enum.</returns>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSnpReader.MakeSnpForCurrentLine">
            <summary>
            Makes a SNP item for the current line in the XSV reader.
            Since the XSV reader reads ahead, this is actually the next 
            SNP item for the enumerator.
            </summary>
            <returns>Creates a SnpItem for the current line in the XsvReader</returns>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSnpReader.ChromosomeColumn">
            <summary>
            the zero-based column number in a line which 
            corresponds to the chromosome field
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSnpReader.PositionColumn">
            <summary>
            the zero-based column number in a line which 
            corresponds to the Snp position field
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSnpReader.AlleleOneColumn">
            <summary>
            the zero-based column number in a line which 
            corresponds to the first allele field for the SNP
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSnpReader.AlleleTwoColumn">
            <summary>
            the zero-based column number in a line which 
            corresponds to the second allele field for the SNP
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSnpReader.CurrentSnpItem">
            <summary>
            The SNP item that has been parsed for the current line
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSnpReader.IsFirstLine">
            <summary>
            True if the current line contains the first line read from the reader
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSnpReader.Current">
            <summary>
             Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSnpReader.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>The current element in the collection.</returns>
        </member>
        <member name="T:Bio.IO.Xsv.XsvSnpReader.FieldNames">
            <summary>
            Field name enums for SNP fields in the file
            </summary>
        </member>
        <member name="F:Bio.IO.Xsv.XsvSnpReader.FieldNames.Chromosome">
            <summary>
            The chromosome number field
            </summary>
        </member>
        <member name="F:Bio.IO.Xsv.XsvSnpReader.FieldNames.Position">
            <summary>
            The position within chromosome number field
            </summary>
        </member>
        <member name="F:Bio.IO.Xsv.XsvSnpReader.FieldNames.AlleleOne">
            <summary>
            The symbol for allele one field
            </summary>
        </member>
        <member name="F:Bio.IO.Xsv.XsvSnpReader.FieldNames.AlleleTwo">
            <summary>
            The symbol for allele two field
            </summary>
        </member>
        <member name="T:Bio.IO.Xsv.XsvSparseReader">
            <summary>
            This is used to read a sparse sequences from a text reader available as 
            character separated values in a line. There is one sequence item per line and 
            each record has two fields: position (int) and sequence item symbol (char).
            A comment line should be the first line for the reader and it contains
            the following fields separated by the separator character:
            1. the starting offset (in case this is an aligned sequence, 0 by default),
            2. the count of the sequence, and 
            3. the sequence ID string (newlines removed).
            e.g. reader for sparse sequence source with '#' as sequence ID prefix and ',' as separator 
            would read the following file contents:
            
            #0,100,A sparse sequence with 5 items
            12,A
            29,T
            56,G
            85,A
            32,C
            </summary>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSparseReader.#ctor(System.IO.TextReader,System.Char,System.Char)">
            <summary>
            Creates a reader for a sparse sequence that has sequence items as 
            character separated values, one per line.
            </summary>
            <param name="reader">The text reader with the contents of the sparse sequence</param>
            <param name="separator">The character that separates the sequence item position from its symbol. 
            This is also used to separate the offset, count, id in the sequence comment line.</param>
            <param name="sequenceIDPrefix">The character used to prefix the sequence comment line that 
            contains the offset, count, id in the sequence. this is used as a comment prefix character
            in the underlying XsvTextReader.</param>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSparseReader.GetSequenceId">
            <summary>
            If the current line is the sequence start line it returns the sequence ID field in it.
            This throws an exception if the current line is not prefixed by the sequence id prefix,
            or if the sequence id is not present as the third character separated field.
            </summary>
            <returns>The sequence ID string for this sparse sequence</returns>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSparseReader.GetSequenceOffset">
            <summary>
            If the current line is the sequence start line it returns the sequence offset field.
            This thows an exception if the current line is not prefixed by the sequence id prefix,
            or if the sequence offset is not present as an integer in the first character separated field.
            </summary>
            <returns>The sequence offset integer for this sparse sequence</returns>
        </member>
        <member name="M:Bio.IO.Xsv.XsvSparseReader.GetSequenceCount">
            <summary>
            If the current line is the sequence start line it returns the sequence count field.
            This throws an exception if the current line is not prefixed by the sequence id prefix,
            or if the sequence count is not present as an integer in the second character separated field.
            </summary>
            <returns>The sequence count integer for this sparse sequence</returns>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSparseReader.SkipCommentLines">
            <summary>
            Do not allow changing IgnoreComment since comments are required to 
            be enabled to set sequence I.
            </summary>
        </member>
        <member name="P:Bio.IO.Xsv.XsvSparseReader.CommentPrefixes">
            <summary>
            Do not allow changing CommentPrefix since it is set by the constructor 
            as the sequenceIDPrefix.
            </summary>
        </member>
        <member name="T:Bio.IParameterValidator">
            <summary>
            A simple interface to an object that can check a value
            for conformance to any required validation rules.
            </summary>
        </member>
        <member name="M:Bio.IParameterValidator.IsValid(System.Object)">
            <summary>
            Given a value as an object, return true if the value is allowed.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="M:Bio.IParameterValidator.IsValid(System.String)">
            <summary>
            Given a value in string form, return true if the value is allowed.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="T:Bio.PlatformManager">
            <summary>
            Platform manager - this holds all the platform specific services.
            </summary>
        </member>
        <member name="P:Bio.PlatformManager.Services">
            <summary>
            Platform services (specific to platform)
            </summary>
        </member>
        <member name="T:Bio.ISequenceRange">
            <summary>
            A SequenceRange holds the data necessary to represent a region within
            a sequence defined by its start and end index without necessarily holding
            any of the sequence item data. At a minimum and ID, start index, and end
            index are required. Additional metadata can be stored as well using a
            generic key value pair.
            </summary>
        </member>
        <member name="P:Bio.ISequenceRange.Start">
            <summary>
            The beginning index of the range. This index must be non-negative and
            it will be enforced to always be less than or equal to the End index.
            </summary>
        </member>
        <member name="P:Bio.ISequenceRange.End">
            <summary>
            The end index of the range. This index must be non-negative and
            it will be enforced to always be greater than or equal to the Start index.
            </summary>
        </member>
        <member name="P:Bio.ISequenceRange.ID">
            <summary>
            A string identifier of the sequence range.
            </summary>
        </member>
        <member name="P:Bio.ISequenceRange.Metadata">
            <summary>
            Optional additional data to store along with the ID and indices of
            the range. Metadata must be stored with a string key name.
            </summary>
        </member>
        <member name="P:Bio.ISequenceRange.ParentSeqRanges">
            <summary>
            Gets the sequence ranges from which this sequence range is obtained.
            This property will be filled by the operations like Merge, Intersect etc.
            </summary>
        </member>
        <member name="T:Bio.MetadataListItem`1">
            <summary>
            It is common for a biological sequence file to contain lists of certain types of metadata,
            such as features or references, which can be stored as MetadataListItems.  A
            MetadataListItem contains a key (which might not be unique) a free-text field of top level
            information (such as a sequence location), and a list of sub-items, each consisting of
            a key and a data field of type T.  If the sub-items have unique keys, a string type can be
            used for T.  But if the sub-item keys are not unique, a list of strings should be used
            for T.
            </summary>
        </member>
        <member name="M:Bio.MetadataListItem`1.#ctor(System.String,System.String)">
            <summary>
            Constructs list item with given key and free text.
            </summary>
            <param name="key">The key, which might not be unique among items in the list.</param>
            <param name="freeText">The top level free-text information, such as a location string.
            </param>
        </member>
        <member name="P:Bio.MetadataListItem`1.Key">
            <summary>
            Gets the key for this item.  These are not necessarily unique within a list,
            which is why this is a property of an object to be included in a list, rather than
            omitting this as a property and using a dictionary instead of a list.
            </summary>
        </member>
        <member name="P:Bio.MetadataListItem`1.FreeText">
            <summary>
            Gets the free-text for this item.  This will often be a location string.
            </summary>
        </member>
        <member name="P:Bio.MetadataListItem`1.SubItems">
            <summary>
            Gets the dictionary of attributes.
            </summary>
        </member>
        <member name="T:Bio.Phylogenetics.Edge">
            <summary>
            Edge: a tree edge and its descendant subtree.
            Edge --> Distance/Length
            </summary>
        </member>
        <member name="M:Bio.Phylogenetics.Edge.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Bio.Phylogenetics.Edge.Clone">
            <summary>
            Clone object
            </summary>
            <returns>Edge as object</returns>
        </member>
        <member name="P:Bio.Phylogenetics.Edge.Distance">
            <summary>
            Length of a tree edge.
            </summary>
        </member>
        <member name="T:Bio.Phylogenetics.Node">
            <summary>
            Node : Node of the tree which can be either Leaf or another branch node.
            </summary>
        </member>
        <member name="M:Bio.Phylogenetics.Node.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Bio.Phylogenetics.Node.Clone">
            <summary>
            Clone object
            </summary>
            <returns>Node as object</returns>
        </member>
        <member name="P:Bio.Phylogenetics.Node.MetaData">
            <summary>
            Metadata encoded as string
            </summary>
        </member>
        <member name="P:Bio.Phylogenetics.Node.Children">
            <summary>
            Get Children nodes
            </summary>
        </member>
        <member name="P:Bio.Phylogenetics.Node.Nodes">
            <summary>
            Get list of Nodes
            </summary>
        </member>
        <member name="P:Bio.Phylogenetics.Node.Edges">
            <summary>
            Get list of Edges
            </summary>
        </member>
        <member name="P:Bio.Phylogenetics.Node.IsLeaf">
            <summary>
            Either node is leaf or not
            </summary>
        </member>
        <member name="P:Bio.Phylogenetics.Node.IsRoot">
            <summary>
            Either node is root node or not
            </summary>
        </member>
        <member name="P:Bio.Phylogenetics.Node.Name">
            <summary>
            If its leaf node, then use name
            </summary>
        </member>
        <member name="T:Bio.Phylogenetics.Tree">
            <summary>
                Tree: The full input Newick Format for a single tree
                Tree --> Subtree ";" | Branch ";"
            </summary>
        </member>
        <member name="M:Bio.Phylogenetics.Tree.Clone">
            <summary>
                Clone object
            </summary>
            <returns>Tree as object</returns>
        </member>
        <member name="P:Bio.Phylogenetics.Tree.Name">
            <summary>
                Name of the tree
            </summary>
        </member>
        <member name="P:Bio.Phylogenetics.Tree.MetaData">
            <summary>
                Metadata dictionary
            </summary>
        </member>
        <member name="P:Bio.Phylogenetics.Tree.Root">
            <summary>
                Root of the tree
            </summary>
        </member>
        <member name="T:Bio.QualitativeSequence">
            <summary>
            This class holds quality scores along with the sequence data.
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Phred_MinQualityScore">
            <summary>
            Phred minimum quality score: 0
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Phred_MaxQualityScore">
            <summary>
            Phred maximum quality score: 93
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Solexa_MinQualityScore">
            <summary>
            Solexa minimum quality score: -5
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Solexa_MaxQualityScore">
            <summary>
            Solexa maximum quality score: 62
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Sanger_MinEncodedQualScore">
            <summary>
            Minimum encoded quality score for Sanger format: 33
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Sanger_MaxEncodedQualScore">
            <summary>
            Maximum encoded quality score for Sanger format: 126
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Solexa_Illumina_v1_0_MinEncodedQualScore">
            <summary>
            Minimum encoded quality score for Solexa/Illumina v1.0 format: 59
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Solexa_Illumina_v1_0_MaxEncodedQualScore">
            <summary>
            Maximum encoded quality score for Solexa/Illumina v1.0 format: 126
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Illumina_v1_3_MinEncodedQualScore">
            <summary>
            Minimum encoded quality score for Illumina v1.3 format: 64
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Illumina_v1_3_MaxEncodedQualScore">
            <summary>
            Maximum encoded quality score for Illumina v1.3 format: 126
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Illumina_v1_5_MinEncodedQualScore">
            <summary>
            Minimum encoded quality score for Illumina v1.5 format: 64
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Illumina_v1_5_MaxEncodedQualScore">
            <summary>
            Maximum encoded quality score for Illumina v1.5 format: 126
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Illumina_v1_8_MinEncodedQualScore">
            <summary>
            Minimum encoded quality score for Illumina v1.8 format: 33
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Illumina_v1_8_MaxEncodedQualScore">
            <summary>
            Maximum encoded quality score for Illumina v1.8 format: 126
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Sanger_AsciiBaseValue">
            <summary>
            ASCII Base value for encoding quality scores in Sanger format: 33
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Solexa_Illumina_v1_0_AsciiBaseValue">
            <summary>
            ASCII Base value for encoding quality scores in Solexa/Illumina 1.0 format: 64
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Illumina_v1_3_AsciiBaseValue">
            <summary>
            ASCII Base value for encoding quality scores in Illumina v1.3 format: 64
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Illumina_v1_5_AsciiBaseValue">
            <summary>
            ASCII Base value for encoding quality scores in Illumina v1.5 format: 64
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.Illumina_v1_8_AsciiBaseValue">
            <summary>
            ASCII Base value for encoding quality scores in Illumina 1.8 format: 33
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.DefaultQualScore">
            <summary>
            Default quality score.
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.sequenceData">
            <summary>
            Holds sequence data.
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.qualityScores">
            <summary>
            Holds decoded quality scores
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.metadata">
            <summary>
            Metadata is features or references or related things of a sequence.
            </summary>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.FastQFormatType,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the QualitativeSequence class with specified alphabet, quality score type,
            byte array representing symbols and encoded quality scores.
            Sequence and quality scores are validated with the specified alphabet and specified fastq format respectively.
            </summary>
            <param name="alphabet">Alphabet to which this instance should conform.</param>
            <param name="fastQFormatType">FastQ format type.</param>
            <param name="sequence">An array of bytes representing the symbols.</param>
            <param name="encodedQualityScores">An array of bytes representing the encoded quality scores.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.FastQFormatType,System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the QualitativeSequence class with specified alphabet, quality score type,
            byte array representing symbols and encoded quality scores.
            </summary>
            <param name="alphabet">Alphabet to which this instance should conform.</param>
            <param name="fastQFormatType">FastQ format type.</param>
            <param name="sequence">An array of bytes representing the symbols.</param>
            <param name="encodedQualityScores">An array of bytes representing the encoded quality scores.</param>
            <param name="validate">If this flag is true then validation will be done to see whether the data is valid or not,
            else validation will be skipped.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.FastQFormatType,System.String,System.String)">
            <summary>
            Initializes a new instance of the QualitativeSequence class with specified alphabet, quality score type,
            string representing symbols and encoded quality scores.
            Sequence and quality scores are validated with the specified alphabet and specified fastq format respectively.
            </summary>
            <param name="alphabet">Alphabet to which this instance should conform.</param>
            <param name="fastQFormatType">FastQ format type.</param>
            <param name="sequence">A string representing the symbols.</param>
            <param name="encodedQualityScores">A string representing the encoded quality scores.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.FastQFormatType,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the QualitativeSequence class with specified alphabet, quality score type,
            string representing symbols and encoded quality scores.
            </summary>
            <param name="alphabet">Alphabet to which this instance should conform.</param>
            <param name="fastQFormatType">FastQ format type.</param>
            <param name="sequence">A string representing the symbols.</param>
            <param name="encodedQualityScores">A string representing the encoded quality scores.</param>
            <param name="validate">If this flag is true then validation will be done to see whether the data is valid or not,
            else validation will be skipped.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.FastQFormatType,System.Byte[],System.SByte[],System.Boolean)">
            <summary>
            Initializes a new instance of the QualitativeSequence class with specified alphabet, quality score type,
            byte array representing symbols and signed byte array representing base quality scores 
            (Phred or Solexa base according to the FastQ format type).
            </summary>
            <param name="alphabet">Alphabet to which this instance should conform.</param>
            <param name="fastQFormatType">FastQ format type.</param>
            <param name="sequence">An array of bytes representing the symbols.</param>
            <param name="qualityScores">An array of signed bytes representing the base quality scores 
            (Phred or Solexa base according to the FastQ format type).</param>
            <param name="validate">If this flag is true then validation will be done to see whether the data is valid or not,
            else validation will be skipped.</param>
            //TODO: Method is redundant, needs clean up
        </member>
        <member name="M:Bio.QualitativeSequence.#ctor(Bio.IAlphabet,Bio.FastQFormatType,System.Byte[],System.Int32[],System.Boolean)">
            <summary>
            Initializes a new instance of the QualitativeSequence class with specified alphabet, quality score type,
            byte array representing symbols and integer array representing base quality scores 
            (Phred or Solexa base according to the FastQ format type).
            </summary>
            <param name="alphabet">Alphabet to which this instance should conform.</param>
            <param name="fastQFormatType">FastQ format type.</param>
            <param name="sequence">An array of bytes representing the symbols.</param>
            <param name="qualityScores">An array of integers representing the base quality scores 
            (Phred or Solexa base according to the FastQ format type).</param>
            <param name="validate">If this flag is true then validation will be done to see whether the data is valid or not,
            else validation will be skipped.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertQualityScore(Bio.FastQFormatType,Bio.FastQFormatType,System.Int32)">
            <summary>
            Converts Quality score from to specified format.
            </summary>
            <param name="fromFormatType">from fastq format.</param>
            <param name="toFormatType">to fastq format.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertQualityScores(Bio.FastQFormatType,Bio.FastQFormatType,System.Int32[])">
            <summary>
            Converts Quality scores from to specified format.
            </summary>
            <param name="fromFormatType">from fastq format.</param>
            <param name="toFormatType">to fastq format.</param>
            <param name="qualScores">Quality scores.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertQualityScores(Bio.FastQFormatType,Bio.FastQFormatType,System.SByte[])">
            <summary>
            Converts Quality scores from to specified format.
            </summary>
            <param name="fromFormatType">from fastq format.</param>
            <param name="toFormatType">to fastq format.</param>
            <param name="qualScores">Quality scores.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertEncodedQualityScore(Bio.FastQFormatType,Bio.FastQFormatType,System.Byte)">
            <summary>
            Converts Encoded quality score from to specified format.
            </summary>
            <param name="fromFormatType">from fastq format.</param>
            <param name="toFormatType">to fastq format.</param>
            <param name="encodedqualScore">Encoded quality score.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertEncodedQualityScore(Bio.FastQFormatType,Bio.FastQFormatType,System.Byte[])">
            <summary>
            Converts Encoded quality scores from to specified format.
            </summary>
            <param name="fromFormatType">from fastq format.</param>
            <param name="toFormatType">to fastq format.</param>
            <param name="encodedqualScores">Encoded quality scores.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.GetDefaultQualScore(Bio.FastQFormatType)">
            <summary>
            Gets the default quality score for the specified FastQFormatType.
            </summary>
             /// <param name="type">FastQ format type.</param>
            <returns>Quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetMaxEncodedQualScore(Bio.FastQFormatType)">
            <summary>
            Gets the maximum encoded quality score for the specified FastQFormatType.
            </summary>
             /// <param name="formatType">FastQ format type.</param>
            <returns>Quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetMinEncodedQualScore(Bio.FastQFormatType)">
            <summary>
            Gets the minimum encoded quality score for the specified FastQFormatType.
            </summary>
            <param name="formatType">FastQ format type.</param>
            <returns>Quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetEncodedQualityScore(System.Int64)">
            <summary>
            Gets the encoded quality score found at the specified index if within bounds. Note that the index value start at 0.
            </summary>
            <param name="index">Index at which the symbol is required.</param>
            <returns>Quality Score at the given index.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetEncodedQualityScores">
            <summary>
            Gets the encoded quality scores.
            </summary>
        </member>
        <member name="M:Bio.QualitativeSequence.GetQualityScore(System.Int64)">
            <summary>
            Returns base quality scores at specified index.
            Returns Solexa quality scores if the FastQFormat type of this instance is Solexa Illumina v1.0,
            else returns Phred quality scores.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetQualityScores">
            <summary>
            Returns base quality scores.
            Returns Solexa quality scores if the FastQFormat type of this instance is Solexa Illumina v1.0,
            else returns Phred quality scores.
            </summary>
        </member>
        <member name="M:Bio.QualitativeSequence.GetPhredQualityScore(System.Int64)">
            <summary>
            Gets the Phred base quality score.
            </summary>
            <param name="index">Index of the required score.</param>
            <returns>Returns an integer value representing Phred quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetPhredQualityScores">
            <summary>
            Gets the Phred base quality scores.
            </summary>
        </member>
        <member name="M:Bio.QualitativeSequence.GetSolexaQualityScore(System.Int64)">
            <summary>
            Gets the Solexa base quality score.
            </summary>
            <param name="index">Index of the required score.</param>
            <returns>Returns an integer value representing Solexa quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetSolexaQualityScores">
            <summary>
            Gets the solexa base quality scores.
            </summary>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertTo(Bio.FastQFormatType)">
            <summary>
            Converts the current instance to the specified FastQ format type 
            and returns a new instance of QualitativeSequence.
            </summary>
            <param name="formatType">FastQ format type to convert.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.GetReversedSequence">
            <summary>
            Return a new QualitativeSequence representing this QualitativeSequence with the orientation reversed.
            </summary>
        </member>
        <member name="M:Bio.QualitativeSequence.GetComplementedSequence">
            <summary>
            Return a new QualitativeSequence representing the complement of this QualitativeSequence.
            </summary>
        </member>
        <member name="M:Bio.QualitativeSequence.GetReverseComplementedSequence">
            <summary>
            Return a new QualitativeSequence representing the reverse complement of this QualitativeSequence.
            </summary>
        </member>
        <member name="M:Bio.QualitativeSequence.GetSubSequence(System.Int64,System.Int64)">
            <summary>
            Return a new QualitativeSequence representing a range (subsequence) of this QualitativeSequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The sub-sequence.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.IndexOfNonGap">
            <summary>
            Gets the index of first non-gap symbol.
            </summary>
            <returns>If found returns a zero based index of the first non-gap symbol, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.IndexOfNonGap(System.Int64)">
            <summary>
            Returns the position of the first symbol beyond startPos that does not 
            have a Gap symbol.
            </summary>
            <param name="startPos">Index value beyond which the non-gap symbol is searched for.</param>
            <returns>If found returns a zero based index of the first non-gap symbol, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non-gap symbol.
            </summary>
            <returns>If found returns a zero based index of the last non-gap symbol, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.LastIndexOfNonGap(System.Int64)">
            <summary>
            Returns the index of last non-gap symbol before the specified end position.
            </summary>
            <param name="endPos">Index value up to which the non-Gap symbol is searched for.</param>
            <returns>If found returns a zero based index of the last non-gap symbol, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ToString">
            <summary>
            Returns a string representation of the Qualitative sequence data. This representation
            will come from the symbols in the alphabet defined for the sequence.
            Also their Quality scores.
            </summary>
        </member>
        <member name="M:Bio.QualitativeSequence.GetEnumerator">
            <summary>
            Gets an enumerator to the bytes present symbols in this sequence.
            </summary>
            <returns>An IEnumerator of bytes.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to the bytes present symbols in this sequence.
            </summary>
            <returns>An IEnumerator of bytes.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetAsciiBaseValue(Bio.FastQFormatType)">
            <summary>
            Gets the Ascii base value for the specified format.
            </summary>
            <param name="formatType">FastQ format.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.GetQualityScoreType(Bio.FastQFormatType)">
            <summary>
            Gets the quality score type for the specified format.
            </summary>
            <param name="formatType">FastQ format.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.GetDecodedQualScore(System.Byte,Bio.FastQFormatType)">
            <summary>
            Gets the decoded quality score from the ASCII encoded quality score.
            </summary>
            <param name="encodedQualScore">ASCII Encoded quality score.</param>
            <param name="formatType">FastQ format type.</param>
            <returns>Returns quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetDecodedQualScores(System.Byte[],Bio.FastQFormatType)">
            <summary>
            Gets the decoded quality scores from the ASCII encoded quality score.
            </summary>
            <param name="encodedQualScores">ASCII Encoded quality score.</param>
            <param name="formatType">FastQ format type.</param>
            <returns>Returns quality scores.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetDecodedQualScoresInSignedBytes(System.Byte[],Bio.FastQFormatType)">
            <summary>
            Gets the decoded quality scores from the ASCII encoded quality score.
            </summary>
            <param name="encodedQualScores">ASCII Encoded quality score.</param>
            <param name="formatType">FastQ format type.</param>
            <returns>Returns quality scores.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.DecodeQualityScore(System.Byte,System.Int32)">
            <summary>
            Decodes the specified encoded quality score using base value.
            </summary>
            <param name="encodedQualityScore">Encoded quality score.</param>
            <param name="baseValue">Base value used for encoding.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.EncodeQualityScore(System.Int32,System.Int32)">
            <summary>
            Encodes the specified quality score using base value.
            </summary>
            <param name="qualityScore">Quality score.</param>
            <param name="baseValue">Base value to use for encoding.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.GetEncodedQualScore(System.Int32,Bio.FastQFormatType)">
            <summary>
            Gets the ASCII encoded quality score for the given quality score.
            </summary>
            <param name="qualScore">Quality Score.</param>
            <param name="formatType">FastQ format type.</param>
            <returns>ASCII encoded quality score.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetEncodedQualScores(System.Int32[],Bio.FastQFormatType)">
            <summary>
            Gets the ASCII encoded quality scores for the given quality score.
            </summary>
            <param name="qualScores">Quality Score.</param>
            <param name="formatType">FastQ format type.</param>
            <returns>ASCII encoded quality scores.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.GetEncodedQualScores(System.SByte[],Bio.FastQFormatType)">
            <summary>
            Gets the ASCII encoded quality scores for the given quality score.
            </summary>
            <param name="qualScores">Quality Score.</param>
            <param name="formatType">FastQ format type.</param>
            <returns>ASCII encoded quality scores.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.Convert(Bio.QualitativeSequence.BaseQualityScoreType,Bio.QualitativeSequence.BaseQualityScoreType,System.Int32)">
            <summary>
            Converts quality score from fromQualityScore type to toQualityScore type
            Ex: Phred to Solexa or Solexa to Phred
            </summary>
            <param name="fromQualityScoreType">from quality score type.</param>
            <param name="toQualityScoreType">to quality score type.</param>
            <param name="qualScore">Quality score</param>
        </member>
        <member name="M:Bio.QualitativeSequence.Convert(Bio.QualitativeSequence.BaseQualityScoreType,Bio.QualitativeSequence.BaseQualityScoreType,System.SByte[])">
            <summary>
            Converts quality scores from fromQualityScore type to toQualityScore type
            Ex: Phred to Solexa or Solexa to Phred
            </summary>
            <param name="fromQualityScoreType">from quality score type.</param>
            <param name="toQualityScoreType">to quality score type.</param>
            <param name="qualScores">Quality scores</param>
        </member>
        <member name="M:Bio.QualitativeSequence.Convert(Bio.QualitativeSequence.BaseQualityScoreType,Bio.QualitativeSequence.BaseQualityScoreType,System.Int32[])">
            <summary>
            Converts quality scores from fromQualityScore type to toQualityScore type
            Ex: Phred to Solexa or Solexa to Phred
            </summary>
            <param name="fromQualityScoreType">from quality score type.</param>
            <param name="toQualityScoreType">to quality score type.</param>
            <param name="qualScores">Quality scores</param>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertPhredToSolexa(System.Int32)">
            <summary>
            Converts Phred quality score to Solexa quality score.
            </summary>
            <param name="phredQualityScore">Phred quality score.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.ConvertSolexaToPhred(System.Int32)">
            <summary>
            Converts Solexa quality score to Phred quality score.
            </summary>
            <param name="solexaQualityScore">Solexa quality score.</param>
        </member>
        <member name="M:Bio.QualitativeSequence.ValidateQualScores(System.Byte[],Bio.FastQFormatType,System.Byte@)">
            <summary>
            Validates whether the specified encoded quality scores are within the FastQFormatType limit or not.
            </summary>
            <param name="encodedQualScore">Encoded quality scores.</param>
            <param name="formatType">Fastq format type.</param>
            <param name="invalidQualScore">returns invalid encoded quality score if found.</param>
            <returns>Returns true if the specified encoded quality scores are with in the limit, otherwise false.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ValidateQualScores(System.SByte[],Bio.FastQFormatType,System.SByte@)">
            <summary>
            Validates whether the specified quality scores are within the FastQFormatType limit or not.
            </summary>
            <param name="qualScores">Quality scores in base type.</param>
            <param name="formatType">Fastq format type.</param>
            <param name="invalidQualScore">returns invalid quality score if found.</param>
            <returns>Returns true if the specified quality scores are with in the limit, otherwise false.</returns>
        </member>
        <member name="M:Bio.QualitativeSequence.ValidateQualScores(System.Int32[],Bio.FastQFormatType,System.Int32@)">
            <summary>
            Validates whether the specified quality scores are within the FastQFormatType limit or not.
            </summary>
            <param name="qualScores">Quality scores in base type.</param>
            <param name="formatType">Fastq format type.</param>
            <param name="invalidQualScore">returns invalid quality score if found.</param>
            <returns>Returns true if the specified quality scores are with in the limit, otherwise false.</returns>
        </member>
        <member name="P:Bio.QualitativeSequence.ID">
            <summary>
            Gets or sets the Identifier.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.Alphabet">
            <summary>
            Gets the alphabet to which symbols in this sequence belongs to.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.Count">
            <summary>
            Gets the number of bytes contained in the Sequence.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.FormatType">
            <summary>
            Gets the quality scores format type.
            Ex: Illumina/Solexa/Sanger.
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.Metadata">
            <summary>
            <para>
            Gets or sets the metadata for this qualitative sequence.
            </para>
            <para>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            </para>
            <para>
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            </para>
            <para>
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            </para>
            To fetch the data you would use:
            <para>
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            </para>
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            <para>
            GenBankMetadata genBankData = new GenBankMetadata();
            </para>
            <para>
            // ... add population code
            </para>
            <para>
            mySequence.MetaData["GenBank"] = genBankData;.
            </para>
            </summary>
        </member>
        <member name="P:Bio.QualitativeSequence.Item(System.Int64)">
            <summary>
            Returns the byte which represents the symbol found at the specified index if within bounds. Note 
            that the index value starts at 0.
            </summary>
            <param name="index">Index at which the symbol is required.</param>
            <returns>Symbol at the given index.</returns>
        </member>
        <member name="T:Bio.QualitativeSequence.BaseQualityScoreType">
            <summary>
            Base quality score type used in FastQ formats
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.BaseQualityScoreType.PhredBaseQualityScore">
            <summary>
            Phred base quality score.
            </summary>
        </member>
        <member name="F:Bio.QualitativeSequence.BaseQualityScoreType.SolexaBaseQualityScore">
            <summary>
            Solexa base quality score
            </summary>
        </member>
        <member name="T:Bio.Registration.BioRegisterAttribute">
            <summary>
            This attribute identifies a registered part (alphabet, algorithm, parser, formatter)
            The declared type must implement the proper interface to be identified correctly.
            </summary>
        </member>
        <member name="M:Bio.Registration.BioRegisterAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="declaredType">Declared type</param>
        </member>
        <member name="P:Bio.Registration.BioRegisterAttribute.DeclaredType">
            <summary>
            The registered type.
            </summary>
        </member>
        <member name="T:Bio.Registration.BioRegistrationService">
            <summary>
            This is used to lookup registered parts for .NET Bio 2.0
            </summary>
        </member>
        <member name="M:Bio.Registration.BioRegistrationService.LocateRegisteredParts``1">
            <summary>
            Locates the registered parts for .NET Bio 2.0
            </summary>
            <typeparam name="T">Type to look for.</typeparam>
            <returns>Enumerable of the given types.</returns>
        </member>
        <member name="T:Bio.Util.AccessFlags">
            <summary>
            Access flags that define what is allowed in a RestrictedAccessDictionary. The can be combined with bit-wise OR.
            </summary>
        </member>
        <member name="F:Bio.Util.AccessFlags.Add">
            <summary>
            Allow elements to be added.
            </summary>
        </member>
        <member name="F:Bio.Util.AccessFlags.Remove">
            <summary>
            Allow elements to be removed.
            </summary>
        </member>
        <member name="F:Bio.Util.AccessFlags.ChangeElements">
            <summary>
            Allow elements to be changed.
            </summary>
        </member>
        <member name="T:Bio.Util.RestrictedAccessDictionary`2">
            <summary>
            A thin wrapper around Dictionary that allows access permissions to be set. Any changes not allowed result in an exception.
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
        </member>
        <member name="M:Bio.Util.RestrictedAccessDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Create read-only dictionary by wrapping a dictionary.
            </summary>
            <param name="baseDictionary">The dictionary to wrap</param>
        </member>
        <member name="M:Bio.Util.RestrictedAccessDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},Bio.Util.AccessFlags)">
            <summary>
            Create a restricted access dictionary by wrapping a dictionary.
            </summary>
            <param name="baseDictionary">The dictionary to wrap</param>
            <param name="accessFlags">The flags that define how to restrict the dictionary.</param>
        </member>
        <member name="M:Bio.Util.RestrictedAccessDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove an item from a restricted dictionary if that is allowd. It is not, raise an exception.
            </summary>
            <param name="item">The item to remove</param>
            <returns>true if the item was in the dictionary; otherwise, false</returns>
        </member>
        <member name="M:Bio.Util.RestrictedAccessDictionary`2.GetEnumerator">
            <summary>
            Enumerate the KeyValuePairs of the dictionary
            </summary>
            <returns>A sequence of KeyValue pairs</returns>
        </member>
        <member name="P:Bio.Util.RestrictedAccessDictionary`2.AddIsAllowed">
            <summary>
            True if and only if this dictionary allows elements to be added.
            </summary>
        </member>
        <member name="P:Bio.Util.RestrictedAccessDictionary`2.RemoveIsAllowed">
            <summary>
            True if and only if this dictionary allows elments to be removed.
            </summary>
        </member>
        <member name="P:Bio.Util.RestrictedAccessDictionary`2.ChangeElementsIsAllowed">
            <summary>
            True if and only if this dictionary allows elements to change
            </summary>
        </member>
        <member name="T:Bio.SequenceRange">
            <summary>
            A SequenceRange holds the data necessary to represent a region within
            a sequence defined by its start and end index without necessarily holding
            any of the sequence item data. At a minimum and ID, start index, and end
            index are required. Additional metadata can be stored as well using a
            generic key value pair.
            </summary>
        </member>
        <member name="M:Bio.SequenceRange.#ctor">
            <summary>
            Default constructor that does not set any fields.
            </summary>
        </member>
        <member name="M:Bio.SequenceRange.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Data constructor that sets the most commonly used fields.
            Note that if the end value is less than start value then the end values is assigned to the start value.
            </summary>
            <param name="id">An ID for the range. This does not need to be unique, and often represents the chromosome of the range.</param>
            <param name="start">A starting index for the range. In the BED format this index starts counting from 0.</param>
            <param name="end">An ending index for the range. In the BED format this index is exclusive.</param>
        </member>
        <member name="M:Bio.SequenceRange.CompareTo(System.Object)">
            <summary>
            Compares two sequence ranges.
            </summary>
            <param name="obj">SequenceRange instance to compare.</param>
            <returns>
            If the Start values of the two ranges are identical then the
            result of this comparison is the result from calling CompareTo() on
            the two End values. If the Start values are not equal then the result
            of this comparison is the result of calling CompareTo() on the two
            Start values.
            </returns>
        </member>
        <member name="M:Bio.SequenceRange.CompareTo(Bio.ISequenceRange)">
            <summary>
            Compares two sequence ranges.
            </summary>
            <param name="other">SequenceRange instance to compare.</param>
            <returns>
            If the Start values of the two ranges are identical then the
            result of this comparison is the result from calling CompareTo() on
            the two End values. If the Start values are not equal then the result
            of this comparison is the result of calling CompareTo() on the two
            Start values.
            </returns>
        </member>
        <member name="M:Bio.SequenceRange.GetHashCode">
            <summary>
            Overrides hash function for a particular type.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Bio.SequenceRange.Equals(System.Object)">
            <summary>
            Overrides the equal method
            </summary>
            <param name="obj">Object to be checked</param>
            <returns>Is equals</returns>
        </member>
        <member name="M:Bio.SequenceRange.op_Equality(Bio.SequenceRange,Bio.SequenceRange)">
            <summary>
            Override equal operator
            </summary>
            <param name="leftHandSideObject">LHS object</param>
            <param name="rightHandSideObject">RHS object</param>
            <returns>Is LHS == RHS</returns>
        </member>
        <member name="M:Bio.SequenceRange.op_Inequality(Bio.SequenceRange,Bio.SequenceRange)">
            <summary>
            Override not equal operator
            </summary>
            <param name="leftHandSideObject">LHS object</param>
            <param name="rightHandSideObject">RHS object</param>
            <returns>Is LHS == RHS</returns>
        </member>
        <member name="M:Bio.SequenceRange.op_LessThan(Bio.SequenceRange,Bio.SequenceRange)">
            <summary>
            Override less than operator
            </summary>
            <param name="leftHandSideObject">LHS object</param>
            <param name="rightHandSideObject">RHS object</param>
            <returns>Is LHS == RHS</returns>
        </member>
        <member name="M:Bio.SequenceRange.op_GreaterThan(Bio.SequenceRange,Bio.SequenceRange)">
            <summary>
            Override greater than operator
            </summary>
            <param name="leftHandSideObject">LHS object</param>
            <param name="rightHandSideObject">RHS object</param>
            <returns>Is LHS == RHS</returns>
        </member>
        <member name="M:Bio.SequenceRange.ToString">
            <summary>
            Converts ID, Start, End of the sequence to string.
            </summary>
            <returns>ID, Start, End of the sequence.</returns>
        </member>
        <member name="P:Bio.SequenceRange.Start">
            <summary>
            The beginning index of the range. This index must be non-negative and
            it will be enforced to always be less than or equal to the End index.
            </summary>
        </member>
        <member name="P:Bio.SequenceRange.End">
            <summary>
            The end index of the range. This index must be non-negative and
            it will be enforced to always be greater than or equal to the Start index.
            </summary>
        </member>
        <member name="P:Bio.SequenceRange.ID">
            <summary>
            A string identifier of the sequence range.
            </summary>
        </member>
        <member name="P:Bio.SequenceRange.Length">
            <summary>
            The length of the range, which can be zero. This result is the
            difference of the End and Start index.
            </summary>
        </member>
        <member name="P:Bio.SequenceRange.Metadata">
            <summary>
            Optional additional data to store along with the ID and indices of
            the range. Metadata must be stored with a string key name.
            </summary>
        </member>
        <member name="P:Bio.SequenceRange.ParentSeqRanges">
            <summary>
            Gets the sequence ranges from which this sequence range is obtained.
            This property will be filled by the operations like Merge, Intersect etc.
            </summary>
        </member>
        <member name="T:Bio.SequenceRangeGrouping">
            <summary>
            A grouping of SequenceRange objects sorted by their ID values. The
            purpose of these groups is to allow a set of SequenceRange objects
            to be associated together by bucketing them into groups where each
            bucket has a unique SequenceRange ID and all SequenceRange objects
            within the bucket has that same ID.
            </summary>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.#ctor">
            <summary>
            Creates an empty grouping.
            </summary>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.#ctor(System.Collections.Generic.IEnumerable{Bio.ISequenceRange})">
            <summary>
            Creates a grouping object from a set of currently ungrouped
            ISequenceRange objects.
            </summary>
            <param name="ranges">Sequence ranges.</param>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.ToString">
            <summary>
            Converts sequence range from all the groups to string.
            </summary>
            <returns>Sequence range from all the groups.</returns>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.Add(Bio.ISequenceRange)">
            <summary>
            Adds a SequenceRange to the grouping, creating a new bucket
            if the ID of the range has not yet been added to the grouping
            or adding to an existing bucket if it has.
            </summary>
            <param name="range">The range item to add to the grouping</param>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.GetGroup(System.String)">
            <summary>
            Returns a list of SequenceRange objects each of which has the
            ID specified in the rangeID parameter.
            </summary>
            <param name="rangeID">The identification to look up in the grouping</param>
            <returns>The list of sequence ranges of the required group.</returns>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.Flatten">
            <summary>
            Ungroups each of the ISequenceRanges and places them into a flat list
            of every ISequenceRange stored across each of the groups in this grouping.
            The resulting list will still be ordered in such a way that each item of
            a particular group will be enumerated before starting the enumeration of
            items from another group.
            </summary>
            <returns>The flattened list of sequence ranges.</returns>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.MergeOverlaps(System.Int64,System.Boolean)">
            <summary>
            For each group in the grouping, this method traverses through each range
            in the group and normalizes the ranges down to the minimal spanning set
            required to still show the same range spans.
            
            For instance if you had in group 'Chr1' the following ranges:
            
            -> 10 to 100
            -> 200 to 250
            -> 35 to 45
            -> 90 to 150
            
            The result of MergeOverlaps would reduce the ranges in the 'Chr1' group to:
            For minOverlap = 0
            
            -> 10 to 150
            -> 200 to 250
            
            for minOverlap = -50
            
            -> 10 to 250
            
            Running this method creates all new ISequenceRange objects and adds them
            to the newly created SequenceRangeGrouping returned here.
            </summary>
            <param name="minOverlap">Minmum length of bases pairs should be overlapped.</param>
            <param name="isParentSeqRangesRequired">If this flag is set to true then the sequence ranges from 
            which the new sequence range is created are added to the ParentSeqRanges property of the 
            new sequence range.</param>
            <returns>The overlapped sequence range grouping.</returns>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.MergeOverlaps(Bio.SequenceRangeGrouping,System.Int64,System.Boolean)">
            <summary>
            Merges query sequence ranges with this sequence ranges.
            
            For example,
            
             Ranges in this instance   Ranges in the query 
               3 to  15                   4 to 10
               5 to  18                  11 to 20
            
             Result for minOverlap set to 1
              3 to 20
            
            Running this method creates all new ISequenceRange objects and adds them
            to the newly created SequenceRangeGrouping returned here.
            </summary>
            <param name="query">Query sequence ranges.</param>
            <param name="minOverlap">Minmum length of bases pairs should be overlapped.</param>
            <param name="isParentSeqRangesRequired">If this flag is set to true then the sequence ranges from 
            which the new sequence range is created are added to the ParentSeqRanges property of the 
            new sequence range.</param>
            <returns>The merged sequence range grouping.</returns>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.Intersect(Bio.SequenceRangeGrouping,System.Int64,Bio.IntersectOutputType,System.Boolean)">
            <summary>
            Returns overlapping sequence ranges from this and specified SequenceRangeGroup for each group in this grouping.
            
            For instance if you had in group 'Chr1' the following ranges:
            
             Ranges in this instance   Ranges in the query 
               0 to   10                 20 to   40
              30 to   50                 70 to  100     
              60 to   80                400 to  800
             300 to  500                850 to  900
             600 to  700                900 to 1200
             800 to 1000                
            
            Result for minOverlap set to 1
                1. If outputType is OverlappingPiecesOfIntervals.
                    30 to 40
                    70 to 80
                    400 to 500
                    600 o 700
                    850 to 900
                    900 to 1000
                2. If outputType is OverlappingIntervals
                     30 to   50
                     60 to   80
                    300 to  500
                    600 to  700
                    800 to 1000
                    
            Running this method creates all new ISequenceRange objects and adds them
            to the newly created SequenceRangeGrouping returned here.
            </summary>
            <param name="query">Query grouping.</param>
            <param name="minOverlap">Minmum length of bases pairs should be overlapped.
            By default this will be set to 1.</param>
            <param name="outputType">
            Type of output required, OverlappingPiecesOfIntervals or OverlappingIntervals. 
            By default this will be set to OverlappingPiecesOfIntervals that is only the base pairs that overlaps with 
            query ranges will be returned.</param>
            <param name="isParentSeqRangesRequired">If this flag is set to true then the sequence ranges from 
            which the new sequence range is created are added to the ParentSeqRanges property of the 
            new sequence ranges.</param>
            <returns>The intersected result.</returns>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.Subtract(Bio.SequenceRangeGrouping,System.Int64,Bio.SubtractOutputType,System.Boolean)">
            <summary>
            Subtracts the query SequenceRangeGrouping from this SequenceRangeGrouping.
            
            For example,
            
             Ranges in this instance   Ranges in the query 
                1 to  4                   2 to  6
                4 to  8                   3 to  6
                8 to 12                   9 to 14
               25 to 35
               
            Result for minOverlap set to 1
            1. If outputType is IntervalsWithNoOverlap
               25 to 35
               
            2. If outputType is NonOverlappingPiecesOfIntervals
               1 to  2
               6 to  8
               8 to  9
              25 to 35
              
            Running this method creates all new ISequenceRange objects and adds them
            to the newly created SequenceRangeGrouping returned here.
            </summary>
            <param name="query">Query grouping.</param>
            <param name="minOverlap">Minmum length of overlap. By default this will be set to 1</param>
            <param name="outputType">
            Type of output required, IntervalsWithNoOverlap or NonOverlappingPiecesOfIntervals. 
            By default this will be set to NonOverlappingPiecesOfIntervals that is non overlapping 
            pieces of intervels along with non overlapping ranges from this instance 
            will be returned.
            </param>
            <param name="isParentSeqRangesRequired">If this flag is set to true then the sequence ranges from 
            which the new sequence range is created are added to the ParentSeqRanges property of the 
            new sequence range.</param>
            <returns>The resultant Sequence range grouping.</returns>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.GetOverlappingRenges(Bio.ISequenceRange,System.Collections.Generic.List{Bio.ISequenceRange},System.Int64)">
            <summary>
            Return overlapping ranges from the query sequence ranges for the specified minimal overlap. 
            Note that this method does not verifies the id.
            This method is used by intersect and subtract methods.
            </summary>
            <param name="refSeqRange">Reference seq range</param>
            <param name="querySeqRanges">Query sequence ranges</param>
            <param name="minimalOverlap">Minimum overlap required.</param>
            <returns>Overlapping Ranges from query ranges.</returns>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.AddParent(Bio.ISequenceRange,Bio.ISequenceRange)">
            <summary>
            Adds specified parentrange to the specified range's metadata.
            </summary>
            <param name="range">ISequenceRange instance to which the parentrange to be added.</param>
            <param name="parentRange">Parent range of the specified range.</param>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.AddParent(Bio.ISequenceRange,System.Collections.Generic.IEnumerable{Bio.ISequenceRange})">
            <summary>
            Adds specified parentranges to the specified range's metadata.
            </summary>
            <param name="range">ISequenceRange instance to which the parentrange to be added.</param>
            <param name="parentRanges">Parent ranges of the specified range.</param>
        </member>
        <member name="M:Bio.SequenceRangeGrouping.CopyOfMetadata(Bio.ISequenceRange,Bio.ISequenceRange)">
            <summary>
            Copies the metadata from specified fromRange to toRange.
            </summary>
            <param name="toRange">Range to which the metadata has to be copied.</param>
            <param name="fromRange">Range from which the metadata has to be copied.</param>
        </member>
        <member name="P:Bio.SequenceRangeGrouping.GroupIDs">
            <summary>
            An enumeration of all the SequenceRange IDs contained in
            this grouping.
            </summary>
        </member>
        <member name="P:Bio.SequenceRangeGrouping.GroupRanges">
            <summary>
            Gets sequence range from all the groups
            </summary>
        </member>
        <member name="T:Bio.IntersectOutputType">
            <summary>
            This enum indicates type of output an intersect operation should return.
            </summary>
        </member>
        <member name="F:Bio.IntersectOutputType.OverlappingIntervals">
            <summary>
            OverlappingIntervals indicates that intersect operation should return 
            intervals from the reference that overlap with the query intervals. 
            This option only filters out intervals that do not overlap with the query intervals.
            </summary>
        </member>
        <member name="F:Bio.IntersectOutputType.OverlappingPiecesOfIntervals">
            <summary>
            OverlappingPiecesOfIntervals indicates that intersect operation should return intervals that 
            indicate the exact base pair overlap between the reference intervals and 
            the query intervals. 
            </summary>
        </member>
        <member name="T:Bio.SubtractOutputType">
            <summary>
            This enum indicates type of output an subtract operation should return.
            </summary>
        </member>
        <member name="F:Bio.SubtractOutputType.IntervalsWithNoOverlap">
            <summary>
            IntervalsWithNoOverlap indicates that subtract operation should return  
            intervals from the reference intervals that do not overlap with the query intervals. 
            This option only filters out intervals that overlap with the query intervals.
            </summary>
        </member>
        <member name="F:Bio.SubtractOutputType.NonOverlappingPiecesOfIntervals">
            <summary>
            NonOverlappingPiecesOfIntervals indicates that Subtract operation should return 
            intervals from the reference intervals that have the intervals from the query intervals removed. 
            Any overlapping base pairs are removed from the range of the interval.
            </summary>
        </member>
        <member name="T:Bio.SequenceStatistics">
            <summary>
            SequenceStatistics is used to keep track of the number of occurrences of each symbol within
            a sequence.
            </summary>
        </member>
        <member name="M:Bio.SequenceStatistics.#ctor(Bio.IAlphabet)">
            <summary>
            Constructs sequence statistics with alphabet and 0 counts.
            </summary>
            <param name="alphabet">The alphabet for the sequence.</param>
        </member>
        <member name="M:Bio.SequenceStatistics.#ctor(Bio.ISequence)">
            <summary>
            Constructs sequence statistics by iterating through a sequence.
            </summary>
            <param name="sequence">The sequence to construct statistics for.</param>
        </member>
        <member name="M:Bio.SequenceStatistics.LoadFromLongArray(System.Int64[])">
            <summary>
            This method takes an array of symbol counts and loads our dictionary.
            It collapses upper/lower case differences.
            </summary>
            <param name="symbolCounts"></param>
        </member>
        <member name="M:Bio.SequenceStatistics.GetCount(System.Char)">
            <summary>
            Gets the number of occurrences of a specific symbol.  This method does not perform
            any calculations to group counts of ambiguous symbols with corresponding unambiguous
            symbols.  So the minimum G-C content of a DNA sequence would be calculated as
            
                GetCount('G') + GetCount('C') + GetCount('S')
            </summary>
            <param name="symbol">The char representation of a symbol.</param>
            <returns>The number of occurrences of the given symbol.</returns>
        </member>
        <member name="M:Bio.SequenceStatistics.GetCount(System.Byte)">
            <summary>
            Gets the number of occurrences of the specific sequence char.  This method does not perform
            any calculations to group counts of ambiguous symbols with corresponding unambiguous
            symbols.  So the minimum G-C content of a DNA sequence would be calculated as
            
                GetCount('G') + GetCount('C') + GetCount('S')
            </summary>
            <param name="item">A byte of sequence.</param>
            <returns>The number of occurrences of the given a byte of sequence.</returns>
        </member>
        <member name="M:Bio.SequenceStatistics.GetFraction(System.Char)">
            <summary>
            Gets the fraction of occurrences of a specific symbol.  This method does not perform
            any calculations to group counts of ambiguous symbols with corresponding unambiguous
            symbols.  So the minimum G-C content of a DNA sequence would be calculated as
            
                GetFraction('G') + GetFraction('C') + GetFraction('S')
            </summary>
            <param name="symbol">The char representation of a symbol.</param>
            <returns>The fraction of occurrences of the given symbol.</returns>
        </member>
        <member name="M:Bio.SequenceStatistics.GetFraction(System.Byte)">
            <summary>
            Gets the fraction of occurrences of a specific sequence char.  This method does not perform
            any calculations to group counts of ambiguous symbols with corresponding unambiguous
            symbols.  So the minimum G-C content of a DNA sequence would be calculated as
            
                GetFraction('G') + GetFraction('C') + GetFraction('S')
            </summary>
            <param name="item">A sequence char.</param>
            <returns>The fraction of occurrences of the given sequence char.</returns>
        </member>
        <member name="M:Bio.SequenceStatistics.ToString">
            <summary>
            Converts the sequence chars with its count to string.
            </summary>
            <returns>Sequence chars with its count.</returns>
        </member>
        <member name="M:Bio.SequenceStatistics.Add(System.Char)">
            <summary>
            Increments the count of the given symbol.
            </summary>
            <param name="symbol">The symbol to add.</param>
        </member>
        <member name="M:Bio.SequenceStatistics.Remove(System.Char)">
            <summary>
            Decrements the count of the given char.
            </summary>
            <param name="symbol">The char to remove.</param>
        </member>
        <member name="P:Bio.SequenceStatistics.TotalCount">
            <summary>
            The total number of elements counted in this statistics set
            </summary>
        </member>
        <member name="P:Bio.SequenceStatistics.Alphabet">
            <summary>
            The alphabet used for the values in this statistics set
            </summary>
        </member>
        <member name="P:Bio.SequenceStatistics.SymbolCounts">
            <summary>
            The set of values counted (so it can be enumerated easily)
            </summary>
        </member>
        <member name="T:Bio.SimilarityMatrices.DiagonalSimilarityMatrix">
            <summary>
            Diagonal similarity matrix is a special case and needs its own class.
            It does not have an actual matrix, instead using a test "if (col == row)" and
            returning the diagonal value if true, and the off diagonal value if false.
            </summary>
        </member>
        <member name="T:Bio.SimilarityMatrices.SimilarityMatrix">
            <summary>
            Representation of a matrix that contains similarity scores for every 
            pair of symbols in an alphabet. BLOSUM and PAM are well-known examples.
            </summary>
        </member>
        <member name="F:Bio.SimilarityMatrices.SimilarityMatrix.similarityMatrix">
            <summary>
            Array containing the scores for each pair of symbols.
            The indices of the array are byte values of alphabet symbols.
            </summary>
        </member>
        <member name="F:Bio.SimilarityMatrices.SimilarityMatrix.supportedAlphabets">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bio.SimilarityMatrices.SimilarityMatrix.#ctor(Bio.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix)">
            <summary>
            Initializes a new instance of the SimilarityMatrix class
            Constructs one of the standard similarity matrices.
            </summary>
            <param name="matrixId">
            Matrix to load, BLOSUM and PAM currently supported.
            The enum StandardSimilarityMatrices contains list of available matrices.
            </param>
        </member>
        <member name="M:Bio.SimilarityMatrices.SimilarityMatrix.#ctor(System.IO.TextReader)">
            <remarks>
            File or stream format:
            There are two slightly different formats.
            <para>
            For custom similarity matrices:
            First line is descriptive name, will be stored as a string.
            Second line define the molecule type.  Must be "DNA", "RNA", or "Protein".
            Third line is alphabet (symbol map). It contains n characters and optional white space.
            Following lines are values for each row of matrix
            Must be n numbers per line, n lines
            </para>
            <para>
            In some cases the molecule type is implicit in the matrix.  This is true for the
            supported standard matrices (BLOSUM and PAM series at this point), and for the standard
            encodings IUPACna, NCBIA2na, NCBI2na, NCBI4na, and NCBIeaa.
            For these cases:
            First line is descriptive name, will be stored as a string.
            Second line is the encoding name for the standard encodings (IUPACna, NCBIA2na, NCBI2na, NCBI4na, or NCBIeaa)
                or the alphabet (symbol map) for the standard matrices.
            Following lines are values for each row of matrix
            Must be n numbers per line, n lines; or in the case of the supported encoding, sufficient
            entries to handle all possible indices (0 through max index value).
            </para>
            </remarks>
            <summary>
            Initializes a new instance of the SimilarityMatrix class.
            Constructs SimilarityMatrix from an input stream.
            </summary>
            <param name="reader">Text reader associated with the input sequence stream.</param>
        </member>
        <member name="M:Bio.SimilarityMatrices.SimilarityMatrix.#ctor">
            <summary>
            Initializes a new instance of the SimilarityMatrix class.
            </summary>
        </member>
        <member name="M:Bio.SimilarityMatrices.SimilarityMatrix.LoadFromStream(System.IO.TextReader,Bio.IAlphabet)">
            <summary>
            Reads similarity matrix from a stream.  File (or stream) format defined
            above with constructors to create SimilarityMatrix from stream or file.
            </summary>
            <param name="reader">Text reader associated with the input sequence stream.</param>
            <param name="moleculeType">Molecule type supported by SimilarityMatrix.</param>
        </member>
        <member name="M:Bio.SimilarityMatrices.SimilarityMatrix.ValidateSequence(Bio.ISequence)">
            <summary>
            Confirms that there is a symbol in the similarity matrix for every
            symbol in the sequence.
            </summary>
            <param name="sequence">Sequence to validate.</param>
            <returns>true if sequence is valid.</returns>
        </member>
        <member name="P:Bio.SimilarityMatrices.SimilarityMatrix.Name">
            <summary> 
            Gets or sets descriptive name of the particular SimilarityMatrix being used. 
            </summary>
        </member>
        <member name="P:Bio.SimilarityMatrices.SimilarityMatrix.Matrix">
            <summary>
            Gets or sets similarity matrix values in a 2-D integer array.
            </summary>
        </member>
        <member name="P:Bio.SimilarityMatrices.SimilarityMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Returns value of matrix at [row, col].
            </summary>
            <param name="row">
            Row number. This is same as byte value
            corresponding to sequence symbol on the row.
            </param>
            <param name="col">
            Column number. This is same as byte value
            corresponding to sequence symbol on the column.
            </param>
            <returns>Score value of matrix at [row, col].</returns>
        </member>
        <member name="T:Bio.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix">
            <summary>
            List of available standard similarity matrices.
            </summary>
            <remarks>
            BLOSUM matrices reference:
            S Henikoff and J G Henikoff,
            "Amino acid substitution matrices from protein blocks."
            Proc Natl Acad Sci U S A. 1992 November 15; 89(22): 10915–10919.  PMCID: PMC50453
            <para>
            Available at:
            <![CDATA[http://www.pubmedcentral.nih.gov/articlerender.fcgi?tool=EBI&pubmedid=1438297]]>
            </para>
            <para>
            PAM matrices reference:
            Dayhoff, M.O., Schwartz, R. and Orcutt, B.C. (1978), 
            "A model of Evolutionary Change in Proteins", 
            Atlas of protein sequence and structure (volume 5, supplement 3 ed.), 
            Nat. Biomed. Res. Found., p. 345-358, ISBN 0912466073.
            </para>
            </remarks>
        </member>
        <member name="F:Bio.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.Blosum45">
            <summary>
            BLOSUM45 Similarity Matrix.
            </summary>
        </member>
        <member name="F:Bio.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.Blosum50">
            <summary>
            BLOSUM50 Similarity Matrix.
            </summary>
        </member>
        <member name="F:Bio.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.Blosum62">
            <summary>
            BLOSUM62 Similarity Matrix.
            </summary>
        </member>
        <member name="F:Bio.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.Blosum80">
            <summary>
            BLOSUM80 Similarity Matrix.
            </summary>
        </member>
        <member name="F:Bio.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.Blosum90">
            <summary>
            BLOSUM90 Similarity Matrix.
            </summary>
        </member>
        <member name="F:Bio.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.Pam250">
            <summary>
            PAM250 Similarity Matrix.
            </summary>
        </member>
        <member name="F:Bio.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.Pam30">
            <summary>
            PAM30 Similarity Matrix.
            </summary>
        </member>
        <member name="F:Bio.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.Pam70">
            <summary>
            PAM70 Similarity Matrix.
            </summary>
        </member>
        <member name="F:Bio.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.AmbiguousDna">
            <summary>
            Simple DNA Similarity Matrix.
            </summary>
        </member>
        <member name="F:Bio.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.AmbiguousRna">
            <summary>
            RNA with ambiguous.
            </summary>
        </member>
        <member name="F:Bio.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.DiagonalScoreMatrix">
            <summary>
            Diagonal matrix.
            </summary>
        </member>
        <member name="F:Bio.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.EDnaFull">
            <summary>
            EDNAFull Similarity Matrix.
            </summary>
        </member>
        <member name="F:Bio.SimilarityMatrices.DiagonalSimilarityMatrix.diagonalValue">
            <summary>
            Score value at diagonals. To be used when (col == row).
            </summary>
        </member>
        <member name="F:Bio.SimilarityMatrices.DiagonalSimilarityMatrix.offDiagonalValue">
            <summary>
            Score value off diagonals. To be used when (col != row).
            </summary>
        </member>
        <member name="M:Bio.SimilarityMatrices.DiagonalSimilarityMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DiagonalSimilarityMatrix class.
            Creates a SimilarityMatrix with one value for match and one for mis-match.
            </summary>
            <param name="matchValue">Diagonal score for (col == row).</param>
            <param name="mismatchValue">Off-diagonal score for (col != row).</param>
        </member>
        <member name="P:Bio.SimilarityMatrices.DiagonalSimilarityMatrix.DiagonalValue">
            <summary>
            Gets or sets the diagonal value (match value) for the diagonal similarity matrix.
            </summary>
        </member>
        <member name="P:Bio.SimilarityMatrices.DiagonalSimilarityMatrix.OffDiagonalValue">
            <summary>
            Gets or sets the off diagonal value (mis-match value for the diagonal similarity matrix.
            </summary>
        </member>
        <member name="P:Bio.SimilarityMatrices.DiagonalSimilarityMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Returns value of diagonal similarity matrix at [row,col].
            </summary>
            <param name="row">
            Row number. This is same as byte value
            corresponding to sequence symbol on the row.
            </param>
            <param name="col">
            Column number. This is same as byte value
            corresponding to sequence symbol on the column.
            </param>
            <returns>Score value of matrix at [row,col].</returns>
        </member>
        <member name="T:Bio.SimpleConsensusResolver">
            <summary>
            Calculate the consensus for a list of symbols using simple frequency fraction method.
            Normal (non-gap) symbols are given a weight of 100. 
            The confidence of a symbol is the sum of weights for that symbol, 
            divided by the total number of symbols occurring at that position. 
            If symbols have confidence >= threshold, symbol corresponding 
            to set of these high confidence symbols is used.
            If no symbol meets the threshold, symbol corresponding 
            to set of all the symbols at that position is used.
            <para>
            For ambiguous symbols, the corresponding set of base symbols are retrieved.
            And for frequency calculation, each base symbol is given a weight of 
            (100 / number of base symbols).
            </para>
            </summary>
        </member>
        <member name="F:Bio.SimpleConsensusResolver.alphabetType">
            <summary>
            Holds the current alphabet type
            </summary>
        </member>
        <member name="M:Bio.SimpleConsensusResolver.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the SimpleConsensusResolver class.
            Sets user parameter threshold.
            </summary>
            <param name="threshold">Threshold Value.</param>
        </member>
        <member name="M:Bio.SimpleConsensusResolver.#ctor(Bio.IAlphabet,System.Double)">
            <summary>
            Initializes a new instance of the SimpleConsensusResolver class.
            </summary>
            <param name="seqAlphabet">Sequence Alphabet.</param>
            <param name="threshold">Threshold Value.</param>
        </member>
        <member name="M:Bio.SimpleConsensusResolver.#ctor(Bio.IAlphabet)">
            <summary>
            Initializes a new instance of the SimpleConsensusResolver class.
            Sets default value for threshold.
            </summary>
            <param name="seqAlphabet">Sequence Alphabet.</param>
        </member>
        <member name="M:Bio.SimpleConsensusResolver.GetConsensus(System.Byte[])">
            <summary>
            Gets consensus symbols for the input list, 
            using frequency fraction method.
            Refer class summary for more details.
            </summary>
            <param name="items">List of input symbols.</param>
            <returns>Consensus Symbol.</returns>
        </member>
        <member name="P:Bio.SimpleConsensusResolver.SequenceAlphabet">
            <summary>
            Gets or sets sequence alphabet
            </summary>
        </member>
        <member name="P:Bio.SimpleConsensusResolver.Threshold">
            <summary>
            Gets or sets threshold value - used when generating consensus symbol
            The confidence level for a position must equal or exceed Threshold for
            a non-gap symbol to appear in the consensus at that position.
            </summary>
        </member>
        <member name="T:Bio.SnpItem">
            <summary>
            Represents a single nucleotide polymporphism (Snp) at a particular
            position for a certain chromosome, with the two possible allele
            values for that position.
            </summary>
        </member>
        <member name="M:Bio.SnpItem.Equals(Bio.SnpItem)">
            <summary>
             Indicates whether the SnpItem is equal to another SnpItem. This compares
             the exact values of all four  
             AlleleOne is compared with other.AlleleOne, and 
             AlleleTwo is compared with other.AlleleTwo.
            </summary>
            <returns>
            true if the current SnpItem is equal to the other SnpItem; otherwise, false.
            </returns>
            <param name="other">A SnpItem to compare with this SnpItem.</param>
        </member>
        <member name="M:Bio.SnpItem.Equals(System.Object)">
            <summary>
             Indicates whether the SnpItem is equal to another SnpItem. This compares
             the exact values of all four properties. 
             AlleleOne is compared with other.AlleleOne, and 
             AlleleTwo is compared with other.AlleleTwo.
            </summary>
            <returns>
            true if the current SnpItem is equal to the other SnpItem; otherwise, false.
            </returns>
            <param name="obj">
            A SnpItem to compare with this SnpItem. If this parameter
            is not of type SnpItem, then false is returned.
            </param>
        </member>
        <member name="M:Bio.SnpItem.GetHashCode">
            <summary>
            Generates a unique hashcode based on the data members in the item.
            </summary>
        </member>
        <member name="P:Bio.SnpItem.Chromosome">
            <summary>
            Contains the chromosome number for the SNP
            </summary>
        </member>
        <member name="P:Bio.SnpItem.Position">
            <summary>
            Contains the position for the SNP within the sequence 
            (may be position in full sequence or offset within chromosome)
            </summary>
        </member>
        <member name="P:Bio.SnpItem.AlleleOne">
            <summary>
            Contains the first allele character for the SNP.
            </summary>
        </member>
        <member name="P:Bio.SnpItem.AlleleTwo">
            <summary>
            Contains the second allele character for the SNP.
            </summary>
        </member>
        <member name="T:Bio.SparseSequence">
             <summary>
             SparseSequence can hold discontinuous sequence. Use this class for storing the sequence items 
             with their known position from a long continuous sequence.  This class uses SortedDictionary to store 
             the sequence items with their position. Position is zero based indexes at which a sequence items 
             are present in the original continues sequence.
             For example: 
             To store sequence items at position 10, 101, 200, 1501 this class can be used as shown in the below code.
             
             // Create a SparseSequence by specifying the Alphabet.
             SparseSequence mySparseSequence= new SparseSequence(Alphabets.DNA);
             
             // By default count will be set to zero. To insert a sequence item at a position greater than zero,
             // Count has to be set to a value greater than the maximum position value. 
             // If try to insert a sequence item at a position greater than the count an exception will occur.
             // You can limit the SparseSequence length by setting the count to desired value. In this example it 
             will be 1502 as the maximum index is 1501.
             mySparseSequence.Count = 1502;
             
             // To access the value in a SparseSequence use Indexer or an Enumerator like below.
            
             // Accessing SparsesSequence using Indexer.
             byte seqItem1 = mySparseSequence [10] ;  // this will return sequence item A.
             byte seqItem2 = mySparseSequence [1501] ;  // this will return sequence item G.
             byte seqItem3 = mySparseSequence [102] ;  // this will return null as there is no sequence item at this position.
             
             // Accessing SparsesSequence using Enumerator.
             foreach(byte seqItem in mySparseSequence) {…}
             </summary>
        </member>
        <member name="F:Bio.SparseSequence.sparseSeqItems">
            <summary>
            Holds sequence items with their position.
            </summary>
        </member>
        <member name="F:Bio.SparseSequence.count">
            <summary>
            Holds size of this sequence.
            </summary>
        </member>
        <member name="F:Bio.SparseSequence.metadata">
            <summary>
            Metadata is features or references or related things of a sequence.
            </summary>
        </member>
        <member name="M:Bio.SparseSequence.#ctor(Bio.IAlphabet)">
            <summary>
            Creates a SparseSequence with no sequence data.
            
            Count property of SparseSequence instance created by using this constructor will be set to zero.
            
            For working with sequences that never have sequence data, but are
            only used for metadata storage (like keeping an ID or various features
            but no direct sequence data) consider using the VirtualSequence
            class instead.
            </summary>
            <param name="alphabet"> 
            The alphabet the sequence uses (e.g.. Alphabets.DNA or Alphabets.RNA or Alphabets.Protein)
            </param>
        </member>
        <member name="M:Bio.SparseSequence.#ctor(Bio.IAlphabet,System.Int32)">
            <summary>
            Creates a SparseSequence with no sequence data.
            
            Count property of SparseSequence instance created by using this constructor will be 
            set a value specified by size parameter.
            
            For working with sequences that never have sequence data, but are
            only used for metadata storage (like keeping an ID or various features
            but no direct sequence data) consider using the VirtualSequence
            class instead.
            </summary>
            <param name="alphabet"> 
            The alphabet the sequence uses (e.g.. Alphabets.DNA or Alphabets.RNA or Alphabets.Protein)
            </param>
            <param name="size">A value indicating the size of this sequence.</param>
        </member>
        <member name="M:Bio.SparseSequence.#ctor(Bio.IAlphabet,System.Int32,System.Byte)">
            <summary>
            Creates a sparse sequence based on the specified parameters.
            
            The item parameter must contain an alphabet as specified in the alphabet parameter,
            else an exception will occur.
            
            The index parameter value must be a non negative value.
            Count property of an instance created by this constructor will be set to value of index + 1.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (e.g. Alphabets.DNA or Alphabets.RNA or Alphabets.Protein)</param>
            <param name="index">Position of the specified sequence item.</param>
            <param name="item">A sequence item which is known by the alphabet.</param>
        </member>
        <member name="M:Bio.SparseSequence.#ctor(Bio.IAlphabet,System.Int32,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a sparse sequence based on the specified parameters.
            The sequenceItems parameter must contain sequence items known by the specified alphabet,
            else an exception will occur.
            
            The index parameter value must be a non negative. 
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (e.g.. Alphabets.DNA or Alphabets.RNA or Alphabets.Protein)</param>
            <param name="index">A non negative value which indicates the start position of the specified sequence items.</param>
            <param name="sequenceItems">
            A sequence which contain items known by the alphabet.</param>
        </member>
        <member name="M:Bio.SparseSequence.#ctor(Bio.ISequence)">
            <summary>
            Creates a sparse sequence based on the new passed sequence.
            </summary>
            <param name="newSequence">The New sequence for which the copy has to be made</param>
        </member>
        <member name="M:Bio.SparseSequence.GetReversedSequence">
            <summary>
            Return a sequence representing this sequence with the orientation reversed.
            </summary>
            <returns>The reversed sequence.</returns>
        </member>
        <member name="M:Bio.SparseSequence.GetComplementedSequence">
            <summary>
            Return a sequence representing the complement of this sequence.
            </summary>
            <returns>The complemented sequence.</returns>
        </member>
        <member name="M:Bio.SparseSequence.GetReverseComplementedSequence">
            <summary>
            Return a sequence representing the reverse complement of this sequence.
            </summary>
            <returns>The reverse complemented sequence.</returns>
        </member>
        <member name="M:Bio.SparseSequence.GetSubSequence(System.Int64,System.Int64)">
            <summary>
            Return a new sequence representing a range (subsequence) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The sub-sequence.</returns>
        </member>
        <member name="M:Bio.SparseSequence.CopyTo(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Copies all items from the sequence to a pre allocated array.
            </summary>
            <param name="byteArray">Array to fill the items to.</param>
            <param name="start">Index at which the filling starts.</param>
            <param name="count">Total numbers of elements to be copied.</param>
        </member>
        <member name="M:Bio.SparseSequence.IndexOfNonGap">
            <summary>
            Gets the index of first non gap character.
            </summary>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.SparseSequence.IndexOfNonGap(System.Int64)">
            <summary>
            Returns the position of the first item from startPos that does not 
            have a Gap character.
            </summary>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.SparseSequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non gap character.
            </summary>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.SparseSequence.LastIndexOfNonGap(System.Int64)">
            <summary>
            Gets the index of last non gap character within the specified end position.
            </summary>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.SparseSequence.GetKnownSequenceItems">
            <summary>
            Returns known sequence items with their position as ReadOnlyCollection of IndexedSequenceItem.
            </summary>
            <returns>Sequence items with their position as ReadOnlyCollection of IndexedSequenceItem.</returns>
        </member>
        <member name="M:Bio.SparseSequence.GetEnumerator">
            <summary>
            Gets an enumerator to the bytes present in this sequence.
            </summary>
            <returns>An IEnumerator of bytes.</returns>
        </member>
        <member name="M:Bio.SparseSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to the bytes present in this sequence.
            </summary>
            <returns>An IEnumerator of bytes.</returns>
        </member>
        <member name="M:Bio.SparseSequence.Replace(System.Int64,System.Byte)">
            <summary>
            Replaces the sequence item present in the specified position in this sequence with the specified sequence item. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="item">Sequence item to be placed at the specified position.</param>
        </member>
        <member name="P:Bio.SparseSequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.Count">
            <summary>
            The number of sequence items contained in the Sequence.
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.Alphabet">
            <summary>
            The alphabet to which string representations of the sequence should
            conform.
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.Statistics">
            <summary>
            Keeps track of the number of occurrences of each symbol within a sequence.
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            
            To fetch the data you would use:
            
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="P:Bio.SparseSequence.Item(System.Int64)">
            <summary>
            Allows the sequence to function like an array, gets
            the sequence item at the specified index. Note that the
            index value starts its count at 0.
            </summary>
        </member>
        <member name="T:Bio.StringListValidator">
            <summary>
            A validator for string values that has a specific list of allowed values.
            </summary>
        </member>
        <member name="M:Bio.StringListValidator.#ctor(System.String[])">
            <summary>
            Constructor that initializes the value list. IgnoreCase defaults to false.
            </summary>
            <param name="values">An array of valid value strings.</param>
        </member>
        <member name="M:Bio.StringListValidator.#ctor(System.Boolean,System.String[])">
            <summary>
            Constructor that allows case sensitivity to be specified.
            </summary>
            <param name="ignoreCase">true means case will be ignored when validating.</param>
            <param name="values">An array of valid value strings.</param>
        </member>
        <member name="M:Bio.StringListValidator.AddValidValues(System.String[])">
            <summary>
            Add one or more strings to the list of valid values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Bio.StringListValidator.IsValid(System.Object)">
            <summary>
            Given a string value as an object, return true if the value is in the list.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="M:Bio.StringListValidator.IsValid(System.String)">
            <summary>
            Given a string value, return true if the value is in the list.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="P:Bio.StringListValidator.ValidValues">
            <summary>
            The list of allowed values.
            </summary>
        </member>
        <member name="P:Bio.StringListValidator.IgnoreCase">
            <summary>
            If IgnoreCase is false (the default), a string will only be considered
            valid if it matches one of the stored values exactly, including case.
            Otherwise, any case (including mixed) is accepted.
            </summary>
        </member>
        <member name="T:Bio.Util.ComparisonWrapper`1">
            <summary>
            Wrapper class to use Comparison delegate.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
        </member>
        <member name="M:Bio.Util.ComparisonWrapper`1.#ctor(System.Comparison{`0})">
            <summary>
            Creates an instance of ComparisonWrapper class.
            </summary>
            <param name="comparison">Comparison delegate to use.</param>
        </member>
        <member name="M:Bio.Util.ComparisonWrapper`1.Compare(`0,`0)">
            <summary>
            Compares two instance and returns a value indicating whether one is less than,
                equal to, or greater than the other.
                <para>For more detail see the below table.</para> 
                <para>-----------------------------------------</para>
                <para>Value             | Meaning             |</para>
                <para>-----------------------------------------</para>
                <para>Less than zero    | x is less than y.   |</para>
                <para>Zero              | x equals y          |</para>
                <para>Greater than zero | x is greater than y |</para>
                <para>-----------------------------------------</para>
            </summary>
            <param name="x">The first instance to compare</param>
            <param name="y">The second instance to compare</param>
        </member>
        <member name="P:Bio.Util.ComparisonWrapper`1.Comparison">
            <summary>
            Gets Comparison delegate.
            </summary>
        </member>
        <member name="T:Bio.Util.DeltaAlignmentSorter">
            <summary>
            DeltaAlignment sorter.
            Uses AVL tree to sort the deltaAligmments on FirstSequenceStart.
            </summary>
        </member>
        <member name="F:Bio.Util.DeltaAlignmentSorter.HooksIntervals">
            <summary>
            Intervals at which Hooks are needed.
            This value is decided on,
                1. No of elements can be stored in "holderHooks".
                2. Time required to travel in between Hooks.
            The value 1000 is decided as 1GB is the max known chromosome size and thus
            ~1Million entries will be added to the "holderHooks".
            </summary>
        </member>
        <member name="F:Bio.Util.DeltaAlignmentSorter.HoldersCapacityIncrementsBy">
            <summary>
            Holds minimum no of holders to be added when value of node being 
            added is more than the holders capacity.
            Adding holders one by one take more time.
            Thus allocate an appropriate number of holders at a time.
            </summary>
        </member>
        <member name="F:Bio.Util.DeltaAlignmentSorter.endHolder">
            <summary>
            Holds the end holder.
            </summary>
        </member>
        <member name="F:Bio.Util.DeltaAlignmentSorter.holderCapacity">
            <summary>
            Capacity of this holder.
            </summary>
        </member>
        <member name="F:Bio.Util.DeltaAlignmentSorter.holderHooks">
            <summary>
            In worst scenario i.e, for 1GB chromosome ~1million entries of 
            holder's reference will be added. 
            For 100MB sequence ~105,000 entries will be added.
            Thus it is safe to use List for hooks.
            Note:  that first entry of hooks will start at HooksIntervals and not from zero.
                  as Root it self is a hook at zero position.
            </summary>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentSorter.#ctor">
            <summary>
            Initializes a new instance of the DeltaAlignmentSorter class.
            </summary>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentSorter.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the DeltaAlignmentSorter class with specified capacity.
            </summary>
            <param name="referenceSequenceLength">Reference sequence length.</param>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentSorter.Add(System.Int64,System.Int64)">
            <summary>
            Adds id and value to sort.
            </summary>
            <param name="id">Id of the delta alignment.</param>
            <param name="value">Value to sort.</param>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentSorter.GetSortedIds">
            <summary>
            Gets the ids which are sorted on value.
            </summary>
            <returns>IEnumerable of ids.</returns>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentSorter.GetSortedNodes">
            <summary>
            Gets id and value pair sorted on value.
            </summary>
            <returns>IEnumerable of id and value pair.</returns>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentSorter.Add(Bio.Util.Node)">
            <summary>
            Adds a node.
            </summary>
            <param name="node">Node to add.</param>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentSorter.IncreaseCapacityTo(System.Int64)">
            <summary>
            Increases the capacity to specified value.
            </summary>
            <param name="capacity">New capacity.</param>
            <returns>Returns the last holder.</returns>
        </member>
        <member name="M:Bio.Util.DeltaAlignmentSorter.GetHolderFor(System.Int64)">
            <summary>
            Gets the holder for the specified value.
            </summary>
            <param name="value">Value for which holder is required.</param>
        </member>
        <member name="P:Bio.Util.DeltaAlignmentSorter.Count">
            <summary>
            Gets the number of delta alignments present.
            </summary>
        </member>
        <member name="P:Bio.Util.DeltaAlignmentSorter.Root">
            <summary>
            Gets the first holder.
            </summary>
        </member>
        <member name="T:Bio.Util.Holder">
            <summary>
            Class to hold nodes.
            Used to hold nodes having same value.
            </summary>
        </member>
        <member name="P:Bio.Util.Holder.Right">
            <summary>
            Gets or sets next holder.
            </summary>
        </member>
        <member name="P:Bio.Util.Holder.ValueNode">
            <summary>
            Gets or sets a node.
            </summary>
        </member>
        <member name="T:Bio.Util.Node">
            <summary>
            Class to hold id and value pair.
            </summary>
        </member>
        <member name="P:Bio.Util.Node.ID">
            <summary>
            Gets or sets Id of the delta alignment.
            </summary>
        </member>
        <member name="P:Bio.Util.Node.Value">
            <summary>
            Gets or sets Value to sort.
            </summary>
        </member>
        <member name="P:Bio.Util.Node.Next">
            <summary>
            Gets or sets next node having same value.
            </summary>
        </member>
        <member name="T:Bio.Util.HashSetComparer`1">
            <summary>
            A basic hashset comparer which compares the contents of two hashsets.
            Basically built to use with Dictionary.
            </summary>
            <typeparam name="T">Type of hashset.</typeparam>
        </member>
        <member name="M:Bio.Util.HashSetComparer`1.Equals(System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0})">
            <summary>
            Checks if two hashSets contain same set of items or not.
            </summary>
            <param name="x">First hashset.</param>
            <param name="y">Second hashset.</param>
            <returns>Returns true if both have equal data.</returns>
        </member>
        <member name="M:Bio.Util.HashSetComparer`1.GetHashCode(System.Collections.Generic.HashSet{`0})">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <param name="obj">Object of which hashcode has to calculated.</param>
            <returns>A hash code for the current System.Object.</returns>
        </member>
        <member name="T:Bio.Algorithms.Kmer.IKmerBuilder">
            <summary>
            This interface defines contract for classes that implement construction 
            of k-mer sequences from input sequences. It provides methods that take 
            input sequence(s) and construct corresponding k-mers.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Kmer.IKmerBuilder.Build(Bio.ISequence,System.Int32)">
            <summary>
            Builds k-mers for input sequence and constructs KmersOfSequence 
            corresponding to the sequence and associated k-mers.
            </summary>
            <param name="sequence">Input Sequence.</param>
            <param name="kmerLength">K-mer length.</param>
            <returns>KmersOfSequence constructed from sequence and associated k-mers.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.IKmerBuilder.Build(System.Collections.Generic.IEnumerable{Bio.ISequence},System.Int32)">
            <summary>
            Builds k-mers for a list of input sequences.
            For each sequence in input list, constructs a KmersOfSequence 
            corresponding to the sequence and associated k-mers.
            </summary>
            <param name="sequences">List of input sequences.</param>
            <param name="kmerLength">K-mer length.</param>
            <returns>List of KmersOfSequence instances.</returns>
        </member>
        <member name="T:Bio.Algorithms.Kmer.KmerData32">
            <summary>
            Holds the KmerData.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Kmer.KmerData32.DNA_A_VALUE">
            <summary>
            Value to encode an A with as 2 bits
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Kmer.KmerData32.DNA_C_VALUE">
            <summary>
            Value to encode a C with as 2 bits
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Kmer.KmerData32.DNA_G_VALUE">
            <summary>
            Value to encode a G with as 2 bits
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Kmer.KmerData32.DNA_T_VALUE">
            <summary>
            Value to encode a T with as 2 bits
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Kmer.KmerData32.MAX_KMER_LENGTH">
            <summary>
            Maximum allowed value for a kmer
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Kmer.KmerData32.MIN_KMER_LENGTH">
            <summary>
            Minimum allowed value for a kmer
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerData32.GetOriginalSymbols(System.Int32)">
            <summary>
            Returns the decompressed value of the kmer from the De-Bruijn node.
            Note: use this method to get the original sequence symbols.
            </summary>
            <param name="kmerLength">Length of the kmer.</param>
            <returns>Decompressed value of the kmer.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerData32.GetReverseComplementOfOriginalSymbols(System.Int32)">
            <summary>
            Note: use this method to get the original sequence symbols.
            </summary>
            <param name="kmerLength">Length of the kmer.</param>
            <returns>Returns the reverse complement of the decompressed kmer.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerData32.SetKmerData(Bio.ISequence,System.Int64,System.Int32)">
            <summary>
            Sets the kmer value from the specific sequence.
            </summary>
            <param name="sequence">Sequence who value is to be compressed.</param>
            <param name="from">Start position from where the kmer to be extracted.</param>
            <param name="kmerLength">Length of the kmer.</param>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerData32.GetKmers(Bio.ISequence,System.Int32)">
            <summary>
            Iterates through a sequence producing all possible kmers in it.
            </summary>
            <param name="sequence"></param>
            <param name="kmerLength"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerData32.SetKmerData(System.UInt64,System.Int32)">
            <summary>
            Sets the kmer value from the specific sequence.
            </summary>
            <param name="encodedKmer">The kmer to encode, will be reverse complimented if need be.</param>
            <param name="kmerLength">Length of the kmer.</param>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerData32.SetKmerData(System.Byte[],System.Int32)">
            <summary>
            Sets the kmer value from the specific sequence.
            Note: Used in generating the links.
             Do not use this method to add kmerData to the tree.
            </summary>
            <param name="sequence">Sequence who value is to be compressed.</param>
            <param name="kmerLength">Length of the kmer.</param>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerData32.IsPalindrome(System.Int32)">
            <summary>
            Checks whether the kmer value is palindrome or not.
            </summary>
            <returns>True if the kmer value is palindrome else false.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerData32.CompareTo(Bio.Algorithms.Kmer.KmerData32)">
            <summary>
            Compares this instance to a specified instance of IKmerData and returns an indication of their relative values.
            </summary>
            <param name="other">Instance of the IKmerData to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance. Zero This
            instance is equal to value. Greater than zero This instance is greater than
            value.
            </returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerData32.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified instance of object and returns an indication of their relative values.
            </summary>
            <param name="value">Instance of the object to compare.</param>
            <returns>
             A signed number indicating the relative values of this instance. Zero This
             instance is equal to value. Greater than zero This instance is greater than
             value.
            </returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerData32.GetFirstSymbol(System.Int32,System.Boolean)">
            <summary>
            Returns the first symbol of the sequence.
            </summary>
            <returns>Returns the first symbol from the decompressed kmer value.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerData32.GetLastSymbol(System.Int32,System.Boolean)">
            <summary>
            Returns the last symbol of the sequence.
            </summary>
            <returns>Returns the last symbol from the decompressed kmer value.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerData32.GetKmerData(System.Int32)">
            <summary>
            Returns the decompressed value of the kmer.
            </summary>
            <param name="kmerLength">Length of the kmer.</param>
            <returns>Decompressed value of the kmer.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerData32.GetReverseComplementOfKmerData(System.Int32)">
            <summary>
            Returns the reverse complement of the kmer value.
            </summary>
            <param name="kmerLength">Length of the kmer.</param>
            <returns>Returns the reverse complement of the kmer.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerData32.GetReverseComplement(System.UInt64,System.Int32)">
            <summary>
            Generates reverse complement for long compressed kmer.
            </summary>
            <param name="kmer">Compressed kmer.</param>
            <param name="kmerLength">Kmer length.</param>
            <returns>Long representation of reverse complement kmer.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerData32.ConvertSequenceToLong(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Converts sequence to long.
            If kmer length is less than or equal to 32, we can fit into a usigned 64 bit long.
            </summary>
            <param name="sequence">Kmer sequence.</param>
            <returns>Compressed kmer.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerData32.ConvertLongToSequence(System.UInt64,System.Int32)">
            <summary>
            Decompress kmer as long to sequence.
            </summary>
            <param name="compressedKmer">Compressed kmer.</param>
            <param name="kmerLength">Kmer Length.</param>
            <returns>Kmer sequence.</returns>
        </member>
        <member name="P:Bio.Algorithms.Kmer.KmerData32.KmerData">
            <summary>
            Compressed value of the kmer that will be stored in the De-Bruijn Node.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Kmer.KmerIndexer">
            <summary>
            Structure that maintains sequence index, count information 
            and orientation for k-mer.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerIndexer.#ctor(System.Int64,System.Collections.Generic.IList{System.Int64})">
            <summary>
            Initializes a new instance of the KmerIndexer class.
            </summary>
            <param name="sequenceIndex">Index of source sequence.</param>
            <param name="positions">List of k-mer positions.</param>
        </member>
        <member name="P:Bio.Algorithms.Kmer.KmerIndexer.Positions">
            <summary>
            Gets the starting position within sequence.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Kmer.KmerIndexer.SequenceIndex">
            <summary>
            Gets sequence index.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Kmer.KmerIndexerDictionary">
            <summary>
            Wrapper for dictionary that maps kmer strings 
            to list of sequence index and positions of occurrence.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Kmer.KmerIndexerDictionary.kmerIndexer">
            <summary>
            Maps kmer to list of KmerIndexer.
            Each KmerIndexer point to places of occurrence of kmer.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerIndexerDictionary.#ctor">
            <summary>
            Initializes a new instance of the KmerIndexerDictionary class.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerIndexerDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the KmerIndexerDictionary class with specified capacity.
            </summary>
            <param name="capacity">Number of elements to store.</param>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerIndexerDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the 
            kmer and corresponding list of positions.
            </summary>
            <returns>Enumerator over kmers.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerIndexerDictionary.ContainsKey(Bio.ISequence)">
            <summary>
            Determines whether kmer dictionary contains specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>Boolean indicating if key exists.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerIndexerDictionary.TryGetValue(Bio.ISequence,System.Collections.Generic.IList{Bio.Algorithms.Kmer.KmerIndexer}@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">Contains value associated with.
            the specified key, if key is found.</param>
            <returns>Boolean indicating if key was found.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerIndexerDictionary.Add(Bio.ISequence,System.Collections.Generic.IList{Bio.Algorithms.Kmer.KmerIndexer})">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="P:Bio.Algorithms.Kmer.KmerIndexerDictionary.Item(Bio.ISequence)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="T:Bio.Algorithms.Kmer.KmerPositionDictionary">
            <summary>
            Wrapper for dictionary that maps kmer strings 
            to list of positions of occurrence. 
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Kmer.KmerPositionDictionary.kmerDictionary">
            <summary>
            Maps kmer to list of positions of occurrence. 
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerPositionDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the 
            kmer and corresponding list of positions.
            </summary>
            <returns>Enumerator over kmers.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmerPositionDictionary.ContainsKey(Bio.ISequence)">
            <summary>
            Determines whether kmer dictionary contains specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>Boolean indicating if key exists.</returns>
        </member>
        <member name="P:Bio.Algorithms.Kmer.KmerPositionDictionary.Count">
            <summary>
            Gets the number of elements present in this instance.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Kmer.KmerPositionDictionary.Item(Bio.ISequence)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="T:Bio.Algorithms.Kmer.KmersOfSequence">
            <summary>
            Contains base sequence, and information regarding associated k-mers.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmersOfSequence.#ctor(Bio.ISequence,System.Int32,System.Collections.Generic.HashSet{Bio.Algorithms.Kmer.KmersOfSequence.KmerPositions})">
            <summary>
            Initializes a new instance of the KmersOfSequence class.
            Takes k-mer sequence and occurring position.
            </summary>
            <param name="sequence">Source sequence.</param>
            <param name="kmerLength">Length of k-mer.</param>
            <param name="kmers">Set of associated k-mers.</param>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmersOfSequence.#ctor(Bio.ISequence,System.Int32)">
            <summary>
            Initializes a new instance of the KmersOfSequence class.
            Takes k-mer sequence and k-mer length.
            </summary>
            <param name="sequence">Source sequence.</param>
            <param name="kmerLength">Length of k-mer.</param>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmersOfSequence.KmersToSequences">
            <summary>
            Returns the associated k-mers as a list of k-mer sequences.
            </summary>
            <returns>List of k-mer sequences.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmersOfSequence.KmerToSequence(Bio.Algorithms.Kmer.KmersOfSequence.KmerPositions)">
            <summary>
            Builds the sequence corresponding to input kmer, 
            using base sequence.
            </summary>
            <param name="kmer">Input k-mer.</param>
            <returns>Sequence corresponding to input k-mer.</returns>
        </member>
        <member name="P:Bio.Algorithms.Kmer.KmersOfSequence.Length">
            <summary>
            Gets the length of associated k-mers.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Kmer.KmersOfSequence.Kmers">
            <summary>
            Gets the set of associated Kmers.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Kmer.KmersOfSequence.BaseSequence">
            <summary>
            Gets the base sequence.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Kmer.KmersOfSequence.KmerPositions">
            <summary>
            Contains information regarding k-mer
            position in the base sequence.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Kmer.KmersOfSequence.KmerPositions.#ctor(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Initializes a new instance of the KmerPositions class.
            </summary>
            <param name="positions">List of positions.</param>
        </member>
        <member name="P:Bio.Algorithms.Kmer.KmersOfSequence.KmerPositions.Positions">
            <summary>
            Gets the list of positions for the k-mer.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Kmer.KmersOfSequence.KmerPositions.Count">
            <summary>
            Gets the number of positions.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Kmer.SequenceToKmerBuilder">
            <summary>
            Constructs k-mers from given input sequence(s).
            For each input sequence, k-mers are constructed by sliding 
            a frame of size kmerLength along the input sequence, 
            and extracting sub-sequence inside the frame.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Kmer.SequenceToKmerBuilder.BuildKmerDictionary(System.Collections.Generic.IList{Bio.ISequence},System.Int32)">
            <summary>
            Builds k-mers from a list of given input sequences.
            For each sequence in input list, constructs a KmersOfSequence 
            corresponding to the sequence and associated k-mers.
            </summary>
            <param name="sequences">List of input sequences.</param>
            <param name="kmerLength">K-mer length.</param>
            <returns>List of KmersOfSequence instances.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.SequenceToKmerBuilder.BuildKmerDictionary(Bio.ISequence,System.Int32)">
            <summary>
            For input sequence, constructs k-mers by sliding 
            a frame of size kmerLength along the input sequence.
            Track positions of occurance for each kmer in sequence.
            Constructs KmersOfSequence for sequence and associated k-mers.
            </summary>
            <param name="sequence">Input sequence.</param>
            <param name="kmerLength">K-mer length.</param>
            <returns>KmersOfSequence constructed from sequence and associated k-mers.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.SequenceToKmerBuilder.GetKmerSequences(Bio.ISequence,System.Int32)">
            <summary>
            Gets the set of kmer strings that occur in given sequences.
            </summary>
            <param name="sequence">Source Sequence.</param>
            <param name="kmerLength">Kmer Length.</param>
            <returns>Set of kmer strings.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.SequenceToKmerBuilder.Build(System.Collections.Generic.IEnumerable{Bio.ISequence},System.Int32)">
            <summary>
            Builds k-mers from a list of given input sequences.
            For each sequence in input list, constructs a KmersOfSequence 
            corresponding to the sequence and associated k-mers.
            </summary>
            <param name="sequences">List of input sequences.</param>
            <param name="kmerLength">K-mer length.</param>
            <returns>List of KmersOfSequence instances.</returns>
        </member>
        <member name="M:Bio.Algorithms.Kmer.SequenceToKmerBuilder.Build(Bio.ISequence,System.Int32)">
            <summary>
            For input sequence, constructs k-mers by sliding 
            a frame of size kmerLength along the input sequence.
            Track positions of occurrence for each kmer in sequence.
            Constructs KmersOfSequence for sequence and associated k-mers.
            </summary>
            <param name="sequence">Input sequence.</param>
            <param name="kmerLength">K-mer length.</param>
            <returns>KmersOfSequence constructed from sequence and associated k-mers.</returns>
        </member>
        <member name="T:Bio.Properties.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.Ab1ColorDataFromByteArrayEvenNumberRequired">
            <summary>
              Looks up a localized string similar to Byte array must have an even number of values..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.Ab1InvalidFileSignatureExceptionFormat">
            <summary>
              Looks up a localized string similar to The file signature {0} does not match the expected signature of {1}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.Ab1InvalidFileVersionExceptionFormat">
            <summary>
              Looks up a localized string similar to Invalid file version.  Expected version {0}, actual version was {1}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.AccessionSequenceNotFound">
            <summary>
              Looks up a localized string similar to Sequence for the accession number {0} not found..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.AlignedSequenceCount">
            <summary>
              Looks up a localized string similar to Aligned sequences count cannot be 0.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ALPHABET_NULL">
            <summary>
              Looks up a localized string similar to SequenceAlphabet is null. Set it to correct alphabet!.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.AlphabetMisMatch">
            <summary>
              Looks up a localized string similar to Alphabet of Reference sequence is not matching with the alphabet of query sequence..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.AmbiguousDnaAlphabetName">
            <summary>
              Looks up a localized string similar to AmbiguousDna.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.AmbiguousProteinAlphabetName">
            <summary>
              Looks up a localized string similar to AmbiguousProtein.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.AmbiguousRnaAlphabetName">
            <summary>
              Looks up a localized string similar to AmbiguousRna.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.APPLIEDBIOSYSTEMS_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Parse applied biosystems binary format as defined in http://www6.appliedbiosystems.com/support/software_community/ABIF_File_Format.pdf..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.APPLIEDBIOSYSTEMS_FILETYPES">
            <summary>
              Looks up a localized string similar to .abi,.ab1.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.APPLIEDBIOSYSTEMS_NAME">
            <summary>
              Looks up a localized string similar to Applied Biosystems.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ARGUMENT_OUT_OF_RANGE">
            <summary>
              Looks up a localized string similar to Start of range must be smaller than end..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.AZURE_BLAST_NAME">
            <summary>
              Looks up a localized string similar to Azure BLAST.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_BAMFileNIndexFileContbeSame">
            <summary>
              Looks up a localized string similar to BAM filename and Index filename can&apos;t be same..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_CantUseBAMIndexStreamDisposed">
            <summary>
              Looks up a localized string similar to Can&apos;t use this instance anymore as underlying stream is already disposed..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .bam.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_FormatMultipleAlignmentsNotSupported">
            <summary>
              Looks up a localized string similar to BAM format does not supports writing multiple ISequenceAlignment objects to a file..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_FormatStringNotSupported">
            <summary>
              Looks up a localized string similar to BAM formatter does not support formatting to string..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_INDEXFILEEXTENSION">
            <summary>
              Looks up a localized string similar to .bai.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_InvalidBAMFile">
            <summary>
              Looks up a localized string similar to Invalid BAM file..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_InvalidCIGAR">
            <summary>
              Looks up a localized string similar to Invalid CIGAR found..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_InvalidEncodedSequenceValue">
            <summary>
              Looks up a localized string similar to Invalid encoded sequence value.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_InvalidIndexFile">
            <summary>
              Looks up a localized string similar to Invalid BAM index file..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_InvalidIntValueInOptField">
            <summary>
              Looks up a localized string similar to Invalid integer value &quot;{0}&quot; found in optional field &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_InvalidIntValueInOptFieldOfAlignedSeq">
            <summary>
              Looks up a localized string similar to Invalid integer value &quot;{0}&quot; found in optional field &quot;{1}&quot; of the alingned seq &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_InvalidOptValType">
            <summary>
              Looks up a localized string similar to Invalid optional valuetype.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_NAME">
            <summary>
              Looks up a localized string similar to BAM.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_RefSeqNotFound">
            <summary>
              Looks up a localized string similar to Reference sequence name \&quot;{0}\&quot; not found..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_TextreaderNotSupportedMessage">
            <summary>
              Looks up a localized string similar to BAM parser does not supports reading from a text reader..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_TextWriterNotSupported">
            <summary>
              Looks up a localized string similar to BAM formatter does not support writing to text writer..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAM_UnableToReadCompressedBlock">
            <summary>
              Looks up a localized string similar to Unable to read compressed block.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAMFORMATTER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Writes a SequenceAlignmentMap to a particular location, usually a file. 
            The output is formatted according to the BAM file format..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAMFormatterSupportsDNAOnly">
            <summary>
              Looks up a localized string similar to BAM only supports SAMDNA aplhabet..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAMPARSER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to A BAMParser reads from a source of binary data that is formatted according to the BAM 
            file specification, and converts the data to in-memory SequenceAlignmentMap object..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BAMParserAlphabetCantBeSet">
            <summary>
              Looks up a localized string similar to Alphabet can&apos;t be set as BAM supports only SAMDNA alphabet..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BatchCountCondition">
            <summary>
              Looks up a localized string similar to Batch count must be greater than zero..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BedDesc">
            <summary>
              Looks up a localized string similar to Chromosome sequence ranges format..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BedFileFormats">
            <summary>
              Looks up a localized string similar to .bed.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BedName">
            <summary>
              Looks up a localized string similar to BED.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BIOHPC_BLAST_NAME">
            <summary>
              Looks up a localized string similar to BLAST @ BioHPC.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BlastNoRecords">
            <summary>
              Looks up a localized string similar to BlastXmlParser.Parse: No records were found in the input..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BREAK_LENGTH_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Number of bases to be extended before stopping alignment.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BREAK_LENGTH_NAME">
            <summary>
              Looks up a localized string similar to Break Length.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.BuilderIncorrectLength">
            <summary>
              Looks up a localized string similar to Reverse Complement builder (char array) has incorrect length. Should be equal to sequence length.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.Cannotaddmorethanchildnodestoedge">
            <summary>
              Looks up a localized string similar to Cannot add more than {0} child nodes to edge.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ClustalUnknownSequence">
            <summary>
              Looks up a localized string similar to Clustal file has unknown sequence {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CLUSTALW_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .aln.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CLUSTALW_NAME">
            <summary>
              Looks up a localized string similar to ClustalW.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CLUSTALWPARSER_DESCRIPTION">
            <summary>
              Looks up a localized string similar to A ClustalWParser reads from a source of text that is formatted according to the ClustalW flat file specification, and converts the data to in-memory ISequenceAlignment objects..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ClusterToStringFormat">
            <summary>
              Looks up a localized string similar to RefStart={0} QueryStart={1} Length={2} Score={3} WrapScore={4} IsGood={5}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserException">
            <summary>
              Looks up a localized string similar to Command Line Argument Error: .
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionInvalidValueFound">
            <summary>
              Looks up a localized string similar to Invalid value found. Parameter &quot;.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionInvalidValueFoundBool">
            <summary>
              Looks up a localized string similar to &quot; must not have a value.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionInvalidValueFoundInt">
            <summary>
              Looks up a localized string similar to &quot; does not have an numeric value.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionInvalidValueFoundInts">
            <summary>
              Looks up a localized string similar to &quot; does not have a series of numeric values.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionInvalidValueFoundString">
            <summary>
              Looks up a localized string similar to &quot; must have a string value.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionRepeatedParameterFound">
            <summary>
              Looks up a localized string similar to Repeated parameter found! Parameter &quot;.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionRepeatedParameterFoundOnce">
            <summary>
              Looks up a localized string similar to &quot; must only be used once.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionRequiredFirstParameterMissing">
            <summary>
              Looks up a localized string similar to The required first parameter is missing.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionRequiredParameterMissing">
            <summary>
              Looks up a localized string similar to A required parameter is missing. Parameter &quot;.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionRequiredParameterMissing2">
            <summary>
              Looks up a localized string similar to &quot; is required but missing.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionSyntaxError">
            <summary>
              Looks up a localized string similar to Command arguments incorrect in &quot;.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionSyntaxError2">
            <summary>
              Looks up a localized string similar to &quot;. Error near: &quot;... .
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionSyntaxError3">
            <summary>
              Looks up a localized string similar to &quot;. Quote parameters containing spaces.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionUnknownParameterFound">
            <summary>
              Looks up a localized string similar to Unknown parameter found: &quot;.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionUnknownParameterFound2">
            <summary>
              Looks up a localized string similar to &quot;. Unknown parameters are not allowed.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionValueWithoutParameterFound">
            <summary>
              Looks up a localized string similar to Value without parameter found: &quot;.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserExceptionValueWithoutParameterFound2">
            <summary>
              Looks up a localized string similar to &quot;. Each value must be assigned to a parameter.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserFirstParam">
            <summary>
              Looks up a localized string similar to first parameter.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserInt">
            <summary>
              Looks up a localized string similar to int.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserOptional">
            <summary>
              Looks up a localized string similar to Optional:.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserParameters">
            <summary>
              Looks up a localized string similar to Parameters:.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserRegEx">
            <summary>
              Looks up a localized string similar to ^([\\s]*)([/-](?&lt;name&gt;[^\\s-/:=]+)([:=]?)([\\s]*)(?&lt;value&gt;(\&quot;[^\&quot;]*\&quot;)|(&apos;[^&apos;]*&apos;)|([\\s]*[^/-][^\\s]+[\\s]*)|([^/-]+)|)?([\\s]*))*$.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserRequired">
            <summary>
              Looks up a localized string similar to Required:.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserString">
            <summary>
              Looks up a localized string similar to string.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CmdLineParserUsage">
            <summary>
              Looks up a localized string similar to Usage:.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ColorDataTrimLengthArgumentException">
            <summary>
              Looks up a localized string similar to Trim length cannot exceed past the number of peak locations..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ColorDataTrimStartIndexOutOfRange">
            <summary>
              Looks up a localized string similar to Color data start index must lie within the range of peak locations..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ComplementNotFound">
            <summary>
              Looks up a localized string similar to Could not find complement for one or more symbols..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ComplementNotSupportedByalphabet">
            <summary>
              Looks up a localized string similar to Complement for the symbol {0} is not supported by {1} Alphabet..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ComplementWithMorethanOneSubLocs">
            <summary>
              Looks up a localized string similar to Location with Complement operator cannot contain more than one sub locations..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ConditionFailed">
            <summary>
              Looks up a localized string similar to A condition failed..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ConsensusGenerationEnded">
            <summary>
              Looks up a localized string similar to Step 4: Consensus Generation - End time: {0:yyyy-MM-dd-HH:mm:ss.fff}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ConsensusGenerationStarted">
            <summary>
              Looks up a localized string similar to Step 4: Consensus Generation - Start time: {0:yyyy-MM-dd-HH:mm:ss.fff}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ContigLength">
            <summary>
              Looks up a localized string similar to Consensus has not been computed.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CorruptedDeltaAlignmentFile">
             <summary>
               Looks up a localized string similar to Could not find the DeltaAlignment at specified position {0} of the file.
            Delta alignment file is corrupted. .
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CouldNotIdentifyAlphabetType">
            <summary>
              Looks up a localized string similar to Could not identify alphabet type..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CouldNotRecognizeAlphabet">
            <summary>
              Looks up a localized string similar to Could not recognize the specified alphabet type..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CouldNotRecognizeSymbol">
            <summary>
              Looks up a localized string similar to Could not recognize the specified symbol..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.CountCannotBeLessThanZero">
            <summary>
              Looks up a localized string similar to Count cannot be less than zero.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.DataParserFactoryNoParserExistsForVersionFormat">
            <summary>
              Looks up a localized string similar to No parser exists for the ab1 format version {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.DataVirtualizationNeedsInputFile">
            <summary>
              Looks up a localized string similar to Data virtualization needs to be enabled with proper file name..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.DefaultSubStatus">
            <summary>
              Looks up a localized string similar to ..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.DeltaAlignmentIDDoesnotMatch">
            <summary>
              Looks up a localized string similar to Delta alignment id {0} does not match the specified position {1} in the file..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.DeltaAlignmentToStringFormat">
            <summary>
              Looks up a localized string similar to Ref ID={0} Query Id={1} Ref start={2} Ref End={3} Query start={4} Query End={5}, Direction={6}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.DeltaCollectionFileCorrupted">
            <summary>
              Looks up a localized string similar to Corrupted collection file..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.DensePairAnsiMissingValueSignatureMustBe">
            <summary>
              Looks up a localized string similar to For DensePairAnsi the missingValue must be (UO &apos;?&apos;, &apos;?&apos;).
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.Depth">
            <summary>
              Looks up a localized string similar to Depth cannot be less than or equal to 0.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.DestArrayNotLargeEnough">
            <summary>
              Looks up a localized string similar to Destination Array Not Large Enough.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.DifferenceInSequenceAndQualityScoresLengthMessage">
            <summary>
              Looks up a localized string similar to Sequence and quality scores lengths are not same. Sequence length: {0}, Quality scores length: {1}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.DnaAlphabetName">
            <summary>
              Looks up a localized string similar to Dna.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.DoubleRangeInvalidArgs">
            <summary>
              Looks up a localized string similar to DoubleRangeValidator: Invalid arguments..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.DuplicateSQHeader">
            <summary>
              Looks up a localized string similar to Duplicate SQ header found for {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.DuplicatingReadIds">
            <summary>
              Looks up a localized string similar to Duplicate read found. Id:{0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.EBIWUBLAST_NAME">
            <summary>
              Looks up a localized string similar to EBI WU-BLAST.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.EmptySequence">
            <summary>
              Looks up a localized string similar to Empty sequence.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.EndDataCannotBeNull">
            <summary>
              Looks up a localized string similar to EndData can not be null or empty..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ErrorCheckConditionFailed">
            <summary>
              Looks up a localized string similar to A call to CheckCondition() failed.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ErrorCheckConditionFirstAndOnlyTooFew">
            <summary>
              Looks up a localized string similar to CheckCondition.FirstAndOnly() failed to Get the first item.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ErrorCheckConditionFirstAndOnlyTooMany">
            <summary>
              Looks up a localized string similar to CheckCondition.FirstAndOnly() found more than one item available.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ErrorConvertingCharacterNucleotideToDouble">
            <summary>
              Looks up a localized string similar to Error converting character nucleotide [{0}] to double.  Expected &apos;A&apos;, &apos;C&apos;, &apos;G&apos;, or &apos;T&apos;.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ErrorConvertingDoubleToNucleotide">
            <summary>
              Looks up a localized string similar to Error converting double [{0}] to a character nucleotide.  Expected 0.0, 1.0, 2.0, or 3.0.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ErrorConvertingSparseValToStore">
            <summary>
              Looks up a localized string similar to Expected val length [{0}] to be 1.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ErrorConvertingValGaveMissingValue">
            <summary>
              Looks up a localized string similar to Error converting value [{0}] gave the special &apos;MissingValue &apos;[{1}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ErrorInputDataShouldBeGroupedByVar">
            <summary>
              Looks up a localized string similar to The input data should be grouped by var.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ErrorNoFilesMatchSpecifiedName">
            <summary>
              Looks up a localized string similar to No files match the name given [{0}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectDoubleToBeMinusOneOrOne">
            <summary>
              Looks up a localized string similar to Expected double [{0}] to be -1 or 1.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectEachDataRowToHaveNCharacters">
            <summary>
              Looks up a localized string similar to Expect each data row to have {0} characters..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.Expected_var_AsFirstColumnOfHeader">
            <summary>
              Looks up a localized string similar to Expected &apos;var&apos; as first column of header.  Found [{0}] in file [{1}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedAllMatricesToHaveSameMissingValue">
            <summary>
              Looks up a localized string similar to Expected all matrices to have the same &apos;MissingValue&apos; value.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedArgCountOfThreeOrFour">
            <summary>
              Looks up a localized string similar to Expected argument count of 3 or 4.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedArguments">
            <summary>
              Looks up a localized string similar to {3} Expected {0} required argument(s) after parsing named arguments (which may include required), but found {1}. ({2}).
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedBoolToBeTrueOrFalse">
            <summary>
              Looks up a localized string similar to Expected bool? to be true or false.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedByteArrayLengthAndBytesPerValueToBeEqual">
            <summary>
              Looks up a localized string similar to Expected byteArray.Length [{0}] and BytesPerValue [{[1}] to be equal.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedCharToBeZeroOrOne">
            <summary>
              Looks up a localized string similar to Expected char [{0}] to be &apos;0&apos; or &apos;1&apos;.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedColumnKeysCountToEqualValueArrayCount">
            <summary>
              Looks up a localized string similar to Expected the number of columns in the input array [{0}] to match the number of items in varList [{1}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedColumnsToMatch">
            <summary>
              Looks up a localized string similar to Expected the columns of the two matrices to match.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedEveryColumnToBeAMemberOfThePermutation">
            <summary>
              Looks up a localized string similar to Expected every column to be a member of the permutation.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedEveryColumnToBeUsedOnceInThePermuation">
            <summary>
              Looks up a localized string similar to Expected every column to be used once and only once in a permutation.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedEveryRemappedColKeyToBeInOriginalMatrix">
            <summary>
              Looks up a localized string similar to Expected every re-mapped colKey to be in original matrix.  Unmatched keys include [{0}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedEveryVarLineToHaveOneTab">
            <summary>
              Looks up a localized string similar to Expected every &apos;var&apos; line in file [{0}] to have exactly one tab, found [{1}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedFileToHaveData">
            <summary>
              Looks up a localized string similar to Expected file [{0}] to have data.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedFileToHaveHeader">
            <summary>
              Looks up a localized string similar to Expected file [{0}] to have header.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedHeaderAsFirstLineOfFile">
            <summary>
              Looks up a localized string similar to Expected header as first line of file [{0}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedHeaderToBe_var_cid_val">
            <summary>
              Looks up a localized string similar to Expected header to be &apos;var&lt;tab&gt;cid&lt;tab&gt;val&apos;, found [{0}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedItemToExist">
            <summary>
              Looks up a localized string similar to Expected item [{0}] to already exist.  Item not found.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedItemToNotExist">
            <summary>
              Looks up a localized string similar to Expected item [{0}] to not exist.  Found item more than once.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedMatrixViewColKeysToBeSubsetOfParentMatrix">
            <summary>
              Looks up a localized string similar to The colKeys of the MatrixView must be a subset the colKeys of the parentMatrix. The sets can also be equal.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedMatrixViewRowKeysToBeSubsetOfParentMatrix">
            <summary>
              Looks up a localized string similar to The rowKeys of the MatrixView must be a subset the rowKeys of the parentMatrix. The sets can also be equal.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedMaxLengthToGreaterThanOne">
            <summary>
              Looks up a localized string similar to Expected maxLength parameter to be greater than 1.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedNoCommentsInRowKeysAnsiFiles">
            <summary>
              Looks up a localized string similar to Expected no comments in RowKeysAnsi and related files.  File [{0}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedNonZeroLengthArrayOfMatrices">
            <summary>
              Looks up a localized string similar to Expected non-zero length for the array of matrices.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedNoOverlapBetweenRowKeys">
            <summary>
              Looks up a localized string similar to Expected no overlap between rowKeys.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedOneValueForEveryColKey">
            <summary>
              Looks up a localized string similar to Expected one value in the storeList for every colKey.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedRowKeyAndColKeyToBeInMatrix">
            <summary>
              Looks up a localized string similar to Expected rowKey and colKey to be in matrix.  rowKey [{0}] or colKey [{1}] not found..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedRowKeysCountToEqualValueArrayCount">
            <summary>
              Looks up a localized string similar to Expected the number of rows in the input array [{0}] to match the number of items in varList [{1}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedRowsOfMatricesToMatch">
            <summary>
              Looks up a localized string similar to Expected rows of  matrices to match.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedStoreListCountToEqualColCount">
            <summary>
              Looks up a localized string similar to Expected storeList.Count [{0}] to equal colCount [{1}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedThreeFields">
            <summary>
              Looks up a localized string similar to Expected 3 fields on each line,  found {0} in [{1}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedToReadAllBytesOfValue">
            <summary>
              Looks up a localized string similar to Expected to read all the bytes of a value.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedTwoFieldsFoundN">
            <summary>
              Looks up a localized string similar to Expected two fields, found [{0}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedUniqueRowKeysInMatrix">
            <summary>
              Looks up a localized string similar to Expected unique rowkeys in the matrix.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedUoPairElementsToBeIComparable">
            <summary>
              Looks up a localized string similar to Expected UoPair&apos;s elements to be IComparable.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedValidRangeString">
            <summary>
              Looks up a localized string similar to Expected a valid Range string in the form m-n or m or &apos;empty&apos; (or &apos;null&apos;).  Found [{0}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedValToBeSingleCharacter">
            <summary>
              Looks up a localized string similar to Expected the &apos;val&apos; to be a single character.  Found [{0}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectedValToContainTwoCharacters">
            <summary>
              Looks up a localized string similar to Expected 2 characters in val, found [{0}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectFileToEndAfterLastValue">
            <summary>
              Looks up a localized string similar to Expect file to end after last value.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectRowKeyFileAndMainFileToAgreeOnTheRowkeys">
            <summary>
              Looks up a localized string similar to Expect rowKey file and main file to agree on the rowkeys.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ExpectToReadRowKey">
            <summary>
              Looks up a localized string similar to Expect to read rowKey.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FASTA_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .fa,.mpfa,.fna,.faa,.fsa,.fas,.fasta.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FASTA_NAME">
            <summary>
              Looks up a localized string similar to Fasta.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FastAContainsMorethanOnebaseAlphabet">
            <summary>
              Looks up a localized string similar to FastA file should not contain sequences of more than one base alphabet type..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FASTAFORMATTER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Writes an ISequence to a particular location, usually a file. The output is formatted
            according to the FastA file format. .
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FastAName">
            <summary>
              Looks up a localized string similar to FastA.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FASTAPARSER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to A FastaParser reads from a source of text that is formatted according to the FASTA flat
            file specification, and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FastQ_EmptyQualityScoreLine">
            <summary>
              Looks up a localized string similar to Quality score line is empty for the sequence Id: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FASTQ_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .fq,.fastq.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FastQ_InvalidQualityScoreHeaderData">
            <summary>
              Looks up a localized string similar to Quality scores header does not match with sequence header for the sequence Id: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FastQ_InvalidQualityScoreHeaderLine">
            <summary>
              Looks up a localized string similar to Input file or data stream is missing &quot;+&quot; in the quality score header line for the sequence Id: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FastQ_InvalidQualityScoresLength">
            <summary>
              Looks up a localized string similar to Total number of quality scores and sequence symbols are not same for the sequence Id: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FastQ_InvalidSequenceLine">
            <summary>
              Looks up a localized string similar to Sequence data line is empty for the sequence Id: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FastQ_NotAQualitativeSequence">
            <summary>
              Looks up a localized string similar to Not a QualitativeSequence.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FASTQFORMATTER_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Writes an QualitativeSequence to a particular location, usually a file. The output is formatted according to the FASTQ file format..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FastQName">
            <summary>
              Looks up a localized string similar to FastQ.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FASTQPARSER_DESCRIPTION">
            <summary>
              Looks up a localized string similar to A FastQParser reads from a source of text that is formatted according to the FASTQ file specification, and converts the data to in-memory QualitativeSequence objects..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FIELDPARSER_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Each line contains two columns and tab as delimiter.First column contain sequence id and second column contains the sequence..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FIELDPARSER_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .txt.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FIELDPARSER_NAME">
            <summary>
              Looks up a localized string similar to Field Parser.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FileAlreadyOpen">
            <summary>
              Looks up a localized string similar to {0} is already open. To open a new file please close the current file and try again..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FileNameMustNotContainPathInformation">
            <summary>
              Looks up a localized string similar to The file name must not include any path information. It will be created in the other file&apos;s directory..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FileNotClosed">
            <summary>
              Looks up a localized string similar to File is already open..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FileNotOpened">
            <summary>
              Looks up a localized string similar to File is not opened. Please call Open method  to open the file..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FirstInputSequenceMismatchSimilarityMatrix">
            <summary>
              Looks up a localized string similar to First input sequence alphabet does not match similarity matrix alphabet..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FIXED_SEPARATION_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Maximum fixed diagonal difference.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.FIXED_SEPARATION_NAME">
            <summary>
              Looks up a localized string similar to Fixed Separation.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ForwardReadCount">
            <summary>
              Looks up a localized string similar to Forward Read is empty.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GAP_COST_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Cost of inserting a gap character.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GAP_COST_NAME">
            <summary>
              Looks up a localized string similar to Gap Cost.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GAP_EXTENSION_COST_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Cost of extending an already existing gap.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GAP_EXTENSION_COST_NAME">
            <summary>
              Looks up a localized string similar to Gap Extension Cost.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GapOpenGreaterThanGapExtension">
            <summary>
              Looks up a localized string similar to The Gap open penalty must be more severe than the gap extension penalty..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GENBANK_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .gb,.gbk,.genbank.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GENBANK_NAME">
            <summary>
              Looks up a localized string similar to GenBank.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GenbankEmptyFeature">
            <summary>
              Looks up a localized string similar to Unexpected empty feature key..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GenBankFailedToParseLocusTokenFormat">
            <summary>
              Looks up a localized string similar to Failed to parse locus token: {0}, Locus: {1}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GENBANKFORMATTER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Writes an ISequence to a particular location, usually a file. The output is formatted
            according to the GenBank file format. A method is also provided for quickly accessing
            the content in string form for applications that do not need to first write to file..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GenbankInvalidFeature">
            <summary>
              Looks up a localized string similar to Invalid feature line: {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GENBANKPARSER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to A GenBankParser reads from a source of text that is formatted according to the GenBank flat
            file specification, and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GenBankUnknownLocusFormat">
            <summary>
              Looks up a localized string similar to Unknown LOCUS format: {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GFF_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .gff.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GFF_NAME">
            <summary>
              Looks up a localized string similar to GFF.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GFFFORMATTER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Writes an ISequence to a particular location, usually a file. The output is formatted
            according to the GFF file format. A method is also provided for quickly accessing
            the content in string form for applications that do not need to first write to file..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GffInvalidField">
            <summary>
              Looks up a localized string similar to Invalid {0} field: {1}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GffInvalidSequence">
            <summary>
              Looks up a localized string similar to Invalid sequence line: {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GFFNoFeatures">
            <summary>
              Looks up a localized string similar to GFF file contains no features..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GFFPARSER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to A GffParser reads from a source of text that is formatted according to the GFF flat
            file specification, and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.GffUnsupportedVersion">
            <summary>
              Looks up a localized string similar to Unsupported GFF version: {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.HeaderContainsNullValue">
            <summary>
              Looks up a localized string similar to Header should not contain null values..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InputAlphabetsMismatch">
            <summary>
              Looks up a localized string similar to Input sequences use different alphabets..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InputSequenceMustBeGreaterThanMUM">
            <summary>
              Looks up a localized string similar to Length of input sequence should be greater than Length of MUM [{0}]..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.IntRangeInvalidArgs">
            <summary>
              Looks up a localized string similar to IntRangeValidator: Invalid arguments.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.INVALID_INPUT_FILE">
            <summary>
              Looks up a localized string similar to Bad input in file.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.INVALID_SYMBOL">
            <summary>
              Looks up a localized string similar to Symbol {0} is not a valid {1} symbol.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidAlphabetType">
            <summary>
              Looks up a localized string similar to The alphabet type specified is invalid..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidEncodedQualityScoreFound">
            <summary>
              Looks up a localized string similar to Invalid encoded quality score found. {0} is not supported in {1} format..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidEndData">
            <summary>
              Looks up a localized string similar to Invalid end data [{0}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidItemSizeExceptionFormat">
            <summary>
              Looks up a localized string similar to Invalid item size.  Expected {0} bytes but found {1} for the item of type {2}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidLocationString">
            <summary>
              Looks up a localized string similar to Invalid location string [{0}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidMinLengthOfMatch">
            <summary>
              Looks up a localized string similar to Invalid MinLengthOfMatch. It should be more than 0..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidOptionalField">
            <summary>
              Looks up a localized string similar to Invalid optional field [{0}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidParameter">
            <summary>
              Looks up a localized string similar to The parameter is invalid..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidPatternMessage">
            <summary>
              Looks up a localized string similar to Invalid {0}: &quot;{1}&quot;. The allowed pattern is: {2}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidQNameLength">
            <summary>
              Looks up a localized string similar to Invalid QName value. Maximum allowed length for QName value is 255 characters..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidQualityScore">
            <summary>
              Looks up a localized string similar to Invalid quality score: [{0}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidQualityScoreFound">
            <summary>
              Looks up a localized string similar to Invalid quality score found. {0} is not supported in {1} format..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidQueryDirection">
            <summary>
              Looks up a localized string similar to Query direction must be Forward or Reverse.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidRangeBeginMustBeLessThanLast">
            <summary>
              Looks up a localized string similar to Invalid Range: &apos;begin&apos; [{0}] must be less than &apos;last&apos; [{1}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidRangeMessage">
            <summary>
              Looks up a localized string similar to Invalid {0}: &quot;{1}&quot;. The allowed range is {2} to {3}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidRangeSizeOfRangeMustBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to Invalid Range Size: Size of range must be greater than 0.  Found [{0}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidRangeSizeOfRangeMustBeLessThanMaxValue">
            <summary>
              Looks up a localized string similar to Invalid Range Size: Size of range must be less than long.MaxValue.  Found [{0}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidReferredAlphabet">
            <summary>
              Looks up a localized string similar to Alphabet of {0} sequence is invalid..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidRefNumber">
            <summary>
              Looks up a localized string similar to Invalid reference number found: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidRNASequenceInput">
            <summary>
              Looks up a localized string similar to Only RNA or AmbiguousRNA sequence is allowed as input..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidSearchParameter">
            <summary>
              Looks up a localized string similar to SearchParameter: Only int, float, and stringList supported..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidSeparator">
            <summary>
              Looks up a localized string similar to Invalid separator {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidStartData">
            <summary>
              Looks up a localized string similar to Invalid start data: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidStartNEndPositions">
            <summary>
              Looks up a localized string similar to Start position must be less than or equal to the end position..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidSymbol">
            <summary>
              Looks up a localized string similar to Could not recognize symbol: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidSymbolInString">
            <summary>
              Looks up a localized string similar to Could not recognize one or more symbol in the sequence: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.InvalidType">
            <summary>
              Looks up a localized string similar to Unknown type format: {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.IOFormatErrorMessage">
            <summary>
              Looks up a localized string similar to {0} Format error - {1}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.IONoTextToParse">
            <summary>
              Looks up a localized string similar to No text to parse in the specified input file or data stream..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.KmerIndexOutOfRange">
            <summary>
              Looks up a localized string similar to Kmer sequence index is out of range for node.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.KmerLength">
            <summary>
              Looks up a localized string similar to Kmer length cannot be less than or equal to 0.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.KmerLengthEven">
            <summary>
              Looks up a localized string similar to K-mers must be even to avoid palindromes.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.KmerLengthGreaterThan31">
            <summary>
              Looks up a localized string similar to K-mer lengths greater than 31 are not supported..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.KmerLengthIsTooLong">
            <summary>
              Looks up a localized string similar to Kmer Length is larger than the sequence length.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.KmerLengthShouldBeOver12">
            <summary>
              Looks up a localized string similar to Kmer Length should be greater than 12.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.KmerLengthShouldBePositive">
            <summary>
              Looks up a localized string similar to Kmer length must be a positive number..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.KmerPositionOutOfRange">
            <summary>
              Looks up a localized string similar to Kmer position or length is out of range for node.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.KurtzSuffixTreeBuilderName">
            <summary>
              Looks up a localized string similar to SuffixTree builder using Dictionary.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.LayoutRefinementEnded">
            <summary>
              Looks up a localized string similar to Step 3: Layout Refinement - End time: {0:yyyy-MM-dd-HH:mm:ss.fff}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.LayoutRefinementStarted">
            <summary>
              Looks up a localized string similar to Step 3: Layout Refinement - Start time: {0:yyyy-MM-dd-HH:mm:ss.fff}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.LENGTH_OF_MUM_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Minimum legnth of Maximal Unique Match.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.LENGTH_OF_MUM_NAME">
            <summary>
              Looks up a localized string similar to Length of MUM.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.LibraryExist">
            <summary>
              Looks up a localized string similar to Clone Library &apos;{0}&apos; doesn&apos;t exist.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.LibraryInvalidParameters">
            <summary>
              Looks up a localized string similar to Clone Library - Invalid Parameters.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.LIST_EMPTY">
            <summary>
              Looks up a localized string similar to List is empty. Should contain at least one element!.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.LogFileName">
            <summary>
              Looks up a localized string similar to Bio.log.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MandatoryTagNotFound">
            <summary>
              Looks up a localized string similar to Mandatory tag {0} is not found for the record type {1}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MatchExtensionToStringFormat">
            <summary>
              Looks up a localized string similar to RefStart={0} QueryStart={1} Length={2} Score={3} WrapScore={4} IsGood={5}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MatchToStringFormat">
            <summary>
              Looks up a localized string similar to RefStart={0} QueryStart={1} Length={2}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MatePairToStringFormat">
            <summary>
              Looks up a localized string similar to ForwardReadID={0}, ReverseReadID={1}, MeanLength={2}, Standard Deviation={3}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MatrixSpecialValueUseError">
            <summary>
              Looks up a localized string similar to The value in the pair should not be the special &apos;missing value&apos;..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MAXIMUM_SEPARATION_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Maximum separation between the adjacent matches in clusters.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MAXIMUM_SEPARATION_NAME">
            <summary>
              Looks up a localized string similar to Maximum Separation.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MayNotConvert">
            <summary>
              Looks up a localized string similar to The Converter may not convert a non-missing value into the missing value..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MINIMUM_SCORE_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Minimum output score.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MINIMUM_SCORE_NAME">
            <summary>
              Looks up a localized string similar to Minimum Score.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MinimumTwoSequences">
            <summary>
              Looks up a localized string similar to Minimum two sequences are required to run alignment..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MinLengthMustBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to MinLengthOfMatch should be greater than 0.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MsgComplementOverlapItems">
            <summary>
              Looks up a localized string similar to Complement overlap of items.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MsgPlainOverlapItems">
            <summary>
              Looks up a localized string similar to plain overlap of items.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MsgReverseComplementOverlapItems">
            <summary>
              Looks up a localized string similar to ReverseComplement overlap of items.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MsgReverseOverlapItems">
            <summary>
              Looks up a localized string similar to Reverse overlap of items.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MultiWaySuffixTreeName">
            <summary>
              Looks up a localized string similar to MultiWaySuffixTree.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MUMLengthTooSmall">
            <summary>
              Looks up a localized string similar to Minimum length of MUM cannot be less than 1..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MUMmerAlignerDescription">
            <summary>
              Looks up a localized string similar to Pairwise global alignment.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MUMmerAlignerName">
            <summary>
              Looks up a localized string similar to MUMmer.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MUMmerDescription">
            <summary>
              Looks up a localized string similar to MUMmer is a system for rapidly aligning entire genomes. Gets the exact matches between the reference and query sequences..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.MUMmerName">
            <summary>
              Looks up a localized string similar to MUMmer.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NcbiBlastInvalidValue">
            <summary>
              Looks up a localized string similar to NcbiBlastParameters: Invalid parameter value {0} for parameter {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NcbiBlastUnknownParam">
            <summary>
              Looks up a localized string similar to NcbiBlastParameters: Unknown parameter name {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NCBIQBLAST_NAME">
            <summary>
              Looks up a localized string similar to NCBI QBLAST.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NEEDLEMAN_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Pairwise global alignment.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NEEDLEMAN_NAME">
            <summary>
              Looks up a localized string similar to Needleman-Wunsch.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NegativeRedundancy">
            <summary>
              Looks up a localized string similar to Redundancy value cannot be negative.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NEWICK_FILE_EXTENSION">
            <summary>
              Looks up a localized string similar to .txt, .tre, .newick.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NEWICK_FORMATTER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Writes a PhylogeneticTree to a particular location, usually a file. The output is formatted
            according to the Newick format..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NEWICK_NAME">
            <summary>
              Looks up a localized string similar to Newick.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NEWICK_PARSER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Reads from a source of text that is formatted according to the Newick flat
            file specification, and converts the data to in-memory PhylogeneticTree object..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NEXUS_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .nxs,.nex.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NEXUS_NAME">
            <summary>
              Looks up a localized string similar to Nexus.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NEXUSPARSER_DESCRIPTION">
            <summary>
              Looks up a localized string similar to A NexusParser reads from a source of text that is formatted according to the Nexus flat file specification, and converts the data to in-memory ISequenceAlignment objects.  For advanced users, the ability to select an encoding for the internal memory representation is provided. There is also a default encoding for each alphabet that may be encountered..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NoneWithSubLocs">
            <summary>
              Looks up a localized string similar to Location with None operator can not contain sub locations..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NotSupportedInVirtualSequence">
            <summary>
              Looks up a localized string similar to Not supported in VirtualSequence.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NotSupportedReadOnlyCollection">
            <summary>
              Looks up a localized string similar to Not supported in ReadOnlyCollection..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NtaxMismatch">
            <summary>
              Looks up a localized string similar to ntax does not match the number of IDs..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NUCMER">
            <summary>
              Looks up a localized string similar to NUCmer.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NUCMERDESC">
            <summary>
              Looks up a localized string similar to Pairwise local alignment.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NullLocationBuild">
            <summary>
              Looks up a localized string similar to LocationBuilder can not be null.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.NullResolver">
            <summary>
              Looks up a localized string similar to Resolver can not be null.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.OffsetInvalid">
            <summary>
              Looks up a localized string similar to Offset cannot be greater than the sequence count..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.OffsetOverflow">
            <summary>
              Looks up a localized string similar to Offset is greater than the number of elements in the sequence..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.OnlyAmbiguousRnaCanContainAmbiguousSymbolsOnTranslation">
            <summary>
              Looks up a localized string similar to Only ambiguous RNA can contain ambiguous symbols on translation..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.OnlyDNAOrRNAInput">
            <summary>
              Looks up a localized string similar to Only DNA &amp; RNA sequences can be passed as input to {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.OnlySequenceClassSupported">
            <summary>
              Looks up a localized string similar to Only Sequence class is supported..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.OutOfSpec">
            <summary>
              Looks up a localized string similar to out-of-spec SOURCE.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PAIRWISE_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Pairwise global alignment.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PAIRWISE_NAME">
            <summary>
              Looks up a localized string similar to Pairwise-Overlap.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PairwiseAlignerWrongArgumentCount">
            <summary>
              Looks up a localized string similar to Pairwise Alignment expected 2 input sequences, received {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParamCHmustbeLessThan256">
            <summary>
              Looks up a localized string similar to ch must be less than 256.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PARAMETER_UNKNOWN">
            <summary>
              Looks up a localized string similar to Unknown parameter name {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PARAMETER_VALUE_INVALID">
            <summary>
              Looks up a localized string similar to Invalid parameter value {0} for parameter {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterMustLessThanCount">
            <summary>
              Looks up a localized string similar to Specified argument was out of the range it must be non negative and less than the count of this sequence..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterMustNonNegative">
            <summary>
              Looks up a localized string similar to Specified argument was out of the range it must be non negative..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameArray">
            <summary>
              Looks up a localized string similar to array.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameEndPos">
            <summary>
              Looks up a localized string similar to endPos.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameIndex">
            <summary>
              Looks up a localized string similar to index.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameInputSequences">
            <summary>
              Looks up a localized string similar to inputSequences.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameLocation">
            <summary>
              Looks up a localized string similar to location.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNamePosition">
            <summary>
              Looks up a localized string similar to position.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameQuery">
            <summary>
              Looks up a localized string similar to query.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameSequence">
            <summary>
              Looks up a localized string similar to sequence.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameSequenceAlignment">
            <summary>
              Looks up a localized string similar to sequenceAlignment.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameSequenceItems">
            <summary>
              Looks up a localized string similar to sequenceItems.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameSequences">
            <summary>
              Looks up a localized string similar to sequences.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameSize">
            <summary>
              Looks up a localized string similar to size.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameSource">
            <summary>
              Looks up a localized string similar to source.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameStart">
            <summary>
              Looks up a localized string similar to start.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameStartPos">
            <summary>
              Looks up a localized string similar to startPos.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameValue">
            <summary>
              Looks up a localized string similar to value.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterNameWriter">
            <summary>
              Looks up a localized string similar to writer.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParameterShouldBeofType">
            <summary>
              Looks up a localized string similar to {0} should be {1} type.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParseHeaderError">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid header..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.Parser_InvalidFileFormat">
            <summary>
              Looks up a localized string similar to Could not parse the specified file. File format is invalid..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.Parser_NoTextErrorMessage">
            <summary>
              Looks up a localized string similar to No text to parse..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParserIncorrectAlphabet">
            <summary>
              Looks up a localized string similar to Incorrect alphabet set by user..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParserInvalidDate">
            <summary>
              Looks up a localized string similar to Invalid date format: {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParserInvalidReferenceField">
            <summary>
              Looks up a localized string similar to Invalid reference field name: {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParserInvalidSourceField">
            <summary>
              Looks up a localized string similar to Invalid source field name: {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParserPrimaryLineError">
            <summary>
              Looks up a localized string similar to Error in PRIMARY line: {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParserReferenceError">
            <summary>
              Looks up a localized string similar to Data after REFERENCE should start with reference number: {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParserSecondLocus">
            <summary>
              Looks up a localized string similar to Second locus encountered {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParserUnexpectedLineInSequence">
            <summary>
              Looks up a localized string similar to Unexpected line within sequence data: {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ParsingError">
            <summary>
              Looks up a localized string similar to Error parsing {0}:.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PcaDescription">
            <summary>
              Looks up a localized string similar to A parallelized comparative genome assembler..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PcaName">
            <summary>
              Looks up a localized string similar to Parallel Comparative Genome Assembler.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PHYLIP_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .phy,.ph.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PHYLIP_NAME">
            <summary>
              Looks up a localized string similar to Phylip.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PHYLIPPARSER_DESCRIPTION">
            <summary>
              Looks up a localized string similar to A PhylipParser reads from a source of text that is formatted according to the Phylip flat file specification, and converts the data to in-memory ISequenceAlignment objects..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PoolItemNotContig">
            <summary>
              Looks up a localized string similar to PoolItem.Contig: Not a contig item..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.PoolItemNotSequence">
            <summary>
              Looks up a localized string similar to PoolItem.Contig: Item is contig, not sequence..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ProgressStatus_Reading">
            <summary>
              Looks up a localized string similar to Reading {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ProteinAlphabetName">
            <summary>
              Looks up a localized string similar to Protein.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.QualitativeSequenceToStringFormatForLongSequence">
             <summary>
               Looks up a localized string similar to {0}...[{1}]
            {2}...[{3}].
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.QualitativeSequenceToStringFormatForSmallSequence">
             <summary>
               Looks up a localized string similar to {0}
            {1}.
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.QueryListCannotBeNull">
            <summary>
              Looks up a localized string similar to Query sequence list cannot be null.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.QuerySequenceCannotBeNull">
            <summary>
              Looks up a localized string similar to Query sequence cannot be null..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.RangeCollectionIsEmpty">
            <summary>
              Looks up a localized string similar to RangeCollection is empty..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.READ_ONLY_COLLECTION_MESSAGE">
            <summary>
              Looks up a localized string similar to Cannot modify a read-only collection..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ReadAlignmentEnded">
            <summary>
              Looks up a localized string similar to Step 1: Read Alignment - End time: {0:yyyy-MM-dd-HH:mm:ss.fff}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ReadAlignmentStarted">
            <summary>
              Looks up a localized string similar to Step 1: Read Alignment - Start time: {0:yyyy-MM-dd-HH:mm:ss.fff}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ReadCannotBeNull">
            <summary>
              Looks up a localized string similar to One of the reads in input list is null.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.RealAssert">
            <summary>
              Looks up a localized string similar to real assert.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ReferenceListCannotBeNull">
            <summary>
              Looks up a localized string similar to Reference sequence list cannot be null..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ReferenceSequenceCannotBeNull">
            <summary>
              Looks up a localized string similar to Reference sequence cannot be null.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.RefSequenceNofFound">
            <summary>
              Looks up a localized string similar to Can&apos;t parse sequences which contains &apos;=&apos; symbol without the reference sequence..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.RegistrationLoadingError">
            <summary>
              Looks up a localized string similar to REGISTRATION_LOADING_ERROR.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.RepeatedFlags">
            <summary>
              Looks up a localized string similar to Flag {0} occurs multiple times..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.RepeatResolutionEnded">
            <summary>
              Looks up a localized string similar to Step 2: Repeat Resolution - End time: {0:yyyy-MM-dd-HH:mm:ss.fff}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.RepeatResolutionStarted">
            <summary>
              Looks up a localized string similar to Step 2: Repeat Resolution - Start time: {0:yyyy-MM-dd-HH:mm:ss.fff}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ReverseReadCount">
            <summary>
              Looks up a localized string similar to Reverse Read is empty.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.RnaAlphabetName">
            <summary>
              Looks up a localized string similar to Rna.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.RowKeyIndexSeemsToReferToAFileOfTheWrongFormat">
            <summary>
              Looks up a localized string similar to RowKeyIndex seems to refer to a file of the wrong format..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SAM_AlignedSequenceHeaderMissing">
            <summary>
              Looks up a localized string similar to Header is missing in one of the aligned sequence in specified sequenceAlignment object..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SAM_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .sam.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SAM_FormatMultipleAlignmentsNotSupported">
            <summary>
              Looks up a localized string similar to SAM format does not supports writing multiple ISequenceAlignment objects to a file..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SAM_InvalidInputFile">
            <summary>
              Looks up a localized string similar to Invalid SAM File..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SAM_NAME">
            <summary>
              Looks up a localized string similar to SAM.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SAM_NO_REFERENCE_DEFINED_INDICATOR">
            <summary>
              Looks up a localized string similar to *.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SAMAlignedSequenceHeaderNotFound">
            <summary>
              Looks up a localized string similar to SAMAlignedSequenceHeader not found.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SAMAlignmentHeaderNotFound">
            <summary>
              Looks up a localized string similar to SAMAlignmentHeader not found.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SAMFORMATTER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Writes a SequenceAlignmentMap to a particular location, usually a file. The output is formatted
            according to the SAM file format..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SAMFormatterSupportsDNAOnly">
            <summary>
              Looks up a localized string similar to SAM only supports DNA aplhabet..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SAMMultipleAlignmentsOutputNotSupported">
            <summary>
              Looks up a localized string similar to Cannot write multiple alignments..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SAMPARSER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to A SAMParser reads from a source of text that is formatted according to the SAM 
            file specification, and converts the data to in-memory SequenceAlignmentMap objects..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SAMParserAlphabetCantBeSet">
            <summary>
              Looks up a localized string similar to Alphabet can&apos;t be set as SAM supports only SAMDNA alphabet..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ScaffoldGenerationEnded">
            <summary>
              Looks up a localized string similar to Step 5: Scaffold Generation - End time: {0:yyyy-MM-dd-HH:mm:ss.fff}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ScaffoldGenerationStarted">
            <summary>
              Looks up a localized string similar to Step 5: Scaffold Generation - Start time: {0:yyyy-MM-dd-HH:mm:ss.fff}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SearchParamInvalidArgs">
            <summary>
              Looks up a localized string similar to SearchParameter: Only int, double, and string supported..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SecondInputSequenceMismatchSimilarityMatrix">
            <summary>
              Looks up a localized string similar to Second input sequence alphabet does not match similarity matrix alphabet..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SegmentByteArrayInvalidCount">
            <summary>
              Looks up a localized string similar to The number of bytes must be evenly divisible by the count.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SEPARATION_FACTOR_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Separation factor.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SEPARATION_FACTOR_NAME">
            <summary>
              Looks up a localized string similar to Separation Factor.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SequenceAlphabetMismatch">
            <summary>
              Looks up a localized string similar to Sequences are of different alphabet type in the alignment..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SequenceCannotBeNull">
            <summary>
              Looks up a localized string similar to Sequence should not be null.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SequenceCountMismatch">
            <summary>
              Looks up a localized string similar to Number of sequence in alignment do not match the actual count..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SequenceDataGreaterthan2GB">
            <summary>
              Looks up a localized string similar to Sequence {0} contains more than 2GB data.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SequenceLengthExceedsLimit">
            <summary>
              Looks up a localized string similar to Cross product of input sequences length ({0}, {1}) exceeds integer maximum value {2}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SequenceLengthMismatch">
            <summary>
              Looks up a localized string similar to Sequence length does not match..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SequenceLengthsMismatch">
            <summary>
              Looks up a localized string similar to Sequence length in alignment do not match the actual length..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SequenceRangeEndError">
            <summary>
              Looks up a localized string similar to End index of SequenceRange cannot be lesser than start index.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SequenceRangeNonNegative">
            <summary>
              Looks up a localized string similar to SequenceRange start and end cannot be set to negative numbers.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SequenceRangeStartError">
            <summary>
              Looks up a localized string similar to Start index of SequenceRange cannot be greater than end index.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SequenceRangeToStringFormat">
            <summary>
              Looks up a localized string similar to ID={0} Start={1} End={2}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SequenceStatisticsToStringFormat">
            <summary>
              Looks up a localized string similar to {0} - {1}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SERVICE_HANDLER_ASSEMBLY">
            <summary>
              Looks up a localized string similar to Bio.WebServiceHandlers.dll.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SFF_Description">
             <summary>
               Looks up a localized string similar to A SFFParser reads from a source of binary text that is formatted according to the Standard Flowgram Format binary
            file specification, and converts the data to in-memory ISequence objects..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SFF_Extensions">
            <summary>
              Looks up a localized string similar to .sff.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SFF_Name">
            <summary>
              Looks up a localized string similar to Standard Flowgram Format.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ShouldNotBeSmaller">
            <summary>
              Looks up a localized string similar to The complete size should not be smaller than the current size.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SIMILARITY_MATRIX_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Describes matrix that determines the score for any possible pair of symbols.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SIMILARITY_MATRIX_NAME">
            <summary>
              Looks up a localized string similar to Similarity Matrix.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SimilarityMatrix_BadOrMissingValue">
            <summary>
              Looks up a localized string similar to SimilarityMatrix from file or stream. Bad or missing value in line {0}, exception {1}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SimilarityMatrix_DiagonalSM">
            <summary>
              Looks up a localized string similar to Diagonal (Match x Mismatch).
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SimilarityMatrix_FewerMatrixLines">
            <summary>
              Looks up a localized string similar to SimilarityMatrix from file or stream. Fewer matrix line than needed..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SimilarityMatrix_InvalidMoleculeType">
            <summary>
              Looks up a localized string similar to SimilarityMatrix from file or stream. Invalid molecule type {0} in similarity matrix file..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SimilarityMatrix_NameMissing">
            <summary>
              Looks up a localized string similar to SimilarityMatrix from file or stream. Missing name (first line)..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SimilarityMatrix_SecondLineMissing">
            <summary>
              Looks up a localized string similar to SimilarityMatrix from file or stream. Missing second line..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SimilarityMatrixCannotBeNull">
            <summary>
              Looks up a localized string similar to Similarity Matrix cannot be null..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SIMPLE_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Implements a simple greedy assembly algorithm for DNA..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SIMPLE_NAME">
            <summary>
              Looks up a localized string similar to Simple-Sequence.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SIMPLE_SNP_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Basic SNP Parser that uses XSV format.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SIMPLE_SNP_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .tsv.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SIMPLE_SNP_NAME">
            <summary>
              Looks up a localized string similar to Basic SNP.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SMITH_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Pairwise local alignment.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SMITH_NAME">
            <summary>
              Looks up a localized string similar to Smith-Waterman.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.snpTextReaderNull">
            <summary>
              Looks up a localized string similar to Text reader to read SNP sequences from cannot be null.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SortingResolvedDeltasEnded">
            <summary>
              Looks up a localized string similar to Sorting Resolved Deltas - End time: {0:yyyy-MM-dd-HH:mm:ss.fff}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SortingResolvedDeltasStarted">
            <summary>
              Looks up a localized string similar to Sorting Resolved Deltas - Start time: {0:yyyy-MM-dd-HH:mm:ss.fff}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SparseSequenceConstructorIndexOutofRange">
            <summary>
              Looks up a localized string similar to Index was out of range. Must be non-negative and less than the maximum value of an integer..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SQHeaderMissing">
            <summary>
              Looks up a localized string similar to SQ header is missing for {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.StartCannotBeLessThanZero">
            <summary>
              Looks up a localized string similar to Start cannot be less than zero.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.StartDataCannotBeNull">
            <summary>
              Looks up a localized string similar to StartData can not be null or empty..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SymbolCountZero">
            <summary>
              Looks up a localized string similar to Zero nucleotides in input..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.SymbolExistsInAlphabet">
            <summary>
              Looks up a localized string similar to Symbol already exists in alphabet..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ThereAreDuplicateRowsWhichDoNotHDupRowsNonIdenticalValues">
            <summary>
              Looks up a localized string similar to There are duplicate rows which do not have identical values..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ToStringFormat">
            <summary>
              Looks up a localized string similar to {0}... +[{1}].
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.TracebackBadSource">
            <summary>
              Looks up a localized string similar to {0} : Bad source in Traceback..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.UnbalancedParanthesis">
            <summary>
              Looks up a localized string similar to Unbalanced paranthesis.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.UnexpectedSecondSequenceName">
            <summary>
              Looks up a localized string similar to Unexpected second sequence name encountered: {0}..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.UnknownElement">
            <summary>
              Looks up a localized string similar to {0}: Don&apos;t know element &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.UnknownOption">
            <summary>
              Looks up a localized string similar to {1}Unknown option found: {0}.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.Wiggle_FileExtension">
            <summary>
              Looks up a localized string similar to .wig.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.WiggleBadInputInFile">
            <summary>
              Looks up a localized string similar to Parsing failed. Bad input in file..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.WiggleFormatterDescription">
            <summary>
              Looks up a localized string similar to Writes a WiggleAnnotation to a particular location, usually a file. The output is formatted according to the Wiggle file format..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.WiggleInvalidHeader">
            <summary>
              Looks up a localized string similar to Failed to parse wiggle header..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.WiggleName">
            <summary>
              Looks up a localized string similar to Wiggle.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.WiggleNotSupportedOnVariableStep">
            <summary>
              Looks up a localized string similar to This operation is not supported on variable step wiggle files..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.WiggleParserDescription">
            <summary>
              Looks up a localized string similar to A Wiggle parser reads from a source of text that is formatted according to the Wiggle file specification (only fixed and variable step files), and converts the data to in-memory WiggleAnnotation objects..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.XsvOffsetNotFound">
            <summary>
              Looks up a localized string similar to Could not find a comment line with the offset, sequence ID.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.XsvSparseFormatterDesc">
            <summary>
              Looks up a localized string similar to Sparse Sequence formatter to character separated value file.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.XsvSparseFormatterName">
            <summary>
              Looks up a localized string similar to XsvSparseFormatter.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.XsvSparseParserDesc">
            <summary>
              Looks up a localized string similar to Parses sparse sequences from character separated value reader.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.XsvSparseParserFileTypes">
            <summary>
              Looks up a localized string similar to csv,tsv.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.XsvSparseParserName">
            <summary>
              Looks up a localized string similar to XsvSparseParser.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ZippedFASTAName">
            <summary>
              Looks up a localized string similar to Zipped Fasta.
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ZippedFASTAParserDescription">
             <summary>
               Looks up a localized string similar to A FastaParser reads from a source of text that is formatted according to the FASTA flat
            file specification, and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered..
             </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ZippedFASTQDescription">
            <summary>
              Looks up a localized string similar to Writes an QualitativeSequence to a particular location, usually a file. The output is formatted according to the FASTQ file format..
            </summary>
        </member>
        <member name="P:Bio.Properties.Resource.ZippedFASTQName">
            <summary>
              Looks up a localized string similar to Zipped Fastq.
            </summary>
        </member>
        <member name="T:Bio.Sequence">
            <summary>
            This is the standard implementation of the ISequence interface. It contains
            the raw data that defines the contents of a sequence. Since Sequence uses 
            enumerable of bytes that can be accessed as follows:
            Sequence mySequence = new Sequence(Alphabets.DNA, "GATTC");
            foreach (Nucleotide nucleotide in mySequence) { ... }
            The results will be based on the Alphabet associated with the
            sequence. Common alphabets include those for DNA, RNA, and Amino Acids.
            For users who wish to get at the underlying data directly, Sequence provides
            a means to do this as well. This may be useful for those writing algorithms
            against the sequence where performance is especially important. For these
            advanced users access is provided to the encoding classes associated with the
            sequence.
            </summary>
        </member>
        <member name="F:Bio.Sequence._sequenceData">
            <summary>
            Holds the sequence data.
            </summary>
        </member>
        <member name="F:Bio.Sequence._metadata">
            <summary>
            Metadata is features or references or related things of a sequence.
            </summary>
        </member>
        <member name="M:Bio.Sequence.#ctor">
            <summary>
            Constructor used when copying an existing sequence internally for reverse/complement usage
            to avoid double-copying the buffer.
            </summary>
        </member>
        <member name="M:Bio.Sequence.#ctor(Bio.IAlphabet,System.String)">
            <summary>
            Initializes a new instance of the Sequence class with specified alphabet and string sequence.
            Symbols in the sequence are validated with the specified alphabet.
            </summary>
            <param name="alphabet">Alphabet to which this class should conform.</param>
            <param name="sequence">The sequence in string form.</param>
        </member>
        <member name="M:Bio.Sequence.#ctor(Bio.IAlphabet,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the Sequence class with specified alphabet and string sequence.
            </summary>
            <param name="alphabet">Alphabet to which this class should conform.</param>
            <param name="sequence">The sequence in string form.</param>
            <param name="validate">If this flag is true then validation will be done to see whether the data is valid or not,
            else validation will be skipped.</param>
        </member>
        <member name="M:Bio.Sequence.#ctor(Bio.IAlphabet,System.Byte[])">
            <summary>
            Initializes a new instance of the Sequence class with specified alphabet and bytes.
            Bytes representing Symbols in the values are validated with the specified alphabet.
            </summary>
            <param name="alphabet">Alphabet to which this instance should conform.</param>
            <param name="values">An array of bytes representing the symbols.</param>
        </member>
        <member name="M:Bio.Sequence.#ctor(Bio.IAlphabet,System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the Sequence class with specified alphabet and bytes.
            </summary>
            <param name="alphabet">Alphabet to which this instance should conform.</param>
            <param name="values">An array of bytes representing the symbols.</param>
            <param name="validate">If this flag is true then validation will be done to see whether the data is valid or not,
            else validation will be skipped.</param>
        </member>
        <member name="M:Bio.Sequence.#ctor(Bio.ISequence)">
            <summary>
            Initializes a new instance of the Sequence class with passed new Sequence. Creates a copy of the sequence.
            </summary>
            <param name="newSequence">The New sequence for which the copy has to be made.</param>
        </member>
        <member name="M:Bio.Sequence.GetReversedSequence">
            <summary>
            Return a new sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="M:Bio.Sequence.GetComplementedSequence">
            <summary>
            Return a new sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="M:Bio.Sequence.GetReverseComplementedSequence">
            <summary>
            Return a new sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="M:Bio.Sequence.GetSubSequence(System.Int64,System.Int64)">
            <summary>
            Return a new sequence representing a range (subsequence) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The sub-sequence.</returns>
        </member>
        <member name="M:Bio.Sequence.IndexOfNonGap">
            <summary>
            Gets the index of first non-gap symbol.
            </summary>
            <returns>If found returns a zero based index of the first non-gap symbol, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.Sequence.IndexOfNonGap(System.Int64)">
            <summary>
            Returns the position of the first symbol beyond startPos that does not 
            have a Gap symbol.
            </summary>
            <param name="startPos">Index value beyond which the non-gap symbol is searched for.</param>
            <returns>If found returns a zero based index of the first non-gap symbol, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.Sequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non-gap symbol.
            </summary>
            <returns>If found returns a zero based index of the last non-gap symbol, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.Sequence.LastIndexOfNonGap(System.Int64)">
            <summary>
            Returns the index of last non-gap symbol before the specified end position.
            </summary>
            <param name="endPos">Index value up to which the non-Gap symbol is searched for.</param>
            <returns>If found returns a zero based index of the last non-gap symbol, otherwise returns -1.</returns>
        </member>
        <member name="M:Bio.Sequence.GetEnumerator">
            <summary>
            Gets an enumerator to the bytes present in this sequence.
            </summary>
            <returns>An IEnumerator of bytes.</returns>
        </member>
        <member name="M:Bio.Sequence.ToString">
            <summary>
            Returns a string representation of the sequence data. This representation
            will come from the symbols in the alphabet defined for the sequence.
            
            Thus a Sequence whose Alphabet is Alphabets.DNA may return a value like
            'GATTCCA'
            </summary>
        </member>
        <member name="M:Bio.Sequence.ConvertToString(System.Int64,System.Int64)">
            <summary>
            Converts part of the sequence to a string.
            </summary>
            <param name="startIndex">Start position of the sequence.</param>
            <param name="length">Number of symbols to return.</param>
            <returns>Part of the sequence in string format.</returns>
        </member>
        <member name="M:Bio.Sequence.GetInternalArray">
            <summary>
            This is used by some of the built-in algorithms which access the data in a read-only fashion
            to quickly grab a sequence of data without copying it.  It cannot be used outside Bio.dll
            For outside users, use the CopyTo method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.Sequence.CopyTo(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Copies all items from the sequence to a pre allocated array.
            </summary>
            <param name="byteArray">Array to fill the items to.</param>
            <param name="start">Index at which the filling starts.</param>
            <param name="count">Total numbers of elements to be copied.</param>
        </member>
        <member name="M:Bio.Sequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to the bytes present in this sequence.
            </summary>
            <returns>An IEnumerator of bytes.</returns>
        </member>
        <member name="P:Bio.Sequence.ID">
            <summary>
            Gets or sets an identifier for this instance of sequence class.
            </summary>
        </member>
        <member name="P:Bio.Sequence.Count">
            <summary>
            Gets the number of bytes contained in the Sequence.
            </summary>
        </member>
        <member name="P:Bio.Sequence.Alphabet">
            <summary>
            Gets or sets the alphabet to which symbols in this sequence belongs to.
            </summary>
        </member>
        <member name="P:Bio.Sequence.Metadata">
            <summary>
            Gets or sets the Metadata of this instance.
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            <para>
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            </para>
            <para>
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            </para>
            <para>
            To fetch the data you would use:
            </para>
            <para>
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            </para>
            <para>
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            </para>
            <para>
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;.
            </para>
            </summary>
        </member>
        <member name="P:Bio.Sequence.Item(System.Int64)">
            <summary>
            Returns the byte found at the specified index if within bounds. Note 
            that the index value starts at 0.
            </summary>
            <param name="index">Index at which the symbol is required.</param>
            <returns>Byte value at the given index.</returns>
        </member>
        <member name="T:Bio.SequenceEqualityComparer">
            <summary>
            This class gives the Sequence Equality Comparer.
            </summary>
        </member>
        <member name="M:Bio.SequenceEqualityComparer.Equals(Bio.ISequence,Bio.ISequence)">
            <summary>
            Two sequences data are equal or not.
            </summary>
            <param name="firstSequence">First sequence.</param>
            <param name="secondSequence">Second sequence.</param>
            <returns>Returns true if both sequence have equal data.</returns>
        </member>
        <member name="M:Bio.SequenceEqualityComparer.GetHashCode(Bio.ISequence)">
            <summary>
            Gets hash code.
            </summary>
            <param name="obj">The sequence object.</param>
            <returns>Returns the hash code.</returns>
        </member>
        <member name="T:Bio.Util.Helper">
            <summary>
            Generally useful static methods.
            </summary>
        </member>
        <member name="F:Bio.Util.Helper.ZippedFileExtension">
            <summary>
            The .gz extension to indicate gzipped files
            </summary>
        </member>
        <member name="F:Bio.Util.Helper.AlphabetsToShowInToString">
            <summary>
            Stores the number of alphabets to show in ToString function of a class.
            </summary>
        </member>
        <member name="F:Bio.Util.Helper.GenBankMetadataKey">
            <summary>
            Key to get GenBankMetadata object from Metadata of a sequence which is parsed from GenBankParser.
            </summary>
        </member>
        <member name="F:Bio.Util.Helper.SAMAlignmentHeaderKey">
            <summary>
            Key to get SAMAlignmentHeader object from Metadata of a sequence alignment which is parsed from SAMParser.
            </summary>
        </member>
        <member name="F:Bio.Util.Helper.SAMAlignedSequenceHeaderKey">
            <summary>
            Key to get SAMAlignedSequenceHeader object from Metadata of a aligned sequence which is parsed from SAMParser.
            </summary>
        </member>
        <member name="F:Bio.Util.Helper.PairedReadDelimiter">
            <summary>
            Delimitar "!" used to seperate the PairedRead information with other info in the sequence id.
            </summary>
        </member>
        <member name="M:Bio.Util.Helper.BigMul(System.Int32,System.Int32)">
            <summary>
            Helper method for large multiplication - this function is missing
            from the portable profile.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Util.Helper.GetSequenceRange(Bio.ISequence,System.Int64,System.Int64)">
            <summary>
            Get a range of sequence.
            </summary>
            <param name="sequence">Original sequence.</param>
            <param name="start">Start position.</param>
            <param name="length">Length of sequence.</param>
            <returns>New sequence with range specified.</returns>
        </member>
        <member name="M:Bio.Util.Helper.RemoveSequencePolyTail(Bio.ISequence,System.Int64,System.Int64)">
            <summary>
            Get a Sequence Poly Tail.
            </summary>
            <param name="sequence">Original sequence.</param>
            <param name="start">Start position.</param>
            <param name="length">Length of sequence.</param>
            <returns>New sequence with range specified.</returns>
        </member>
        <member name="M:Bio.Util.Helper.SplitSequence(Bio.Sequence,System.Int64,System.Int64)">
            <summary>
            Split sequence for Iron poython.
            </summary>
            <param name="seq">The sequence.</param>
            <param name="coverage">The coverage.</param>
            <param name="fragment_length">Fragment Length.</param>
            <returns>List of split sequences.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetReverseComplement(System.String,System.Char[])">
            <summary>
            Get reverse complement of sequence string.
            Handles only unambiguous DNA sequence strings.
            Note: This method is a light-weight implementation of sequence.ReverseComplement.
            This only works for unambiguous DNA sequences, which is characteristic of the input for de-novo.
            </summary>
            <param name="sequence">Sequence string.</param>
            <param name="reverseComplementBuilder">String builder for building reverse complement.</param>
            <returns>Reverse Complement sequence string.</returns>
        </member>
        <member name="M:Bio.Util.Helper.IsFasta(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for FASTA formats.
            </summary>
            <returns>
            True  : if it is a valid fasta file extension.
            False : if it is a in-valid fasta file extension.
            </returns>
        </member>
        <member name="M:Bio.Util.Helper.IsZippedFasta(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for FASTA formats that is gzipped.
            </summary>
            <returns>
            True  : if it is a valid gzipped fasta file extension.
            False : if it is a in-valid gzipped fasta file extension.
            </returns>
        </member>
        <member name="M:Bio.Util.Helper.IsZippedFastQ(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for a gzipped FastQ formats. 
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Util.Helper.FileEndsWithZippedExtension(System.String)">
            <summary>
            Determine if file ends with extension ".gz"
            </summary>
            <returns><c>true</c>, if file name ends with zipped extension <c>false</c> otherwise.</returns>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Bio.Util.Helper.IsFastQ(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for FastQ formats.
            </summary>
            <returns>
            True  : if it is a valid fastq file extension.
            False : if it is a in-valid fastq file extension.
            </returns>
        </member>
        <member name="M:Bio.Util.Helper.IsGenBank(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for GenBank formats.
            </summary>
            <returns>
            true  : if it is a valid GenBank file extension.
            false : if it is a in-valid GenBank file extension.
            </returns>
        </member>
        <member name="M:Bio.Util.Helper.GetGenBankAccession(Bio.IO.GenBank.GenBankAccession)">
            <summary>
            Returns a string which represents specified GenBankAccession.
            </summary>
            <param name="accession">GenBankAccession instance.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetProjectIdentifier(Bio.IO.GenBank.ProjectIdentifier)">
            <summary>
            Returns a string which represents specified ProjectIdentifier.
            </summary>
            <param name="projectIdentifier">ProjectIdentifier instance.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetCrossReferenceLink(System.Collections.Generic.IList{Bio.IO.GenBank.CrossReferenceLink})">
            <summary>
            Returns a string which represents specified CrossReferenceLink.
            </summary>
            <param name="crossReferenceLinks">CrossReferenceLinks.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetSequenceSegment(Bio.IO.GenBank.SequenceSegment)">
            <summary>
            Returns a string which represents specified SequenceSegment.
            </summary>
            <param name="segment">SequenceSegment instance.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetStrandType(System.String)">
            <summary>
            Returns a SequenceStrandType corresponds to the specified string.
            </summary>
            <param name="strand">Strand type.</param>
            <returns>Returns SequenceStrandType.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetStrandType(Bio.IO.GenBank.SequenceStrandType)">
            <summary>
            Returns a string which represents specified SequenceStrandType.
            </summary>
            <param name="strand">Strand type.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetStrandTopology(System.String)">
            <summary>
            Returns a SequenceStrandTopology corresponds to the specified string.
            </summary>
            <param name="strandTopology">Strand topology.</param>
            <returns>Returns SequenceStrandTopology.</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetStrandTopology(Bio.IO.GenBank.SequenceStrandTopology)">
            <summary>
            Returns a string which represents specified SequenceStrandTopology.
            </summary>
            <param name="strandTopology">Strand topology.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:Bio.Util.Helper.StringMultiply(System.String,System.Int32)">
            <summary>
            String Multiply. Build a string by concatenating copies of the input string.
            </summary>
            <param name="str">The string to multiply.</param>
            <param name="count">The number of copies wanted.</param>
            <returns>The multiplied string.</returns>
        </member>
        <member name="M:Bio.Util.Helper.StringHasMatch(System.String,System.String[])">
            <summary>
            See if test string is identical to any of the passed list of strings.
            </summary>
            <param name="test">The string to test.</param>
            <param name="args">Variable number of strings to test against.</param>
            <returns>True if test matches one of the subsequent arguments.</returns>
        </member>
        <member name="M:Bio.Util.Helper.StringContainsIllegalCharacters(System.String,System.Char[])">
            <summary>
            Determines if the string contains any characters specified in the list.
            </summary>
            <param name="toTest"></param>
            <param name="illegalCharacters"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Util.Helper.IsValidPatternValue(System.String,System.String,System.String)">
            <summary>
            Validates specified value with the specified regular expression pattern.
            </summary>
            <param name="name">Name of the field.</param>
            <param name="value">Value to validate.</param>
            <param name="pattern">Regular expression pattern.</param>
            <returns>Returns empty string if valid; otherwise error message.</returns>
        </member>
        <member name="M:Bio.Util.Helper.IsValidPatternValue(System.String,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Validates specified value with the specified regular expression.
            </summary>
            <param name="name">Name of the field.</param>
            <param name="value">Value to validate.</param>
            <param name="regx">Regular expression object.</param>
            <returns>Returns empty string if valid; otherwise error message.</returns>
        </member>
        <member name="M:Bio.Util.Helper.IsValidRange(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Validates int value.
            </summary>
            <param name="name">Name of the field.</param>
            <param name="value">Value to validate.</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <returns>Returns empty string if valid; otherwise error message.</returns>
        </member>
        <member name="M:Bio.Util.Helper.IsValidRegexValue(System.String,System.String)">
            <summary>
            Validates specified value with the specified regular expression. 
            </summary>
            <param name="pattern">Regular expression.</param>
            <param name="value">Value to validate.</param>
            <returns>Returns true if value completely match with the specified 
            regular expression; otherwise false.</returns>
        </member>
        <member name="M:Bio.Util.Helper.IsValidRegexValue(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Validates specified value with the specified regular expression. 
            </summary>
            <param name="regx">Regular expression object.</param>
            <param name="value">Value to validate.</param>
            <returns>Returns true if value completely match with the specified 
            regular expression; otherwise false.</returns>
        </member>
        <member name="M:Bio.Util.Helper.CheckCondition(System.Boolean)">
            <summary>
            Confirms that a condition is true. Raise an exception if it is not.
            </summary>
            <param name="condition">The condition to check</param>
        </member>
        <member name="M:Bio.Util.Helper.CheckCondition(System.Boolean,System.String)">
            <summary>
            Confirms that a condition is true. Raise an exception if it is not.
            </summary>
            <remarks>
            Warning: The message with be evaluated even if the condition is true, so don't make it's calculation slow.
                      Avoid this with the "messageFunction" version.
            </remarks>
            <param name="condition">The condition to check</param>
            <param name="message">A message for the exception</param>
        </member>
        <member name="M:Bio.Util.Helper.CheckCondition(System.Boolean,System.String,System.Object[])">
            <summary>
            Confirms that a condition is true. Raise an exception if it is not.
            </summary>
            <remarks>
            Warning: The message with be evaluated even if the condition is true, so don't make it's calculation slow.
                      Avoid this with the "messageFunction" version.
            </remarks>
            <param name="condition">The condition to check</param>
            <param name="messageToFormat">A message for the exception</param>
            <param name="formatValues">Values for the exception's message.</param>
        </member>
        <member name="M:Bio.Util.Helper.CheckCondition(System.Boolean,System.Func{System.String})">
            <summary>
            Confirms that a condition is true. Raise an exception if it is not.
            </summary>
            <remarks>
            messageFunction will only be evaluated of condition is false. Use this version for messages that are costly to compute.
            </remarks>
            <param name="condition">The condition to check</param>
            <param name="messageFunction">Function that will generate the message if the condition is false.</param>
        </member>
        <member name="M:Bio.Util.Helper.CheckCondition``1(System.Boolean)">
            <summary>
            Confirms that a condition is true. Raise an exception of type T if it is not.
            </summary>
            <param name="condition">The condition to check</param>
            <typeparam name="T">The type of exception that will be raised.</typeparam>
        </member>
        <member name="M:Bio.Util.Helper.CheckCondition``1(System.Boolean,System.String)">
            <summary>
            Confirms that a condition is true. Raise an exception of type T if it is not.
            </summary>
            <remarks>
            Warning: The message with be evaluated even if the condition is true, so don't make it's calculation slow.
                      Avoid this with the "messageFunction" version.
            </remarks>
            <param name="condition">The condition to check</param>
            <param name="message">A message for the exception</param>
            <typeparam name="T">The type of exception that will be raised.</typeparam>
        </member>
        <member name="M:Bio.Util.Helper.CheckCondition``1(System.Boolean,System.String,System.Object[])">
            <summary>
            Confirms that a condition is true. Raise an exception if it is not.
            </summary>
            <remarks>
            Warning: The message with be evaluated even if the condition is true, so don't make it's calculation slow.
                      Avoid this with the "messageFunction" version.
            </remarks>
            <param name="condition">The condition to check</param>
            <param name="messageToFormat">A message for the exception</param>
            <param name="formatValues">Values for the exception's message.</param>
            <typeparam name="T">The type of exception that will be raised.</typeparam>
        </member>
        <member name="M:Bio.Util.Helper.CheckCondition``1(System.Boolean,System.Func{System.String})">
            <summary>
            Confirms that a condition is true. Raise an exception if it is not.
            </summary>
            <remarks>
            messageFunction will only be evaluated of condition is false. Use this version for messages that are costly to compute.
            </remarks>
            <param name="condition">The condition to check</param>
            <param name="messageFunction">Function that will generate the message if the condition is false.</param>
        </member>
        <member name="M:Bio.Util.Helper.CreateTabString(System.Object[])">
            <summary>
            Creates a tab-delimited string containing the object's string values.
            </summary>
            <param name="objectCollection">The objects to put in the string</param>
            <returns>A tab-delimited string</returns>
        </member>
        <member name="M:Bio.Util.Helper.CreateDelimitedString(System.String,System.Object[])">
            <summary>
            Creates a delimited string containing the object's string values.
            </summary>
            <param name="delimiter">The string that will delimit the objects</param>
            <param name="objectCollection">The objects to put in the string</param>
            <returns>A delimiter-delimited string</returns>
        </member>
        <member name="M:Bio.Util.Helper.KeysEqual``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2})">
            <summary>
            Efficiently (log n) test if two dictionaries have the same key set.
            </summary>
            <typeparam name="TKey">The key type of the dictionaries</typeparam>
            <typeparam name="TValue1">The value type of dictionary 1</typeparam>
            <typeparam name="TValue2">The value type of dictionary 2</typeparam>
            <param name="dictionary1">The first dictionary</param>
            <param name="dictionary2">The second dictionary</param>
            <returns>True if the two key sets are "set equal"; false, otherwise.</returns>
        </member>
        <member name="M:Bio.Util.Helper.WrapAroundLeftShift(System.Int32,System.Int32)">
            <summary>
            Shifts the bits of an int around in a wrapped way. It is useful for creating hashcodes of collections.
            </summary>
            <param name="someInt">the int to shift</param>
            <param name="count">The number of bits to shift the int</param>
            <returns>The shifted int.</returns>
        </member>
        <member name="M:Bio.Util.Helper.ASCIIEncoding(System.Byte[],System.String@)">
            <summary>
            Simple method to take a byte array and convert it to ASCII string.
            </summary>
            <param name="input">Input bytes</param>
            <param name="output">Output string</param>
            <returns>True/False success</returns>
        </member>
        <member name="M:Bio.Util.Helper.GenerateAlphabetCheckFailureException(Bio.IAlphabet,System.Byte[])">
            <summary>
            Create a useful error message when a sequence fails validation.
            </summary>
            <param name="alphabet"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Util.Helper.GetLittleEndianByteArray(System.Int16)">
            <summary>
            Gets a byte array which represents value of 16 bit singed integer in LittleEndian format.
            </summary>
            <param name="value">16 bit singed integer value.</param>
        </member>
        <member name="M:Bio.Util.Helper.GetLittleEndianByteArray(System.UInt16)">
            <summary>
            Gets a byte array which represents value of 16 bit unsinged integer in LittleEndian format.
            </summary>
            <param name="value">16 bit unsinged integer value.</param>
        </member>
        <member name="M:Bio.Util.Helper.GetLittleEndianByteArray(System.Int32)">
            <summary>
            Gets a byte array which represents value of 32 bit singed integer in LittleEndian format.
            </summary>
            <param name="value">32 bit singed integer value.</param>
        </member>
        <member name="M:Bio.Util.Helper.GetLittleEndianByteArray(System.UInt32)">
            <summary>
            Gets a byte array which represents value of 32 bit unsigned integer in LittleEndian format.
            </summary>
            <param name="value">32 bit unsigned integer value.</param>
        </member>
        <member name="M:Bio.Util.Helper.GetLittleEndianByteArray(System.Single)">
            <summary>
            Gets byte array which represents value of float in LittleEndian format.
            </summary>
            <param name="value">Float value.</param>
        </member>
        <member name="M:Bio.Util.Helper.GetInt32(System.Byte[],System.Int32)">
            <summary>
            Returns 32 bit signed integer from the byte array stored as little-endian.
            </summary>
            <param name="byteArray">byte array.</param>
            <param name="startIndex">Start index of the byte array.</param>
        </member>
        <member name="M:Bio.Util.Helper.GetUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns 32 bit unsigned integer from the byte array stored as little-endian.
            </summary>
            <param name="byteArray">byte array.</param>
            <param name="startIndex">Start index of the byte array.</param>
        </member>
        <member name="M:Bio.Util.Helper.GetUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns 32 bit unsigned integer from the byte array stored as little-endian.
            </summary>
            <param name="byteArray">byte array.</param>
            <param name="startIndex">Start index of the byte array.</param>
        </member>
        <member name="M:Bio.Util.Helper.GetInt16(System.Byte[],System.Int32)">
            <summary>
            Returns 16 bit signed integer from the byte array stored as little-endian.
            </summary>
            <param name="byteArray">byte array.</param>
            <param name="startIndex">Start index of the byte array.</param>
        </member>
        <member name="M:Bio.Util.Helper.GetUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns 16 bit unsigned integer from the byte array stored as little-endian.
            </summary>
            <param name="byteArray">byte array.</param>
            <param name="startIndex">Start index of the byte array.</param>
        </member>
        <member name="M:Bio.Util.Helper.GetSingle(System.Byte[],System.Int32)">
            <summary>
            Returns float from the byte array.
            </summary>
            <param name="byteArray">byte array.</param>
            <param name="startIndex">Start index of the byte array.</param>
        </member>
        <member name="M:Bio.Util.Helper.GetHexString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the HexString from the specified byte array.
            </summary>
            <param name="byteArray">Byte array.</param>
            <param name="startIndex">Start index of array from which HexString is stored.</param>
            <param name="length">Length of HexString to read.</param>
        </member>
        <member name="M:Bio.Util.Helper.GetNormalRandom(System.Double,System.Double)">
            <summary>
            Returns random numbers according to an approximate normal distribution
            with an average and standard deviation set by the caller.
            </summary>
            <param name="average">Average result returned from calling the method</param>
            <param name="standardDeviation">Standard deviation applied to the normal curve</param>
            <returns>A random value</returns>
        </member>
        <member name="M:Bio.Util.Helper.GetNormalRandom(System.Double,System.Double,System.Int32)">
            <summary>
            Returns random numbers according to an approximate normal distribution
            with an average and standard deviation set by the caller. This is done iteratively
            using the central limit theorem.
            </summary>
            <param name="average">Average result returned from calling the method</param>
            <param name="standardDeviation">Standard deviation applied to the normal curve</param>
            <param name="steps">
            The number of iterative steps to take in generating each number. The higher this number
            is, the closer to a true normal distribution the results will be, but the higher the
            computation cost. A value between 4 and 8 should be sufficient for most uses.
            </param>
            <returns>A random value</returns>
        </member>
        <member name="M:Bio.Util.Helper.IsBAM(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for BAM formats.
            </summary>
            <returns>
            true  : if it is a valid BAM file extension.
            false : if it is a in-valid BAM file extension.
            </returns>
        </member>
        <member name="M:Bio.Util.Helper.ValidatePairedSequenceId(System.String,System.String@,System.Boolean@,System.String@,System.String@)">
            <summary>
            Validates the specified sequence id is in the format of paired read or not.
            If so then gets the original sequence id, paired read type and library name from the paired sequence id.
            For Example:
             if the sequence id is  "seq1.F:10K!324;abcd;345" then this method will return true and 
               originalSequenceId  -  "seq1"
               pairedReadType      -  "F"
               libraryName         -  "10K"
             if the sequence id is not in the format of "originalSequenceId.{F,R}:LibraryName"
             or "originalSequenceId.{F,R}:LibraryName!otherInfo" then this method will return false.
            </summary>
            <param name="pairedSequenceId">Paired sequence id.</param>
            <param name="originalSequenceId">Original sequence id part from the specified sequence id.</param>
            <param name="forwardRead">Flag to indicate whether forward read or not.</param>
            <param name="pairedReadType">Paired sequence type part from the specified sequence id.</param>
            <param name="libraryName">Library name part from the specified sequence id.</param>
        </member>
        <member name="M:Bio.Util.Helper.GetMatePairedReadType(System.String)">
            <summary>
            Gets the mate paired read type.
            That is for F/1/X1 it provides R/2/Y1.
            </summary>
            <param name="pairedReadType">Paired read type.</param>
        </member>
        <member name="M:Bio.Util.Helper.GetPairedReadId(System.String,System.String,System.String)">
            <summary>
            Concatenates the specified original sequence id, paired read type and library name to paired read id format.
            </summary>
            <param name="originalSequenceId">Original sequence id.</param>
            <param name="pairedReadType">Paired read type.</param>
            <param name="libraryName">Library name.</param>
        </member>
        <member name="M:Bio.Util.Helper.GetReadIdExcludingOtherInfo(System.String)">
            <summary>
            Returns the id exluding the otherinformation part from it.
            </summary>
            <param name="readId">Read id.</param>
        </member>
        <member name="M:Bio.Util.Helper.GetString(Bio.Algorithms.Alignment.DeltaAlignment)">
            <summary>
            Gets string representing specified delta alignment.
            This method is used in comparative Utilities to write delta alignments to file.
            </summary>
            <param name="deltaAlignment">Delta alignment</param>
        </member>
        <member name="M:Bio.Util.Helper.Copy(System.Array,System.Array,System.Int64)">
            <summary>
            Copies source array to destination array.
            </summary>
            <param name="sourceArray">Source array</param>
            <param name="destinationArray">Destination array</param>
            <param name="length">No of elements to copy</param>
        </member>
        <member name="M:Bio.Util.Helper.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>
             Copies source array to destination array.
            </summary>
            <param name="sourceArray">Source array</param>
            <param name="sourceIndex">Source stating index.</param>
            <param name="destinationArray">Destination array</param>
            <param name="destinationIndex">Destination stating index.</param>
            <param name="length">No of elements to copy</param>
        </member>
        <member name="T:Bio.Util.HttpUtility">
            <summary>
            Provides methods for encoding URLs when processing Web requests.
            </summary>
        </member>
        <member name="F:Bio.Util.HttpUtility.notEncodedChars">
            <summary>
            Holds nonencoded characters.
            </summary>
        </member>
        <member name="F:Bio.Util.HttpUtility.hexChars">
            <summary>
            Holds hexa characters.
            </summary>
        </member>
        <member name="M:Bio.Util.HttpUtility.UrlEncode(System.String)">
            <summary>
            Encodes a URL string.
            </summary>
            <param name="str">The text to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Bio.Util.HttpUtility.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            Encodes a URL string using the specified encoding object.
            </summary>
            <param name="str">The text to encode.</param>
            <param name="enc">The System.Text.Encoding object that specifies the encoding scheme.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="T:Bio.Util.Logging.ApplicationLog">
            <summary>
            log is a class that implements straightforward logging to a text file, 
            and tries to minimize clutter of the code that uses it.
            </summary>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.Write(System.String)">
            <summary>
            Write a single string to the writer.
            </summary>
            <param name="output">the string</param>
            <returns>the string</returns>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.Write(System.String,System.Object[])">
            <summary>
            Write a formatted string to the output.
            Same syntax as Stream.Write().
            </summary>
            <param name="fmt">the format string</param>
            <param name="args">additional arguments</param>
            <returns>the formatted string that was written</returns>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.WriteLine(System.String)">
            <summary>
            Write a plain string to the output, then a newline.
            </summary>
            <param name="output">the string</param>
            <returns>the string</returns>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.WriteLine(System.String,System.Object[])">
            <summary>
            Write a formatted string to the output, then a newline.
            Same syntax as Stream.WriteLine().
            </summary>
            <param name="fmt">the format string</param>
            <param name="args">additional arguments</param>
            <returns>the formatted string that was written</returns>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.WriteTime(System.String,System.Object[])">
            <summary>
            Write a formatted string to output, with the current date/time
            prepended, and a newline appended.
            </summary>
            <param name="fmt">the format string</param>
            <param name="args">additional arguments</param>
            <returns>the formatted string (including date/time) that was written</returns>
        </member>
        <member name="M:Bio.Util.Logging.ApplicationLog.Exception(System.Exception)">
            <summary>
            Write an exception's message, its inner exception's message, and the
            stack trace to the log.
            </summary>
            <param name="exception">the Exception</param>
            <returns>the formatted string that was written</returns>
        </member>
        <member name="E:Bio.Util.Logging.ApplicationLog.WriteHandler">
            <summary>
            Platform specific hook to get output from log.
            </summary>
        </member>
        <member name="T:Bio.Util.Logging.Trace">
            <summary>
            The Trace class implements a mechanism for logging messages, both to a Log object,
            and to a simple message queue that can be used for GUI display or other purposes.
            </summary>
        </member>
        <member name="F:Bio.Util.Logging.Trace.SeqWarnings">
            <summary>
            Flag to report non-fatal sequence parsing/formatting errors.
            </summary>
        </member>
        <member name="F:Bio.Util.Logging.Trace.AssemblyDetails">
            <summary>
            Flag to report details of sequence assembly into the log.
            </summary>
        </member>
        <member name="F:Bio.Util.Logging.Trace.DefaultMaxMessages">
            <summary>
            Default maxiumum messages
            </summary>
        </member>
        <member name="F:Bio.Util.Logging.Trace.flags">
            <summary>
            flags variable
            </summary>
        </member>
        <member name="F:Bio.Util.Logging.Trace.maxMessages">
            <summary>
            maximum messages
            </summary>
        </member>
        <member name="F:Bio.Util.Logging.Trace.Messages">
            <summary>
            list of trace messages
            </summary>
        </member>
        <member name="M:Bio.Util.Logging.Trace.Want(System.UInt64)">
            <summary>
            Test to see if a flag is in the set of flags currently turned on.
            </summary>
            <param name="traceSettings">a flag, encoded as a single bit in a ulong.</param>
            <returns>true if the flag is set.</returns>
        </member>
        <member name="M:Bio.Util.Logging.Trace.Report(Bio.Util.Logging.TraceMessage)">
            <summary>
            Report a TraceMessage, by adding it to the front of the message
            queue, as well as logging it.
            </summary>
            <param name="m">the Trace message</param>
        </member>
        <member name="M:Bio.Util.Logging.Trace.Report(System.String,System.String,System.String)">
            <summary>
            Overload that constructs the TraceMessage from its parts.
            </summary>
            <param name="context">Where the incident occurred.</param>
            <param name="message">The details of what happened.</param>
            <param name="data">Pertinent data such as argument values.</param>
        </member>
        <member name="M:Bio.Util.Logging.Trace.Report(System.String)">
            <summary>
            Overload to report from a plain string.
            </summary>
            <param name="message">the message.</param>
        </member>
        <member name="M:Bio.Util.Logging.Trace.LatestMessage">
            <summary>
            Return the newest message in the queue (or null, if none).
            </summary>
            <returns>a TraceMessage.</returns>
        </member>
        <member name="M:Bio.Util.Logging.Trace.GetMessage(System.Int32)">
            <summary>
            return the ith message in the queue (0 = newest).
            </summary>
            <param name="i">the index.</param>
            <returns>the TraceMessage.</returns>
        </member>
        <member name="M:Bio.Util.Logging.Trace.Set(System.UInt64)">
            <summary>
            Turn on a flag, expressed as a set bit in a ulong.
            </summary>
            <param name="traceSettings">The bit to set.</param>
        </member>
        <member name="M:Bio.Util.Logging.Trace.Clear(System.UInt64)">
            <summary>
            Clear a flag, expressed as a set bit in a ulong.
            </summary>
            <param name="traceSettings">The bit to clear.</param>
        </member>
        <member name="M:Bio.Util.Logging.Trace.TrimToSize">
            <summary>
            TrimToSize method
            </summary>
        </member>
        <member name="T:Bio.Util.Logging.TraceMessage">
            <summary>
            A TraceMessage is a simple message holding class.
            </summary>
        </member>
        <member name="F:Bio.Util.Logging.TraceMessage.context">
            <summary>
            The context where the event occurred, such as a method name, or
            a particular point in a complex operation.
            </summary>
        </member>
        <member name="F:Bio.Util.Logging.TraceMessage.message">
            <summary>
            A description of the event.
            </summary>
        </member>
        <member name="F:Bio.Util.Logging.TraceMessage.data">
            <summary>
            Data associated with the event, such as argument values.
            </summary>
        </member>
        <member name="F:Bio.Util.Logging.TraceMessage.when">
            <summary>
            When the event occurred.
            </summary>
        </member>
        <member name="M:Bio.Util.Logging.TraceMessage.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the TraceMessage class to construct a message.
            </summary>
            <param name="c">The context parameter.</param>
            <param name="m">The message parameter.</param>
            <param name="d">The data parameter.</param>
            <param name="w">When the event occurred.</param>
        </member>
        <member name="M:Bio.Util.Logging.TraceMessage.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the TraceMessage class to construct a message, using the current date/time.
            </summary>
            <param name="c">The context parameter.</param>
            <param name="m">The message parameter.</param>
            <param name="d">The data parameter.</param>
        </member>
        <member name="M:Bio.Util.Logging.TraceMessage.Format">
            <summary>
            Convert a Trace.Message into a user-friendly string.
            </summary>
            <returns>the string.</returns>
        </member>
        <member name="T:Bio.Util.LongSerialNumbers`1">
            <summary>
            Provides serial numbers to each Elements.
            </summary>
            <typeparam name="T">Type of elements to store.</typeparam>
        </member>
        <member name="M:Bio.Util.LongSerialNumbers`1.#ctor">
            <summary>
            Initializes an instance of LongSerialNumbers class.
            </summary>
        </member>
        <member name="M:Bio.Util.LongSerialNumbers`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes an instance of LongSerialNumbers class with specified comparer.
            </summary>
            <param name="comparer">Comparer to use for comparing two items.</param>
        </member>
        <member name="M:Bio.Util.LongSerialNumbers`1.GetNewOrOld(`0)">
            <summary>
            Returns the serial number of an item. If the item has already been assigned a serial number, returns that number; 
            otherwise, assigns a new number to the item and returns that new number.
            </summary>
            <param name="item">The item</param>
            <returns>The item's serial number</returns>
        </member>
        <member name="M:Bio.Util.LongSerialNumbers`1.GetNew(`0)">
            <summary>
            Assigns a serial number to a new item. Raises an exception of the item is not new.
            </summary>
            <param name="item">The item</param>
            <returns>The items serial number</returns>
        </member>
        <member name="M:Bio.Util.LongSerialNumbers`1.GetOld(`0)">
            <summary>
            Finds the serial number of item to which a serial number has already been assigned. Raises an exception of the item is new.
            </summary>
            <param name="item">The item</param>
            <returns>The serial number of that item.</returns>
        </member>
        <member name="M:Bio.Util.LongSerialNumbers`1.TryGetOld(`0,System.Int64@)">
            <summary>
            Finds the serial number of item to which a serial number has already been assigned.
            </summary>
            <param name="item">The item</param>
            <param name="serialNumber">The serial number that was assigned to that item.</param>
            <returns>true if the item has previously been assigned a serial number; otherwise, false.</returns>
        </member>
        <member name="M:Bio.Util.LongSerialNumbers`1.Contains(`0)">
            <summary>
            Tells if an item already has a serial number
            </summary>
            <param name="item">the item</param>
            <returns>true if the item has previously been assigned a serial number; otherwise, false.</returns>
        </member>
        <member name="P:Bio.Util.LongSerialNumbers`1.Count">
            <summary>
            Gets the number of elements present in the LongSerialNumbers.
            </summary>
        </member>
        <member name="P:Bio.Util.LongSerialNumbers`1.Last">
            <summary>
            The last serial number assigned.
            </summary>
        </member>
        <member name="T:Bio.Util.Parser">
            <summary>
            A class for parsing strings to values of a desired type.
            </summary>
        </member>
        <member name="M:Bio.Util.Parser.TryParseAll``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IList{``0}@)">
            <summary>
            Tries to parse a sequence of strings into a list of values
            </summary>
            <typeparam name="T">The type of the values</typeparam>
            <param name="stringSequence">The sequence of strings to parse</param>
            <param name="result">The list of values</param>
            <returns>true, if parsing worked; false, otherwise.</returns>
        </member>
        <member name="M:Bio.Util.Parser.ParseAll``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a sequences of values from a sequence of strings
            </summary>
            <typeparam name="T">The type to parse into</typeparam>
            <param name="stringSequence">The sequence of strings to parse</param>
            <returns>A sequence of values</returns>
        </member>
        <member name="M:Bio.Util.Parser.Parse(System.String,System.Type)">
            <summary>
            Tries to parse a string into the type given
            </summary>
            <param name="field">The string to parse</param>
            <param name="type">The type to parse into</param>
            <returns>The parsed value</returns>
        </member>
        <member name="M:Bio.Util.Parser.Parse``1(System.String)">
            <summary>
            Will parse s into T, provided T has a Parse(string) or TryParse(string s, out T t) method defined, or is one of the magical
            special cases we've implemented (including ICollection (comma delimited), Nullable and Enums).
            </summary>
            <typeparam name="T">The type to parse into</typeparam>
            <param name="s">the string to parse</param>
            <returns>the value</returns>
        </member>
        <member name="M:Bio.Util.Parser.TryParse``1(System.String,``0@)">
            <summary>
            Will parse s into T, provided T has a Parse(string) or TryParse(string s, out T t) method defined, or is one of the magical
            special cases we've implemented (including ICollection (comma delimited), Nullable and Enums).
            </summary>
            <typeparam name="T">the type to parse into</typeparam>
            <param name="s">the string to parse</param>
            <param name="t">the resulting value</param>
            <returns>true, if parsing worked; false, otherwise.</returns>
        </member>
        <member name="T:Bio.Util.RangeCollection">
            <summary>
            A set of longs. Internally, represents this set as a sequence of ranges, for example, 1-10,333-1200,1300, so if
            the longs are clumpy then RangeCollection is very fast and uses very little memory.
            </summary>
        </member>
        <member name="M:Bio.Util.RangeCollection.#ctor">
            <summary>
            Create an new, empty, RangeCollection.
            </summary>
        </member>
        <member name="M:Bio.Util.RangeCollection.#ctor(System.Int64)">
            <summary>
            Create an new RangeCollection containing a single long.
            </summary>
            <returns>a new RangeCollection</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.#ctor(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Create a new RangeCollection containing the longs from a sequence.
            </summary>
            <param name="itemSequence">A sequences of longs</param>
            <returns>a new RangeCollection</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create a new RangeCollection containing the longs from a sequence.
            </summary>
            <param name="itemSequence">A sequences of longs</param>
            <returns>a new RangeCollection</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.#ctor(System.Int64,System.Int64)">
            <summary>
            Create a new Range collection containing all the longs in a range (inclusive)
            </summary>
            <param name="begin">The first long to include in the RangeCollection</param>
            <param name="last">The last long to include in the RangeCollection</param>
            <returns>a new RangeCollection</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.Parse(System.String)">
            <summary>
            Parses strings of the form -10--5,-2-10,12-12 . Spaces are allowed, no other characters are.
            If mergeOverlappingRanges, then, for example, 2-3,4-5 is represented
            as 2-5. Otherwise, they're maintained as separate ranges. The only difference is in the behavior of the ToString() call.
            By extension, this will change how a RangeCollection is parsed into a RangeCollectionCollection using the latter's
            GetInstance(RangeCollection) initializer.
            </summary>
            <param name="ranges">A range or the string empty. \"empty\" will return an empty range.</param>
            <returns>a new RangeCollection</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.Clear">
            <summary>
            Make the set empty
            </summary>
        </member>
        <member name="M:Bio.Util.RangeCollection.Count">
            <summary>
            The number of long elements in the RangeCollection
            </summary>
            <returns>A size of the set</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.Count(System.Int64,System.Int64)">
            <summary>
            The number of long elements in the RangeCollection between min and max (inclusive)
            </summary>
            <param name="min">The smallest long element to consider</param>
            <param name="max">The largest long element to consider</param>
            <returns>The number of element in between min and max (inclusive)</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.Equals(System.Object)">
            <summary>
            True if and only if two RangeCollections have exactly the same elements.
            </summary>
            <param name="obj">The object to compare to</param>
            <returns>true, if there the RangeCollections have the same elements; false, otherwise</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.GetHashCode">
            <summary>
            Two RangeCollections with exactly the same elements will have the same hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.AddRangeCollection(Bio.Util.RangeCollection)">
            <summary>
            Add the longs of one RangeCollection to this RangeCollection.
            </summary>
            <param name="rangeCollection">The RangeCollection to add</param>
        </member>
        <member name="M:Bio.Util.RangeCollection.TryAddRangeCollection(Bio.Util.RangeCollection)">
            <summary>
            Add the longs of one RangeCollection to this RangeCollection.
            </summary>
            <param name="rangeCollection">The RangeCollection to add</param>
            <returns>true of all the elements added are new; otherwise, false</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.AddRanges(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Given a sequence of strings, each of which represents a contiguous range, add all the longs in all the ranges to this RangeCollection.
            </summary>
            <param name="rangeAsStringSequence">A sequence of strings</param>
        </member>
        <member name="M:Bio.Util.RangeCollection.AddRange(System.String)">
            <summary>
            Given a contiguous range represented as a string, for example, "1-5", add all the longs in that range to this RangeCollection.
            </summary>
            <param name="rangeAsString">the range to add represented as a string</param>
        </member>
        <member name="M:Bio.Util.RangeCollection.AddRange(System.Int64,System.Int64)">
            <summary>
            Add all the longs starting at 'begin' to 'last' (inclusive) to the RangeCollection. They may or may not already be in the RangeCollection.
            The number of longs added must not be more than long.MaxValue.
            </summary>
            <param name="begin">The first long to add</param>
            <param name="last">The last long to add</param>
        </member>
        <member name="M:Bio.Util.RangeCollection.AddRange(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Add a sequence of integers to the RangeCollection. Each may or may not already be in the RangeCollection.
            </summary>
            <param name="itemList">The sequence of longs to add</param>
        </member>
        <member name="M:Bio.Util.RangeCollection.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Add a sequence of integers to the RangeCollection. Each may or may not already be in the RangeCollection.
            </summary>
            <param name="itemList">The sequence of longs to add</param>
        </member>
        <member name="M:Bio.Util.RangeCollection.Add(System.Int64)">
            <summary>
            Add an long to the RangeCollection. The long may or may not already be in the RangeCollection.
            </summary>
            <param name="item">The long to add.</param>
        </member>
        <member name="M:Bio.Util.RangeCollection.AddNew(System.Int64)">
            <summary>
            Add an long to the RangeCollection. An exception is thrown if the long is already in the RangeCollection.
            </summary>
            <param name="item">The long to add.</param>
        </member>
        <member name="M:Bio.Util.RangeCollection.TryAdd(System.Int64)">
            <summary>
            Trys to add a new element to the set.
            </summary>
            <param name="item">An long to add</param>
            <returns>True if item was added. False if it already existed in the range.</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.Contains(System.Int64)">
            <summary>
            Returns true if item is within the ranges of this RangeCollection.
            </summary>
        </member>
        <member name="M:Bio.Util.RangeCollection.Contains(System.Int64,System.Int64)">
            <summary>
            Tells if all longs from start to last (inclusive) are members of this RangeCollection.
            </summary>
            <param name="start">The first long</param>
            <param name="last">The last long</param>
            <returns>true if all longs from start to last (inclusive) are members of this RangeCollection; otherwise, false</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.Contains(Bio.Util.RangeCollection)">
            <summary>
            Tells if this RangeCollection is a superset of another. An an equal RangeCollection is a superset.
            </summary>
            <param name="rangeCollection">The RangeCollection that may be the subset</param>
            <returns>true, if this RangeCollection is a superset; otherwise, false</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.IsBetween(System.Int64,System.Int64)">
            <summary>
            Tells if every element of the RangeCollection is between low (inclusive) and high (inclusive)
            </summary>
            <param name="low">That value that every element must be at least as large as</param>
            <param name="high">The value that every element must be no learger than</param>
            <returns>true if every element is between these two values (inclusive); otherwise, false</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.ToString(System.String,System.String)">
            <summary>
            Returns RangeCollection as a string in the form. For example, the range collection containing 1, 2, 10, 11, and 12 returns "1-2,10-12".
            If the set is empty, returns "Empty"
            </summary>
            <param name="seperator1">The string that indicates a contiguous range. Usually "-"</param>
            <param name="separator2">The string the separates contiguous range. Usually ","</param>
            <returns>A string version of the range collection.</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.ToString">
            <summary>
            Returns RangeCollection as a string in the form. For example, the range collection containing 1, 2, 10, 11, and 12 returns "1-2,10-12".
            If the set is empty, returns "Empty"
            </summary>
            <returns>A string version of the range collection.</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.IsComplete(System.Int64)">
            <summary>
            Tells if the range collection includes all longs from 0 (inclusive) to itemCount-1 (inclusive)
            </summary>
            <param name="itemCount">The number of longs, starting at 0, expected</param>
            <returns>true if the range collection includes the itemCount longs starting at 0; otherwise, false</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.IsContiguous">
            <summary>
            Tells if the range collection contains a continuous set of longs.
            </summary>
            <returns>true if a continuous set; false if empty or if gaps.</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.IsComplete(System.Int64,System.Int64)">
            <summary>
            Tells if the range collection includes all longs from firstItem to lastItem (inclusive)
            </summary>
            <param name="firstItem">The first long of interest</param>
            <param name="lastItem">The last long of interest</param>
            <returns>true if the range collection includes all the longs between firstItem and lastItem (inclusive); otherwise, false</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.#ctor(Bio.Util.RangeCollection)">
            <summary>
            Create a RangeCollection by doing a deep copy of a RangeCollection
            </summary>
            <param name="rangeCollection">A new RangeCollection</param>
        </member>
        <member name="M:Bio.Util.RangeCollection.ElementsAt(Bio.Util.RangeCollection)">
            <summary>
            Returns a collection of elements at what would be the nth element for i \in rangeCollectionOfIndeces. 
            </summary>
            <param name="rangeCollectionOfIndeces">0-based indices.</param>
        </member>
        <member name="M:Bio.Util.RangeCollection.ElementsAt(System.Int64,System.Int64)">
            <summary>
            Returns a collection of elements at what would be the i'th element for i \in [startIdx,lastIdx]. startIdx and lastIdx are 0-based.
            </summary>
        </member>
        <member name="M:Bio.Util.RangeCollection.ElementAt(System.Int64)">
            <summary>
            Returns what would be the nth element if each element were enumerated.
            </summary>
            <param name="i">0-based index.</param>
        </member>
        <member name="M:Bio.Util.RangeCollection.Complement(System.Int64,System.Int64)">
            <summary>
            Returns the competeCollection - thisCollection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.Equals(Bio.Util.RangeCollection)">
            <summary>
            Tests equality between two range collections
            </summary>
            <param name="rangeCollection">The range collection we're testing against</param>
            <returns>True if and only if the ranges are identical</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.CopyTo(System.Int64[],System.Int32)">
            <summary>
            Copies the contents of the range into an array.
            </summary>
            <param name="array">Destination array</param>
            <param name="arrayIndex">Index in destination to copy data into</param>
        </member>
        <member name="M:Bio.Util.RangeCollection.Remove(System.Int64)">
            <summary>
            Remove an item from the collection. This is not supported
            with the RangeCollection.
            </summary>
            <param name="item">Item to remove</param>
            <returns>Exception</returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.GetEnumerator">
            <summary>
            Returns an enumeration of the long elements in this RangeCollection.
            </summary>
        </member>
        <member name="M:Bio.Util.RangeCollection.GetSchema">
            <summary>
            Required to override XmlSerialization. We use the default schema
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.Util.RangeCollection.ReadXml(System.Xml.XmlReader)">
            <summary>
            Overrides default XML serialization by using the ToString representation.
            </summary>
        </member>
        <member name="M:Bio.Util.RangeCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Overrides default XML serialization by using the ToString representation.
            </summary>
        </member>
        <member name="P:Bio.Util.RangeCollection.Ranges">
            <summary>
            The ranges as a sequence, for example,  1-10 then 333-1200 then 1300
            </summary>
        </member>
        <member name="P:Bio.Util.RangeCollection.FirstElement">
            <summary>
            The smallest long in the RangeCollection.
            </summary>
        </member>
        <member name="P:Bio.Util.RangeCollection.LastElement">
            <summary>
            The largest long in the RangeCollection
            </summary>
        </member>
        <member name="P:Bio.Util.RangeCollection.RangeCount">
            <summary>
            Returns the number of contiguous ranges in this collection. Useful for memory
            consumption debugging.
            </summary>
        </member>
        <member name="P:Bio.Util.RangeCollection.MaxValue">
            <summary>
            The range starting at 0 (inclusive) and going to long.MaxValue (exclusive).
            </summary>
        </member>
        <member name="P:Bio.Util.RangeCollection.IsEmpty">
            <summary>
            True if the RangeCollection contains no elements; otherwise, false.
            </summary>
        </member>
        <member name="P:Bio.Util.RangeCollection.System#Collections#Generic#ICollection{System#Int64}#Count">
            <summary>
            Count of range items as an integer. If the count exceeds the 
            size storage for an integer we return zero.
            </summary>
        </member>
        <member name="P:Bio.Util.RangeCollection.IsReadOnly">
            <summary>
            Returns whether this collection is considered read-only.
            The Range is not changeable through ICollection.
            </summary>
        </member>
        <member name="T:Bio.Util.SerialNumbers`1">
            <summary>
            Assigns serial number of objects
            </summary>
        </member>
        <member name="M:Bio.Util.SerialNumbers`1.#ctor">
            <summary>
            Create a SerialNumbers object for assigning serial numbers to values.
            </summary>
        </member>
        <member name="M:Bio.Util.SerialNumbers`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a new SerialNumbers object for assign serial numbers to values and assign serial numbers to the values in the sequence.
            </summary>
            <param name="sequence"></param>
        </member>
        <member name="F:Bio.Util.SerialNumbers`1.ItemToSerialNumber">
            !!!should this be restricted so that it cannot be changed without using the methods of the class?
             <summary>
             A mapping from items to serial numbers
             </summary>
        </member>
        <member name="F:Bio.Util.SerialNumbers`1.ItemList">
            !!!should this be restricted so that it cannot be changed without using the methods of the class?
             <summary>
             A list of the items in order.
             </summary>
        </member>
        <member name="M:Bio.Util.SerialNumbers`1.GetNewOrOld(`0)">
            <summary>
            Returns the serial number of an item. If the item has already been assigned a serial number, returns that number; 
            otherwise, assigns a new number to the item and returns that new number.
            </summary>
            <param name="item">The item</param>
            <returns>The item's serial number</returns>
        </member>
        <member name="M:Bio.Util.SerialNumbers`1.GetNew(`0)">
            <summary>
            Assigns a serial number to a new item. Raises an exception of the item is not new.
            </summary>
            <param name="item">The item</param>
            <returns>The items serial number</returns>
        </member>
        <member name="M:Bio.Util.SerialNumbers`1.GetOld(`0)">
            <summary>
            Finds the serial number of item to which a serial number has already been assigned. Raises an exception of the item is new.
            </summary>
            <param name="item">The item</param>
            <returns>The serial number of that item.</returns>
        </member>
        <member name="M:Bio.Util.SerialNumbers`1.TryGetOld(`0,System.Int32@)">
            <summary>
            Finds the serial number of item to which a serial number has already been assigned.
            </summary>
            <param name="item">The item</param>
            <param name="serialNumber">The serial number that was assigned to that item.</param>
            <returns>true if the item has previously been assigned a serial number; otherwise, false.</returns>
        </member>
        <member name="M:Bio.Util.SerialNumbers`1.Contains(`0)">
            <summary>
            Tells if an item already has a serial number
            </summary>
            <param name="item">the item</param>
            <returns>true if the item has previously been assigned a serial number; otherwise, false.</returns>
        </member>
        <member name="M:Bio.Util.SerialNumbers`1.GetItem(System.Int32)">
            <summary>
            Given a serialNumber, return the item with that serial number
            </summary>
            <param name="serialNumber">The serial number of interest</param>
            <returns>The item with that serial number</returns>
        </member>
        <member name="M:Bio.Util.SerialNumbers`1.Save(System.IO.TextWriter)">
            <summary>
            Write the items in order to a TextWriter
            </summary>
        </member>
        <member name="P:Bio.Util.SerialNumbers`1.Last">
            <summary>
            The last serial number assigned.
            </summary>
        </member>
        <member name="P:Bio.Util.SerialNumbers`1.Count">
            <summary>
            The number of items to which serial numbers have been assigned. This is always one more than the largest serial number.
            </summary>
        </member>
        <member name="T:Bio.Util.SortedList`2">
            <summary>
            Generic SortedList for Portable Class Library
            </summary>
        </member>
        <member name="M:Bio.Util.SortedList`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Bio.Util.SortedList`2.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="initialCapacity"></param>
        </member>
        <member name="M:Bio.Util.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="comparer"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:Bio.Util.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructor
            </summary>
            <param name="dictionary"></param>
            <param name="comparer"></param>
        </member>
        <member name="T:Bio.Util.UOPair`1">
            <summary>
            Defines a pair in which the order of the two items are always keep sorted. This struct is hashable and IComparable based
            on its elements.
            </summary>
            <typeparam name="T">The type of the pair's elements</typeparam>
        </member>
        <member name="M:Bio.Util.UOPair`1.#ctor(`0,`0)">
            <summary>
            Creates a new UOPair from new elements. The items may be the same and do not need to be in order. If T allows null, then null is allowed.
            If exactly one of e1 and e2 is null, then First will be null and Second will be non-null.
            The items must be IComparable{T}.
            </summary>
            <param name="e1">an element for the UOPair</param>
            <param name="e2">another element for the UOPair. The two elements may be the same and do not need to be in order.</param>
            <returns>A struct with the two items in sorted order.</returns>
        </member>
        <member name="M:Bio.Util.UOPair`1.GetEnumerator">
            <summary>
            Enumerates the pair in sorted order
            </summary>
            <returns>the elements of the pair in sorted order.</returns>
        </member>
        <member name="M:Bio.Util.UOPair`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates the pair in sorted order
            </summary>
            <returns>the elements of the pair in sorted order.</returns>
        </member>
        <member name="M:Bio.Util.UOPair`1.Equals(System.Object)">
            <summary>
            Two UOPairs are equal if their (sorted) elements are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Util.UOPair`1.op_Equality(Bio.Util.UOPair{`0},Bio.Util.UOPair{`0})">
            <summary> </summary>
        </member>
        <member name="M:Bio.Util.UOPair`1.op_Inequality(Bio.Util.UOPair{`0},Bio.Util.UOPair{`0})">
            <summary> </summary>
        </member>
        <member name="M:Bio.Util.UOPair`1.op_LessThan(Bio.Util.UOPair{`0},Bio.Util.UOPair{`0})">
            <summary> </summary>
        </member>
        <member name="M:Bio.Util.UOPair`1.op_GreaterThan(Bio.Util.UOPair{`0},Bio.Util.UOPair{`0})">
            <summary> </summary>
        </member>
        <member name="M:Bio.Util.UOPair`1.GetHashCode">
            <summary>
            A hashcode such that two UOPairs{T} with the same elements will have the same hashcode.
            Depending on the subtypes, the hash code may be different on 32-bit and 64-bit machines
            </summary>
        </member>
        <member name="M:Bio.Util.UOPair`1.ToString">
            <summary>
            Either (UO e1 e2) -- if elements differ -- or (UO 2x e)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.Util.UOPair`1.CompareTo(Bio.Util.UOPair{`0})">
            <summary>
            Compares the UOPair to the other UOPair and returns an indication of their relative values (based on the ICompare of their elements).
            </summary>
            <param name="other">the UOPair to compare to</param>
            <returns></returns>
        </member>
        <member name="P:Bio.Util.UOPair`1.First">
            <summary>
            The first of the two sorted items.
            </summary>
        </member>
        <member name="P:Bio.Util.UOPair`1.Second">
            <summary>
            The second of the two sorted items.
            </summary>
        </member>
        <member name="P:Bio.Util.UOPair`1.ElementsAreSame">
            <summary>
            True, if the elements are Equals; false, otherwise. If both elements are null, also true.
            </summary>
        </member>
        <member name="T:Bio.Util.UOPair">
            <summary>
            Defines a static Create method.
            </summary>
        </member>
        <member name="M:Bio.Util.UOPair.Create``1(``0,``0)">
            <summary>
            Usage:  UOPair.Create(val1, val2)
            </summary>
        </member>
        <member name="T:Bio.Util.CharToDoubleWithLimitsConverter">
            <summary>
            A char to double converter that limits the size of the double.
            </summary>
        </member>
        <member name="M:Bio.Util.CharToDoubleWithLimitsConverter.#ctor(System.Int32)">
            <summary>
            Create a char to double converter that limits the size of the double.
            </summary>
            <param name="maxValue">The largest double that can ever be returned.</param>
        </member>
        <member name="T:Bio.Util.CharToGenericConverter`1">
            <summary>
            This is a slow parser that will parse to anything with a Parse or TryParse method using the Parser class. This uses reflection and will not
            be terribly efficient.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Bio.WordMatch">
            <summary>
                WordMatch stores the region of similarity between two sequences.
            </summary>
        </member>
        <member name="M:Bio.WordMatch.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the WordMatch class.
            </summary>
            <param name="length">Length of the match</param>
            <param name="sequence1Start">Start index of the first sequence.</param>
            <param name="sequence2Start"> Start index of the second sequence.</param>
        </member>
        <member name="M:Bio.WordMatch.GetMinimalList(System.Collections.Generic.List{Bio.WordMatch},System.Int32)">
            <summary>
                Given a list of matches, reduce it to the minimal set of best
                non-overlapping matches.
            </summary>
            <param name="completeList">List of matches to reduce to non-overlapping set.</param>
            <param name="wordLength">Wordlength entered by the user.</param>
            <returns>Minimal set of best non-overlapping matches.</returns>
        </member>
        <member name="M:Bio.WordMatch.BuildMatchTable(Bio.Algorithms.Kmer.KmersOfSequence,Bio.ISequence,System.Int32)">
            <summary>
                Create a list of all the matches and order them by the
                second sequence.
            </summary>
            <param name="kmerList">List of kmer's.</param>
            <param name="seq2">Second sequence.</param>
            <param name="wordLength">Wordlength entered by the user</param>
            <returns>List of all the matches.</returns>
        </member>
        <member name="M:Bio.WordMatch.WordDeadZone(Bio.WordMatch,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Determines if a match is within the region which is not overlapped by the
                match starting at position (deadx1, deady1) or ending at position
                (deadx2, deady2). If it is in this region
                (the 'live zone') then true is returned, else false is returned.
            </summary>
            <param name="wordMatch">Word Match object which holds the similarity of the two sequences.</param>
            <param name="deadx1">starting x-position of the region for which overlapped has to be checked.</param>
            <param name="deady1">starting y-position of the region for which overlapped has to be checked.</param>
            <param name="deadx2">ending x-position of the region for which overlapped has to be checked.</param>
            <param name="deady2">ending y-position of the region for which overlapped has to be checked.</param>
            <param name="wordLength">Wordlength entered by the user</param>
            <returns>
                true: if the wordMatch is in the overlapped region, else false.
            </returns>
        </member>
        <member name="M:Bio.WordMatch.FindCorrespondingMatch(System.String,Bio.Algorithms.Kmer.KmersOfSequence)">
            <summary>
                Finds the sequence in the list of IKmer and returns the list of position
                of the Kmers.
            </summary>
            <param name="sequence">Sequence which has to be matched in the list of IKmer.</param>
            <param name="kmerList">List of IKmer.</param>
            <returns>Returns the list of position of IKmer.</returns>
        </member>
        <member name="M:Bio.WordMatch.GetHashCode">
            <summary>
                Overrides hash function for a particular type.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Bio.WordMatch.Equals(System.Object)">
            <summary>
                Overrides the equal method
            </summary>
            <param name="obj">Object to be checked</param>
            <returns>Is equals</returns>
        </member>
        <member name="M:Bio.WordMatch.op_Equality(Bio.WordMatch,Bio.WordMatch)">
            <summary>
                Override equal operator
            </summary>
            <param name="leftHandSideObject">LHS object</param>
            <param name="rightHandSideObject">RHS object</param>
            <returns>Is LHS == RHS</returns>
        </member>
        <member name="M:Bio.WordMatch.op_Inequality(Bio.WordMatch,Bio.WordMatch)">
            <summary>
                Override not equal operator
            </summary>
            <param name="leftHandSideObject">LHS object</param>
            <param name="rightHandSideObject">RHS object</param>
            <returns>Is LHS == RHS</returns>
        </member>
        <member name="M:Bio.WordMatch.op_LessThan(Bio.WordMatch,Bio.WordMatch)">
            <summary>
                Override less than operator
            </summary>
            <param name="leftHandSideObject">LHS object</param>
            <param name="rightHandSideObject">RHS object</param>
            <returns>Is LHS == RHS</returns>
        </member>
        <member name="M:Bio.WordMatch.op_GreaterThan(Bio.WordMatch,Bio.WordMatch)">
            <summary>
                Override greater than operator
            </summary>
            <param name="leftHandSideObject">LHS object</param>
            <param name="rightHandSideObject">RHS object</param>
            <returns>Is LHS == RHS</returns>
        </member>
        <member name="M:Bio.WordMatch.CompareTo(System.Object)">
            <summary>
                CompareTo method is used while sorting WordMatch objects.
            </summary>
            <param name="obj">WordMatch object</param>
            <returns>
                Returns zero if the objects are equal,
                Else, returns zero if the objects have the same length, sequence1start and sequence2Start
                If lengths are equal, then the objects are ordered by sequence1start
                If lengths are equal and sequence1Start are equal, then the objects are ordered by
            </returns>
        </member>
        <member name="M:Bio.WordMatch.CompareTo(Bio.WordMatch)">
            <summary>
                Compares two sequence matches so the result can be used in sorting.
                The comparison is done by size and if the size is equal, by seq1
                start position.  If the sequence1 start positions are equal they are
                sorted by sequence2 start position.
            </summary>
            <param name="other">WordMatch object</param>
            <returns>
                Returns zero if the objects have the same length, sequence1start and sequence2Start
                If lengths are equal, then the objects are ordered by sequence1start
                If lengths are equal and sequence1Start are equal, then the objects are ordered by sequence2start
            </returns>
        </member>
        <member name="M:Bio.WordMatch.Equals(Bio.WordMatch)">
            <summary>
                Checks if another WordMatch object is equal to the current
                object.
            </summary>
            <param name="other">WordMatch object to be compared.</param>
            <returns>
                true: if the objects are equal else false.
            </returns>
        </member>
        <member name="P:Bio.WordMatch.Length">
            <summary>
                Gets or sets the length of the match
            </summary>
        </member>
        <member name="P:Bio.WordMatch.Sequence1Start">
            <summary>
                Gets or sets the start index of the first sequence.
            </summary>
        </member>
        <member name="P:Bio.WordMatch.Sequence2Start">
            <summary>
                Gets or sets the start index of the second sequence.
            </summary>
        </member>
        <member name="P:Bio.WordMatch.Deleted">
            <summary>
                Gets or sets a value indicating whether this word match should be considered or not.
            </summary>
        </member>
    </members>
</doc>
